5fc6946761d9e4286410f1ba55b07ca5
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
var react_1 = __importDefault(require("react"));
describe('Text Component', function () {
  it('renders correctly with default props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title"
      })),
      getByText = _ref.getByText;
    expect(getByText('Test Title')).toBeTruthy();
  });
  it('applies the correct style based on the "h" prop', function () {
    var styles = ['h0', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7', 'h8', 'h9', 'h10', 'h11', 'h12'];
    styles.forEach(function (style) {
      var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
          title: "Test Title",
          h: style
        })),
        getByTestId = _ref2.getByTestId;
      var expectedStyle = _1.textStyles[style];
      var receivedStyle = getByTestId('text-component').props.style[0];
      var filteredReceivedStyle = Object.keys(expectedStyle).reduce(function (obj, key) {
        obj[key] = receivedStyle[key];
        return obj;
      }, {});
      console.log('Expected Style:', expectedStyle);
      console.log('Received Style:', receivedStyle);
      console.log('Filtered Received Style:', filteredReceivedStyle);
      expect(filteredReceivedStyle).toEqual(expectedStyle);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF9uYXRpdmVfMSIsInJlcXVpcmUiLCJfMSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJkZXNjcmliZSIsIml0IiwiX3JlZiIsInJlbmRlciIsIl9qc3hSdW50aW1lIiwianN4IiwiVGV4dCIsInRpdGxlIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsInN0eWxlcyIsImZvckVhY2giLCJzdHlsZSIsIl9yZWYyIiwiaCIsImdldEJ5VGVzdElkIiwiZXhwZWN0ZWRTdHlsZSIsInRleHRTdHlsZXMiLCJyZWNlaXZlZFN0eWxlIiwicHJvcHMiLCJmaWx0ZXJlZFJlY2VpdmVkU3R5bGUiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwib2JqIiwia2V5IiwiY29uc29sZSIsImxvZyIsInRvRXF1YWwiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL1RleHQvVGV4dC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3JlbmRlcn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnXG5pbXBvcnQge1RleHQsIGhULCB0ZXh0U3R5bGVzfSBmcm9tICcuLycgLy8gUmVwbGFjZSB3aXRoIHlvdXIgYWN0dWFsIGZpbGUgcGF0aFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5kZXNjcmliZSgnVGV4dCBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIGRlZmF1bHQgcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXIoPFRleHQgdGl0bGU9XCJUZXN0IFRpdGxlXCIgLz4pXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnVGVzdCBUaXRsZScpKS50b0JlVHJ1dGh5KClcbiAgfSlcblxuICBpdCgnYXBwbGllcyB0aGUgY29ycmVjdCBzdHlsZSBiYXNlZCBvbiB0aGUgXCJoXCIgcHJvcCcsICgpID0+IHtcbiAgICBjb25zdCBzdHlsZXM6IGhUW10gPSBbXG4gICAgICAnaDAnLFxuICAgICAgJ2gxJyxcbiAgICAgICdoMicsXG4gICAgICAnaDMnLFxuICAgICAgJ2g0JyxcbiAgICAgICdoNScsXG4gICAgICAnaDYnLFxuICAgICAgJ2g3JyxcbiAgICAgICdoOCcsXG4gICAgICAnaDknLFxuICAgICAgJ2gxMCcsXG4gICAgICAnaDExJyxcbiAgICAgICdoMTInLFxuICAgIF1cbiAgICBzdHlsZXMuZm9yRWFjaChzdHlsZSA9PiB7XG4gICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxUZXh0IHRpdGxlPVwiVGVzdCBUaXRsZVwiIGg9e3N0eWxlfSAvPilcbiAgICAgIGNvbnN0IGV4cGVjdGVkU3R5bGUgPSB0ZXh0U3R5bGVzW3N0eWxlXVxuICAgICAgY29uc3QgcmVjZWl2ZWRTdHlsZSA9IGdldEJ5VGVzdElkKCd0ZXh0LWNvbXBvbmVudCcpLnByb3BzLnN0eWxlWzBdXG5cbiAgICAgIC8vINCe0YLQsdGA0LDRgdGL0LLQsNC10Lwg0LvQuNGI0L3QuNC1INGB0LLQvtC50YHRgtCy0LAg0LjQtyDQv9C+0LvRg9GH0LXQvdC90L7Qs9C+INGB0YLQuNC70Y9cbiAgICAgIGNvbnN0IGZpbHRlcmVkUmVjZWl2ZWRTdHlsZSA9IE9iamVjdC5rZXlzKGV4cGVjdGVkU3R5bGUpLnJlZHVjZShcbiAgICAgICAgKG9iajogYW55LCBrZXkpID0+IHtcbiAgICAgICAgICBvYmpba2V5XSA9IHJlY2VpdmVkU3R5bGVba2V5XVxuICAgICAgICAgIHJldHVybiBvYmpcbiAgICAgICAgfSxcbiAgICAgICAge30sXG4gICAgICApXG5cbiAgICAgIC8vINCe0YLQu9Cw0LTQvtGH0L3Ri9C5INCy0YvQstC+0LQg0LTQu9GPINC40YHRgdC70LXQtNC+0LLQsNC90LjRj1xuICAgICAgY29uc29sZS5sb2coJ0V4cGVjdGVkIFN0eWxlOicsIGV4cGVjdGVkU3R5bGUpXG4gICAgICBjb25zb2xlLmxvZygnUmVjZWl2ZWQgU3R5bGU6JywgcmVjZWl2ZWRTdHlsZSlcbiAgICAgIGNvbnNvbGUubG9nKCdGaWx0ZXJlZCBSZWNlaXZlZCBTdHlsZTonLCBmaWx0ZXJlZFJlY2VpdmVkU3R5bGUpXG5cbiAgICAgIGV4cGVjdChmaWx0ZXJlZFJlY2VpdmVkU3R5bGUpLnRvRXF1YWwoZXhwZWN0ZWRTdHlsZSlcbiAgICB9KVxuICB9KVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLGNBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLEVBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUMsZUFBQSxDQUFBSCxPQUFBO0FBRUFJLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFLO0VBQzlCQyxFQUFFLENBQUMsc0NBQXNDLEVBQUUsWUFBSztJQUM5QyxJQUFBQyxJQUFBLEdBQW9CLElBQUFQLGNBQUEsQ0FBQVEsTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDUixFQUFBLENBQUFTLElBQUk7UUFBQ0MsS0FBSyxFQUFDO01BQVksRUFBRyxDQUFDO01BQWhEQyxTQUFTLEdBQUFOLElBQUEsQ0FBVE0sU0FBUztJQUNoQkMsTUFBTSxDQUFDRCxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQ0UsVUFBVSxFQUFFO0VBQzlDLENBQUMsQ0FBQztFQUVGVCxFQUFFLENBQUMsaURBQWlELEVBQUUsWUFBSztJQUN6RCxJQUFNVSxNQUFNLEdBQVMsQ0FDbkIsSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLEtBQUssRUFDTCxLQUFLLEVBQ0wsS0FBSyxDQUNOO0lBQ0RBLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDLFVBQUFDLEtBQUssRUFBRztNQUNyQixJQUFBQyxLQUFBLEdBQXNCLElBQUFuQixjQUFBLENBQUFRLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1IsRUFBQSxDQUFBUyxJQUFJO1VBQUNDLEtBQUssRUFBQyxZQUFZO1VBQUNRLENBQUMsRUFBRUY7UUFBTSxFQUFHLENBQUM7UUFBNURHLFdBQVcsR0FBQUYsS0FBQSxDQUFYRSxXQUFXO01BQ2xCLElBQU1DLGFBQWEsR0FBR3BCLEVBQUEsQ0FBQXFCLFVBQVUsQ0FBQ0wsS0FBSyxDQUFDO01BQ3ZDLElBQU1NLGFBQWEsR0FBR0gsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUNJLEtBQUssQ0FBQ1AsS0FBSyxDQUFDLENBQUMsQ0FBQztNQUdsRSxJQUFNUSxxQkFBcUIsR0FBR0MsTUFBTSxDQUFDQyxJQUFJLENBQUNOLGFBQWEsQ0FBQyxDQUFDTyxNQUFNLENBQzdELFVBQUNDLEdBQVEsRUFBRUMsR0FBRyxFQUFJO1FBQ2hCRCxHQUFHLENBQUNDLEdBQUcsQ0FBQyxHQUFHUCxhQUFhLENBQUNPLEdBQUcsQ0FBQztRQUM3QixPQUFPRCxHQUFHO01BQ1osQ0FBQyxFQUNELEVBQUUsQ0FDSDtNQUdERSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRVgsYUFBYSxDQUFDO01BQzdDVSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRVQsYUFBYSxDQUFDO01BQzdDUSxPQUFPLENBQUNDLEdBQUcsQ0FBQywwQkFBMEIsRUFBRVAscUJBQXFCLENBQUM7TUFFOURaLE1BQU0sQ0FBQ1kscUJBQXFCLENBQUMsQ0FBQ1EsT0FBTyxDQUFDWixhQUFhLENBQUM7SUFDdEQsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=