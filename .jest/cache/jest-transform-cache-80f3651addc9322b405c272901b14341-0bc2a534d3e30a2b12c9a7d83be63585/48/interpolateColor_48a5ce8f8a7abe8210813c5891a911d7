c396e00a2e5c83895c258c48d78a5df9
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Extrapolate = exports.ColorSpace = void 0;
exports.interpolateColor = interpolateColor;
exports.interpolateSharableColor = void 0;
exports.useInterpolateConfig = useInterpolateConfig;
var _Colors = require("./Colors");
var _core = require("./core");
var _interpolation = require("./interpolation");
var _useSharedValue = require("./hook/useSharedValue");
var Extrapolate = {
  EXTEND: 'extend',
  CLAMP: 'clamp',
  IDENTITY: 'identity'
};
exports.Extrapolate = Extrapolate;
var interpolateColorsHSV = function interpolateColorsHSV(value, inputRange, colors, options) {
  'worklet';

  var h = 0;
  var _options$useCorrected = options.useCorrectedHSVInterpolation,
    useCorrectedHSVInterpolation = _options$useCorrected === void 0 ? true : _options$useCorrected;
  if (useCorrectedHSVInterpolation) {
    var correctedInputRange = [inputRange[0]];
    var originalH = colors.h;
    var correctedH = [originalH[0]];
    for (var i = 1; i < originalH.length; ++i) {
      var d = originalH[i] - originalH[i - 1];
      if (originalH[i] > originalH[i - 1] && d > 0.5) {
        correctedInputRange.push(inputRange[i]);
        correctedInputRange.push(inputRange[i] + 0.00001);
        correctedH.push(originalH[i] - 1);
        correctedH.push(originalH[i]);
      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {
        correctedInputRange.push(inputRange[i]);
        correctedInputRange.push(inputRange[i] + 0.00001);
        correctedH.push(originalH[i] + 1);
        correctedH.push(originalH[i]);
      } else {
        correctedInputRange.push(inputRange[i]);
        correctedH.push(originalH[i]);
      }
    }
    h = ((0, _interpolation.interpolate)(value, correctedInputRange, correctedH, Extrapolate.CLAMP) + 1) % 1;
  } else {
    h = (0, _interpolation.interpolate)(value, inputRange, colors.h, Extrapolate.CLAMP);
  }
  var s = (0, _interpolation.interpolate)(value, inputRange, colors.s, Extrapolate.CLAMP);
  var v = (0, _interpolation.interpolate)(value, inputRange, colors.v, Extrapolate.CLAMP);
  var a = (0, _interpolation.interpolate)(value, inputRange, colors.a, Extrapolate.CLAMP);
  return (0, _Colors.hsvToColor)(h, s, v, a);
};
var toLinearSpace = function toLinearSpace(x, gamma) {
  'worklet';

  return x.map(function (v) {
    return Math.pow(v / 255, gamma);
  });
};
var toGammaSpace = function toGammaSpace(x, gamma) {
  'worklet';

  return Math.round(Math.pow(x, 1 / gamma) * 255);
};
var interpolateColorsRGB = function interpolateColorsRGB(value, inputRange, colors, options) {
  'worklet';

  var _options$gamma = options.gamma,
    gamma = _options$gamma === void 0 ? 2.2 : _options$gamma;
  var outputR = colors.r,
    outputG = colors.g,
    outputB = colors.b;
  if (gamma !== 1) {
    outputR = toLinearSpace(outputR, gamma);
    outputG = toLinearSpace(outputG, gamma);
    outputB = toLinearSpace(outputB, gamma);
  }
  var r = (0, _interpolation.interpolate)(value, inputRange, outputR, Extrapolate.CLAMP);
  var g = (0, _interpolation.interpolate)(value, inputRange, outputG, Extrapolate.CLAMP);
  var b = (0, _interpolation.interpolate)(value, inputRange, outputB, Extrapolate.CLAMP);
  var a = (0, _interpolation.interpolate)(value, inputRange, colors.a, Extrapolate.CLAMP);
  if (gamma === 1) {
    return (0, _Colors.rgbaColor)(r, g, b, a);
  }
  return (0, _Colors.rgbaColor)(toGammaSpace(r, gamma), toGammaSpace(g, gamma), toGammaSpace(b, gamma), a);
};
var getInterpolateRGB = function getInterpolateRGB(colors) {
  'worklet';

  var r = [];
  var g = [];
  var b = [];
  var a = [];
  for (var i = 0; i < colors.length; ++i) {
    var color = colors[i];
    var processedColor = (0, _Colors.processColor)(color);
    if (processedColor !== null && processedColor !== undefined) {
      r.push((0, _Colors.red)(processedColor));
      g.push((0, _Colors.green)(processedColor));
      b.push((0, _Colors.blue)(processedColor));
      a.push((0, _Colors.opacity)(processedColor));
    }
  }
  return {
    r: r,
    g: g,
    b: b,
    a: a
  };
};
var getInterpolateHSV = function getInterpolateHSV(colors) {
  'worklet';

  var h = [];
  var s = [];
  var v = [];
  var a = [];
  for (var i = 0; i < colors.length; ++i) {
    var color = colors[i];
    var processedColor = (0, _Colors.processColor)(color);
    if (typeof processedColor === 'number') {
      var processedHSVColor = (0, _Colors.RGBtoHSV)((0, _Colors.red)(processedColor), (0, _Colors.green)(processedColor), (0, _Colors.blue)(processedColor));
      h.push(processedHSVColor.h);
      s.push(processedHSVColor.s);
      v.push(processedHSVColor.v);
      a.push((0, _Colors.opacity)(processedColor));
    }
  }
  return {
    h: h,
    s: s,
    v: v,
    a: a
  };
};
function interpolateColor(value, inputRange, outputRange) {
  'worklet';

  var colorSpace = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'RGB';
  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  if (colorSpace === 'HSV') {
    return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);
  } else if (colorSpace === 'RGB') {
    return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);
  }
  throw new Error(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);
}
var ColorSpace = function (ColorSpace) {
  ColorSpace[ColorSpace["RGB"] = 0] = "RGB";
  ColorSpace[ColorSpace["HSV"] = 1] = "HSV";
  return ColorSpace;
}({});
exports.ColorSpace = ColorSpace;
function useInterpolateConfig(inputRange, outputRange) {
  var colorSpace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ColorSpace.RGB;
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  return (0, _useSharedValue.useSharedValue)({
    inputRange: inputRange,
    outputRange: outputRange,
    colorSpace: colorSpace,
    cache: (0, _core.makeMutable)(null),
    options: options
  });
}
var interpolateSharableColor = function interpolateSharableColor(value, interpolateConfig) {
  'worklet';

  var colors = interpolateConfig.value.cache.value;
  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {
    if (!colors) {
      colors = getInterpolateRGB(interpolateConfig.value.outputRange);
      interpolateConfig.value.cache.value = colors;
    }
    return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);
  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {
    if (!colors) {
      colors = getInterpolateHSV(interpolateConfig.value.outputRange);
      interpolateConfig.value.cache.value = colors;
    }
    return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);
  }
  throw new Error(`Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`);
};
exports.interpolateSharableColor = interpolateSharableColor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQ29sb3JzIiwicmVxdWlyZSIsIl9jb3JlIiwiX2ludGVycG9sYXRpb24iLCJfdXNlU2hhcmVkVmFsdWUiLCJFeHRyYXBvbGF0ZSIsIkVYVEVORCIsIkNMQU1QIiwiSURFTlRJVFkiLCJleHBvcnRzIiwiaW50ZXJwb2xhdGVDb2xvcnNIU1YiLCJ2YWx1ZSIsImlucHV0UmFuZ2UiLCJjb2xvcnMiLCJvcHRpb25zIiwiaCIsIl9vcHRpb25zJHVzZUNvcnJlY3RlZCIsInVzZUNvcnJlY3RlZEhTVkludGVycG9sYXRpb24iLCJjb3JyZWN0ZWRJbnB1dFJhbmdlIiwib3JpZ2luYWxIIiwiY29ycmVjdGVkSCIsImkiLCJsZW5ndGgiLCJkIiwicHVzaCIsImludGVycG9sYXRlIiwicyIsInYiLCJhIiwiaHN2VG9Db2xvciIsInRvTGluZWFyU3BhY2UiLCJ4IiwiZ2FtbWEiLCJtYXAiLCJNYXRoIiwicG93IiwidG9HYW1tYVNwYWNlIiwicm91bmQiLCJpbnRlcnBvbGF0ZUNvbG9yc1JHQiIsIl9vcHRpb25zJGdhbW1hIiwib3V0cHV0UiIsInIiLCJvdXRwdXRHIiwiZyIsIm91dHB1dEIiLCJiIiwicmdiYUNvbG9yIiwiZ2V0SW50ZXJwb2xhdGVSR0IiLCJjb2xvciIsInByb2Nlc3NlZENvbG9yIiwicHJvY2Vzc0NvbG9yIiwidW5kZWZpbmVkIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwib3BhY2l0eSIsImdldEludGVycG9sYXRlSFNWIiwicHJvY2Vzc2VkSFNWQ29sb3IiLCJSR0J0b0hTViIsImludGVycG9sYXRlQ29sb3IiLCJvdXRwdXRSYW5nZSIsImNvbG9yU3BhY2UiLCJhcmd1bWVudHMiLCJFcnJvciIsIkNvbG9yU3BhY2UiLCJ1c2VJbnRlcnBvbGF0ZUNvbmZpZyIsIlJHQiIsInVzZVNoYXJlZFZhbHVlIiwiY2FjaGUiLCJtYWtlTXV0YWJsZSIsImludGVycG9sYXRlU2hhcmFibGVDb2xvciIsImludGVycG9sYXRlQ29uZmlnIiwiSFNWIl0sInNvdXJjZXMiOlsiaW50ZXJwb2xhdGVDb2xvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBoc3ZUb0NvbG9yLFxuICBSR0J0b0hTVixcbiAgcmdiYUNvbG9yLFxuICBwcm9jZXNzQ29sb3IsXG4gIHJlZCxcbiAgZ3JlZW4sXG4gIGJsdWUsXG4gIG9wYWNpdHksXG59IGZyb20gJy4vQ29sb3JzJztcbmltcG9ydCB7IG1ha2VNdXRhYmxlIH0gZnJvbSAnLi9jb3JlJztcbmltcG9ydCB7IGludGVycG9sYXRlIH0gZnJvbSAnLi9pbnRlcnBvbGF0aW9uJztcbmltcG9ydCB0eXBlIHsgU2hhcmVkVmFsdWUgfSBmcm9tICcuL2NvbW1vblR5cGVzJztcbmltcG9ydCB7IHVzZVNoYXJlZFZhbHVlIH0gZnJvbSAnLi9ob29rL3VzZVNoYXJlZFZhbHVlJztcblxuZXhwb3J0IGNvbnN0IEV4dHJhcG9sYXRlID0ge1xuICBFWFRFTkQ6ICdleHRlbmQnLFxuICBDTEFNUDogJ2NsYW1wJyxcbiAgSURFTlRJVFk6ICdpZGVudGl0eScsXG59O1xuXG5leHBvcnQgdHlwZSBJbnRlcnBvbGF0aW9uT3B0aW9ucyA9IHtcbiAgZ2FtbWE/OiBudW1iZXI7XG4gIHVzZUNvcnJlY3RlZEhTVkludGVycG9sYXRpb24/OiBib29sZWFuO1xufTtcblxuY29uc3QgaW50ZXJwb2xhdGVDb2xvcnNIU1YgPSAoXG4gIHZhbHVlOiBudW1iZXIsXG4gIGlucHV0UmFuZ2U6IHJlYWRvbmx5IG51bWJlcltdLFxuICBjb2xvcnM6IEludGVycG9sYXRlSFNWLFxuICBvcHRpb25zOiBJbnRlcnBvbGF0aW9uT3B0aW9uc1xuKSA9PiB7XG4gICd3b3JrbGV0JztcbiAgbGV0IGggPSAwO1xuICBjb25zdCB7IHVzZUNvcnJlY3RlZEhTVkludGVycG9sYXRpb24gPSB0cnVlIH0gPSBvcHRpb25zO1xuICBpZiAodXNlQ29ycmVjdGVkSFNWSW50ZXJwb2xhdGlvbikge1xuICAgIC8vIGlmIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gaHVlcyBpbiBhIHJhbmdlIGlzID4gMTgwIGRlZ1xuICAgIC8vIHRoZW4gbW92ZSB0aGUgaHVlIGF0IHRoZSByaWdodCBlbmQgb2YgdGhlIHJhbmdlICsvLSAzNjAgZGVnXG4gICAgLy8gYW5kIGFkZCB0aGUgbmV4dCBwb2ludCBpbiB0aGUgb3JpZ2luYWwgcGxhY2UgKyAwLjAwMDAxIHdpdGggb3JpZ2luYWwgaHVlXG4gICAgLy8gdG8gbm90IGJyZWFrIHRoZSBuZXh0IHJhbmdlXG4gICAgY29uc3QgY29ycmVjdGVkSW5wdXRSYW5nZSA9IFtpbnB1dFJhbmdlWzBdXTtcbiAgICBjb25zdCBvcmlnaW5hbEggPSBjb2xvcnMuaDtcbiAgICBjb25zdCBjb3JyZWN0ZWRIID0gW29yaWdpbmFsSFswXV07XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IG9yaWdpbmFsSC5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3QgZCA9IG9yaWdpbmFsSFtpXSAtIG9yaWdpbmFsSFtpIC0gMV07XG4gICAgICBpZiAob3JpZ2luYWxIW2ldID4gb3JpZ2luYWxIW2kgLSAxXSAmJiBkID4gMC41KSB7XG4gICAgICAgIGNvcnJlY3RlZElucHV0UmFuZ2UucHVzaChpbnB1dFJhbmdlW2ldKTtcbiAgICAgICAgY29ycmVjdGVkSW5wdXRSYW5nZS5wdXNoKGlucHV0UmFuZ2VbaV0gKyAwLjAwMDAxKTtcbiAgICAgICAgY29ycmVjdGVkSC5wdXNoKG9yaWdpbmFsSFtpXSAtIDEpO1xuICAgICAgICBjb3JyZWN0ZWRILnB1c2gob3JpZ2luYWxIW2ldKTtcbiAgICAgIH0gZWxzZSBpZiAob3JpZ2luYWxIW2ldIDwgb3JpZ2luYWxIW2kgLSAxXSAmJiBkIDwgLTAuNSkge1xuICAgICAgICBjb3JyZWN0ZWRJbnB1dFJhbmdlLnB1c2goaW5wdXRSYW5nZVtpXSk7XG4gICAgICAgIGNvcnJlY3RlZElucHV0UmFuZ2UucHVzaChpbnB1dFJhbmdlW2ldICsgMC4wMDAwMSk7XG4gICAgICAgIGNvcnJlY3RlZEgucHVzaChvcmlnaW5hbEhbaV0gKyAxKTtcbiAgICAgICAgY29ycmVjdGVkSC5wdXNoKG9yaWdpbmFsSFtpXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb3JyZWN0ZWRJbnB1dFJhbmdlLnB1c2goaW5wdXRSYW5nZVtpXSk7XG4gICAgICAgIGNvcnJlY3RlZEgucHVzaChvcmlnaW5hbEhbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICBoID1cbiAgICAgIChpbnRlcnBvbGF0ZSh2YWx1ZSwgY29ycmVjdGVkSW5wdXRSYW5nZSwgY29ycmVjdGVkSCwgRXh0cmFwb2xhdGUuQ0xBTVApICtcbiAgICAgICAgMSkgJVxuICAgICAgMTtcbiAgfSBlbHNlIHtcbiAgICBoID0gaW50ZXJwb2xhdGUodmFsdWUsIGlucHV0UmFuZ2UsIGNvbG9ycy5oLCBFeHRyYXBvbGF0ZS5DTEFNUCk7XG4gIH1cbiAgY29uc3QgcyA9IGludGVycG9sYXRlKHZhbHVlLCBpbnB1dFJhbmdlLCBjb2xvcnMucywgRXh0cmFwb2xhdGUuQ0xBTVApO1xuICBjb25zdCB2ID0gaW50ZXJwb2xhdGUodmFsdWUsIGlucHV0UmFuZ2UsIGNvbG9ycy52LCBFeHRyYXBvbGF0ZS5DTEFNUCk7XG4gIGNvbnN0IGEgPSBpbnRlcnBvbGF0ZSh2YWx1ZSwgaW5wdXRSYW5nZSwgY29sb3JzLmEsIEV4dHJhcG9sYXRlLkNMQU1QKTtcbiAgcmV0dXJuIGhzdlRvQ29sb3IoaCwgcywgdiwgYSk7XG59O1xuXG5jb25zdCB0b0xpbmVhclNwYWNlID0gKHg6IG51bWJlcltdLCBnYW1tYTogbnVtYmVyKTogbnVtYmVyW10gPT4ge1xuICAnd29ya2xldCc7XG4gIHJldHVybiB4Lm1hcCgodikgPT4gTWF0aC5wb3codiAvIDI1NSwgZ2FtbWEpKTtcbn07XG5cbmNvbnN0IHRvR2FtbWFTcGFjZSA9ICh4OiBudW1iZXIsIGdhbW1hOiBudW1iZXIpOiBudW1iZXIgPT4ge1xuICAnd29ya2xldCc7XG4gIHJldHVybiBNYXRoLnJvdW5kKE1hdGgucG93KHgsIDEgLyBnYW1tYSkgKiAyNTUpO1xufTtcblxuY29uc3QgaW50ZXJwb2xhdGVDb2xvcnNSR0IgPSAoXG4gIHZhbHVlOiBudW1iZXIsXG4gIGlucHV0UmFuZ2U6IHJlYWRvbmx5IG51bWJlcltdLFxuICBjb2xvcnM6IEludGVycG9sYXRlUkdCLFxuICBvcHRpb25zOiBJbnRlcnBvbGF0aW9uT3B0aW9uc1xuKSA9PiB7XG4gICd3b3JrbGV0JztcbiAgY29uc3QgeyBnYW1tYSA9IDIuMiB9ID0gb3B0aW9ucztcbiAgbGV0IHsgcjogb3V0cHV0UiwgZzogb3V0cHV0RywgYjogb3V0cHV0QiB9ID0gY29sb3JzO1xuICBpZiAoZ2FtbWEgIT09IDEpIHtcbiAgICBvdXRwdXRSID0gdG9MaW5lYXJTcGFjZShvdXRwdXRSLCBnYW1tYSk7XG4gICAgb3V0cHV0RyA9IHRvTGluZWFyU3BhY2Uob3V0cHV0RywgZ2FtbWEpO1xuICAgIG91dHB1dEIgPSB0b0xpbmVhclNwYWNlKG91dHB1dEIsIGdhbW1hKTtcbiAgfVxuICBjb25zdCByID0gaW50ZXJwb2xhdGUodmFsdWUsIGlucHV0UmFuZ2UsIG91dHB1dFIsIEV4dHJhcG9sYXRlLkNMQU1QKTtcbiAgY29uc3QgZyA9IGludGVycG9sYXRlKHZhbHVlLCBpbnB1dFJhbmdlLCBvdXRwdXRHLCBFeHRyYXBvbGF0ZS5DTEFNUCk7XG4gIGNvbnN0IGIgPSBpbnRlcnBvbGF0ZSh2YWx1ZSwgaW5wdXRSYW5nZSwgb3V0cHV0QiwgRXh0cmFwb2xhdGUuQ0xBTVApO1xuICBjb25zdCBhID0gaW50ZXJwb2xhdGUodmFsdWUsIGlucHV0UmFuZ2UsIGNvbG9ycy5hLCBFeHRyYXBvbGF0ZS5DTEFNUCk7XG4gIGlmIChnYW1tYSA9PT0gMSkge1xuICAgIHJldHVybiByZ2JhQ29sb3IociwgZywgYiwgYSk7XG4gIH1cbiAgcmV0dXJuIHJnYmFDb2xvcihcbiAgICB0b0dhbW1hU3BhY2UociwgZ2FtbWEpLFxuICAgIHRvR2FtbWFTcGFjZShnLCBnYW1tYSksXG4gICAgdG9HYW1tYVNwYWNlKGIsIGdhbW1hKSxcbiAgICBhXG4gICk7XG59O1xuXG5pbnRlcmZhY2UgSW50ZXJwb2xhdGVSR0Ige1xuICByOiBudW1iZXJbXTtcbiAgZzogbnVtYmVyW107XG4gIGI6IG51bWJlcltdO1xuICBhOiBudW1iZXJbXTtcbn1cblxuY29uc3QgZ2V0SW50ZXJwb2xhdGVSR0IgPSAoXG4gIGNvbG9yczogcmVhZG9ubHkgKHN0cmluZyB8IG51bWJlcilbXVxuKTogSW50ZXJwb2xhdGVSR0IgPT4ge1xuICAnd29ya2xldCc7XG5cbiAgY29uc3QgciA9IFtdO1xuICBjb25zdCBnID0gW107XG4gIGNvbnN0IGIgPSBbXTtcbiAgY29uc3QgYSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbG9ycy5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGNvbG9yID0gY29sb3JzW2ldO1xuICAgIGNvbnN0IHByb2Nlc3NlZENvbG9yID0gcHJvY2Vzc0NvbG9yKGNvbG9yKTtcbiAgICAvLyBleHBsaWNpdCBjaGVjayBpbiBjYXNlIGlmIHByb2Nlc3NlZENvbG9yIGlzIDBcbiAgICBpZiAocHJvY2Vzc2VkQ29sb3IgIT09IG51bGwgJiYgcHJvY2Vzc2VkQ29sb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgci5wdXNoKHJlZChwcm9jZXNzZWRDb2xvcikpO1xuICAgICAgZy5wdXNoKGdyZWVuKHByb2Nlc3NlZENvbG9yKSk7XG4gICAgICBiLnB1c2goYmx1ZShwcm9jZXNzZWRDb2xvcikpO1xuICAgICAgYS5wdXNoKG9wYWNpdHkocHJvY2Vzc2VkQ29sb3IpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgciwgZywgYiwgYSB9O1xufTtcblxuaW50ZXJmYWNlIEludGVycG9sYXRlSFNWIHtcbiAgaDogbnVtYmVyW107XG4gIHM6IG51bWJlcltdO1xuICB2OiBudW1iZXJbXTtcbiAgYTogbnVtYmVyW107XG59XG5cbmNvbnN0IGdldEludGVycG9sYXRlSFNWID0gKFxuICBjb2xvcnM6IHJlYWRvbmx5IChzdHJpbmcgfCBudW1iZXIpW11cbik6IEludGVycG9sYXRlSFNWID0+IHtcbiAgJ3dvcmtsZXQnO1xuICBjb25zdCBoID0gW107XG4gIGNvbnN0IHMgPSBbXTtcbiAgY29uc3QgdiA9IFtdO1xuICBjb25zdCBhID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY29sb3JzLmxlbmd0aDsgKytpKSB7XG4gICAgY29uc3QgY29sb3IgPSBjb2xvcnNbaV07XG4gICAgY29uc3QgcHJvY2Vzc2VkQ29sb3IgPSBwcm9jZXNzQ29sb3IoY29sb3IpIGFzIGFueTtcbiAgICBpZiAodHlwZW9mIHByb2Nlc3NlZENvbG9yID09PSAnbnVtYmVyJykge1xuICAgICAgY29uc3QgcHJvY2Vzc2VkSFNWQ29sb3IgPSBSR0J0b0hTVihcbiAgICAgICAgcmVkKHByb2Nlc3NlZENvbG9yKSxcbiAgICAgICAgZ3JlZW4ocHJvY2Vzc2VkQ29sb3IpLFxuICAgICAgICBibHVlKHByb2Nlc3NlZENvbG9yKVxuICAgICAgKTtcblxuICAgICAgaC5wdXNoKHByb2Nlc3NlZEhTVkNvbG9yLmgpO1xuICAgICAgcy5wdXNoKHByb2Nlc3NlZEhTVkNvbG9yLnMpO1xuICAgICAgdi5wdXNoKHByb2Nlc3NlZEhTVkNvbG9yLnYpO1xuICAgICAgYS5wdXNoKG9wYWNpdHkocHJvY2Vzc2VkQ29sb3IpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgaCwgcywgdiwgYSB9O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGludGVycG9sYXRlQ29sb3IoXG4gIHZhbHVlOiBudW1iZXIsXG4gIGlucHV0UmFuZ2U6IHJlYWRvbmx5IG51bWJlcltdLFxuICBvdXRwdXRSYW5nZTogcmVhZG9ubHkgc3RyaW5nW10sXG4gIGNvbG9yU3BhY2U/OiAnUkdCJyB8ICdIU1YnLFxuICBvcHRpb25zPzogSW50ZXJwb2xhdGlvbk9wdGlvbnNcbik6IHN0cmluZztcblxuZXhwb3J0IGZ1bmN0aW9uIGludGVycG9sYXRlQ29sb3IoXG4gIHZhbHVlOiBudW1iZXIsXG4gIGlucHV0UmFuZ2U6IHJlYWRvbmx5IG51bWJlcltdLFxuICBvdXRwdXRSYW5nZTogcmVhZG9ubHkgbnVtYmVyW10sXG4gIGNvbG9yU3BhY2U/OiAnUkdCJyB8ICdIU1YnLFxuICBvcHRpb25zPzogSW50ZXJwb2xhdGlvbk9wdGlvbnNcbik6IG51bWJlcjtcblxuZXhwb3J0IGZ1bmN0aW9uIGludGVycG9sYXRlQ29sb3IoXG4gIHZhbHVlOiBudW1iZXIsXG4gIGlucHV0UmFuZ2U6IHJlYWRvbmx5IG51bWJlcltdLFxuICBvdXRwdXRSYW5nZTogcmVhZG9ubHkgKHN0cmluZyB8IG51bWJlcilbXSxcbiAgY29sb3JTcGFjZTogJ1JHQicgfCAnSFNWJyA9ICdSR0InLFxuICBvcHRpb25zOiBJbnRlcnBvbGF0aW9uT3B0aW9ucyA9IHt9XG4pOiBzdHJpbmcgfCBudW1iZXIge1xuICAnd29ya2xldCc7XG4gIGlmIChjb2xvclNwYWNlID09PSAnSFNWJykge1xuICAgIHJldHVybiBpbnRlcnBvbGF0ZUNvbG9yc0hTVihcbiAgICAgIHZhbHVlLFxuICAgICAgaW5wdXRSYW5nZSxcbiAgICAgIGdldEludGVycG9sYXRlSFNWKG91dHB1dFJhbmdlKSxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9IGVsc2UgaWYgKGNvbG9yU3BhY2UgPT09ICdSR0InKSB7XG4gICAgcmV0dXJuIGludGVycG9sYXRlQ29sb3JzUkdCKFxuICAgICAgdmFsdWUsXG4gICAgICBpbnB1dFJhbmdlLFxuICAgICAgZ2V0SW50ZXJwb2xhdGVSR0Iob3V0cHV0UmFuZ2UpLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIGBJbnZhbGlkIGNvbG9yIHNwYWNlIHByb3ZpZGVkOiAke2NvbG9yU3BhY2V9LiBTdXBwb3J0ZWQgdmFsdWVzIGFyZTogWydSR0InLCAnSFNWJ11gXG4gICk7XG59XG5cbmV4cG9ydCBlbnVtIENvbG9yU3BhY2Uge1xuICBSR0IgPSAwLFxuICBIU1YgPSAxLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIEludGVycG9sYXRlQ29uZmlnIHtcbiAgaW5wdXRSYW5nZTogcmVhZG9ubHkgbnVtYmVyW107XG4gIG91dHB1dFJhbmdlOiByZWFkb25seSAoc3RyaW5nIHwgbnVtYmVyKVtdO1xuICBjb2xvclNwYWNlOiBDb2xvclNwYWNlO1xuICBjYWNoZTogU2hhcmVkVmFsdWU8SW50ZXJwb2xhdGVSR0IgfCBJbnRlcnBvbGF0ZUhTViB8IG51bGw+O1xuICBvcHRpb25zOiBJbnRlcnBvbGF0aW9uT3B0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUludGVycG9sYXRlQ29uZmlnKFxuICBpbnB1dFJhbmdlOiByZWFkb25seSBudW1iZXJbXSxcbiAgb3V0cHV0UmFuZ2U6IHJlYWRvbmx5IChzdHJpbmcgfCBudW1iZXIpW10sXG4gIGNvbG9yU3BhY2UgPSBDb2xvclNwYWNlLlJHQixcbiAgb3B0aW9uczogSW50ZXJwb2xhdGlvbk9wdGlvbnMgPSB7fVxuKTogU2hhcmVkVmFsdWU8SW50ZXJwb2xhdGVDb25maWc+IHtcbiAgcmV0dXJuIHVzZVNoYXJlZFZhbHVlPEludGVycG9sYXRlQ29uZmlnPih7XG4gICAgaW5wdXRSYW5nZSxcbiAgICBvdXRwdXRSYW5nZSxcbiAgICBjb2xvclNwYWNlLFxuICAgIGNhY2hlOiBtYWtlTXV0YWJsZTxJbnRlcnBvbGF0ZVJHQiB8IEludGVycG9sYXRlSFNWIHwgbnVsbD4obnVsbCksXG4gICAgb3B0aW9ucyxcbiAgfSk7XG59XG5cbmV4cG9ydCBjb25zdCBpbnRlcnBvbGF0ZVNoYXJhYmxlQ29sb3IgPSAoXG4gIHZhbHVlOiBudW1iZXIsXG4gIGludGVycG9sYXRlQ29uZmlnOiBTaGFyZWRWYWx1ZTxJbnRlcnBvbGF0ZUNvbmZpZz5cbik6IHN0cmluZyB8IG51bWJlciA9PiB7XG4gICd3b3JrbGV0JztcbiAgbGV0IGNvbG9ycyA9IGludGVycG9sYXRlQ29uZmlnLnZhbHVlLmNhY2hlLnZhbHVlO1xuICBpZiAoaW50ZXJwb2xhdGVDb25maWcudmFsdWUuY29sb3JTcGFjZSA9PT0gQ29sb3JTcGFjZS5SR0IpIHtcbiAgICBpZiAoIWNvbG9ycykge1xuICAgICAgY29sb3JzID0gZ2V0SW50ZXJwb2xhdGVSR0IoaW50ZXJwb2xhdGVDb25maWcudmFsdWUub3V0cHV0UmFuZ2UpO1xuICAgICAgaW50ZXJwb2xhdGVDb25maWcudmFsdWUuY2FjaGUudmFsdWUgPSBjb2xvcnM7XG4gICAgfVxuICAgIHJldHVybiBpbnRlcnBvbGF0ZUNvbG9yc1JHQihcbiAgICAgIHZhbHVlLFxuICAgICAgaW50ZXJwb2xhdGVDb25maWcudmFsdWUuaW5wdXRSYW5nZSxcbiAgICAgIGNvbG9ycyBhcyBJbnRlcnBvbGF0ZVJHQixcbiAgICAgIGludGVycG9sYXRlQ29uZmlnLnZhbHVlLm9wdGlvbnNcbiAgICApO1xuICB9IGVsc2UgaWYgKGludGVycG9sYXRlQ29uZmlnLnZhbHVlLmNvbG9yU3BhY2UgPT09IENvbG9yU3BhY2UuSFNWKSB7XG4gICAgaWYgKCFjb2xvcnMpIHtcbiAgICAgIGNvbG9ycyA9IGdldEludGVycG9sYXRlSFNWKGludGVycG9sYXRlQ29uZmlnLnZhbHVlLm91dHB1dFJhbmdlKTtcbiAgICAgIGludGVycG9sYXRlQ29uZmlnLnZhbHVlLmNhY2hlLnZhbHVlID0gY29sb3JzO1xuICAgIH1cbiAgICByZXR1cm4gaW50ZXJwb2xhdGVDb2xvcnNIU1YoXG4gICAgICB2YWx1ZSxcbiAgICAgIGludGVycG9sYXRlQ29uZmlnLnZhbHVlLmlucHV0UmFuZ2UsXG4gICAgICBjb2xvcnMgYXMgSW50ZXJwb2xhdGVIU1YsXG4gICAgICBpbnRlcnBvbGF0ZUNvbmZpZy52YWx1ZS5vcHRpb25zXG4gICAgKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgYEludmFsaWQgY29sb3Igc3BhY2UgcHJvdmlkZWQ6ICR7aW50ZXJwb2xhdGVDb25maWcudmFsdWUuY29sb3JTcGFjZX0uIFN1cHBvcnRlZCB2YWx1ZXMgYXJlOiBbJ1JHQicsICdIU1YnXWBcbiAgKTtcbn07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFD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