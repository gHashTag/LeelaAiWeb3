f2cc40cb87b2dd1e252e4d8c98b5e64f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnimatedScrollView = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _createAnimatedComponent = _interopRequireDefault(require("../../createAnimatedComponent"));
var _hook = require("../hook");
var _excluded = ["scrollViewOffset"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var AnimatedScrollViewComponent = (0, _createAnimatedComponent.default)(_reactNative.ScrollView);
var AnimatedScrollView = (0, _react.forwardRef)(function (props, ref) {
  var scrollViewOffset = props.scrollViewOffset,
    restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var aref = ref === null ? (0, _hook.useAnimatedRef)() : ref;
  if (scrollViewOffset) {
    (0, _hook.useScrollViewOffset)(aref, scrollViewOffset);
  }
  if (!('scrollEventThrottle' in restProps)) {
    restProps.scrollEventThrottle = 1;
  }
  return _react.default.createElement(AnimatedScrollViewComponent, _extends({
    ref: aref
  }, restProps));
});
exports.AnimatedScrollView = AnimatedScrollView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX2hvb2siLCJfZXhjbHVkZWQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiQW5pbWF0ZWRTY3JvbGxWaWV3Q29tcG9uZW50IiwiY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQiLCJTY3JvbGxWaWV3IiwiQW5pbWF0ZWRTY3JvbGxWaWV3IiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwic2Nyb2xsVmlld09mZnNldCIsInJlc3RQcm9wcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczIiLCJhcmVmIiwidXNlQW5pbWF0ZWRSZWYiLCJ1c2VTY3JvbGxWaWV3T2Zmc2V0Iiwic2Nyb2xsRXZlbnRUaHJvdHRsZSIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsIl9leHRlbmRzIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIlNjcm9sbFZpZXcudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRm9yd2FyZGVkUmVmLCBSZWZPYmplY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50LCBmb3J3YXJkUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBTY3JvbGxWaWV3UHJvcHMgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgU2Nyb2xsVmlldyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQgZnJvbSAnLi4vLi4vY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQnO1xuaW1wb3J0IHR5cGUgeyBTaGFyZWRWYWx1ZSB9IGZyb20gJy4uL2NvbW1vblR5cGVzJztcbmltcG9ydCB0eXBlIHsgQW5pbWF0ZVByb3BzIH0gZnJvbSAnLi4vaGVscGVyVHlwZXMnO1xuaW1wb3J0IHsgdXNlQW5pbWF0ZWRSZWYsIHVzZVNjcm9sbFZpZXdPZmZzZXQgfSBmcm9tICcuLi9ob29rJztcblxuaW50ZXJmYWNlIEFuaW1hdGVkU2Nyb2xsVmlld1Byb3BzIGV4dGVuZHMgU2Nyb2xsVmlld1Byb3BzIHtcbiAgc2Nyb2xsVmlld09mZnNldD86IFNoYXJlZFZhbHVlPG51bWJlcj47XG59XG5cbi8vIFRPRE8gVFlQRVNDUklQVCBUaGlzIGlzIGEgdGVtcG9yYXJ5IHR5cGUgdG8gZ2V0IHJpZCBvZiAuZC50cyBmaWxlLlxuZGVjbGFyZSBjbGFzcyBBbmltYXRlZFNjcm9sbFZpZXdDbGFzcyBleHRlbmRzIENvbXBvbmVudDxcbiAgQW5pbWF0ZVByb3BzPEFuaW1hdGVkU2Nyb2xsVmlld1Byb3BzPlxuPiB7XG4gIGdldE5vZGUoKTogU2Nyb2xsVmlldztcbn1cbi8vIFRPRE8gVFlQRVNDUklQVCBUaGlzIGlzIGEgdGVtcG9yYXJ5IHR5cGUgdG8gZ2V0IHJpZCBvZiAuZC50cyBmaWxlLlxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1pbnRlcmZhY2VcbmludGVyZmFjZSBBbmltYXRlZFNjcm9sbFZpZXdJbnRlcmZhY2UgZXh0ZW5kcyBTY3JvbGxWaWV3IHtcbiAgZ2V0Tm9kZSgpOiBTY3JvbGxWaWV3O1xufVxuXG5jb25zdCBBbmltYXRlZFNjcm9sbFZpZXdDb21wb25lbnQgPSBjcmVhdGVBbmltYXRlZENvbXBvbmVudChcbiAgU2Nyb2xsVmlldyBhcyBhbnlcbikgYXMgYW55O1xuXG4vLyB0eXBlIEFuaW1hdGVkU2Nyb2xsVmlld0ZDID0gUmVhY3QuRkM8QW5pbWF0ZWRTY3JvbGxWaWV3UHJvcHM+O1xuXG5leHBvcnQgY29uc3QgQW5pbWF0ZWRTY3JvbGxWaWV3OiBBbmltYXRlZFNjcm9sbFZpZXcgPSBmb3J3YXJkUmVmKFxuICAocHJvcHM6IEFuaW1hdGVkU2Nyb2xsVmlld1Byb3BzLCByZWY6IEZvcndhcmRlZFJlZjxBbmltYXRlZFNjcm9sbFZpZXc+KSA9PiB7XG4gICAgY29uc3QgeyBzY3JvbGxWaWV3T2Zmc2V0LCAuLi5yZXN0UHJvcHMgfSA9IHByb3BzO1xuICAgIGNvbnN0IGFyZWYgPSByZWYgPT09IG51bGwgPyB1c2VBbmltYXRlZFJlZjxTY3JvbGxWaWV3PigpIDogcmVmO1xuXG4gICAgaWYgKHNjcm9sbFZpZXdPZmZzZXQpIHtcbiAgICAgIHVzZVNjcm9sbFZpZXdPZmZzZXQoXG4gICAgICAgIGFyZWYgYXMgUmVmT2JqZWN0PEFuaW1hdGVkU2Nyb2xsVmlldz4sXG4gICAgICAgIHNjcm9sbFZpZXdPZmZzZXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gU2V0IGRlZmF1bHQgc2Nyb2xsRXZlbnRUaHJvdHRsZSwgYmVjYXVzZSB1c2VyIGV4cGVjdHNcbiAgICAvLyB0byBoYXZlIGNvbnRpbnVvdXMgc2Nyb2xsIGV2ZW50cy5cbiAgICAvLyBXZSBzZXQgaXQgdG8gMSBzbyB3ZSBoYXZlIHBlYWNlIHVudGlsXG4gICAgLy8gdGhlcmUgYXJlIDk2MCBmcHMgc2NyZWVucy5cbiAgICBpZiAoISgnc2Nyb2xsRXZlbnRUaHJvdHRsZScgaW4gcmVzdFByb3BzKSkge1xuICAgICAgcmVzdFByb3BzLnNjcm9sbEV2ZW50VGhyb3R0bGUgPSAxO1xuICAgIH1cblxuICAgIHJldHVybiA8QW5pbWF0ZWRTY3JvbGxWaWV3Q29tcG9uZW50IHJlZj17YXJlZn0gey4uLnJlc3RQcm9wc30gLz47XG4gIH1cbikgYXMgdW5rbm93biBhcyBBbmltYXRlZFNjcm9sbFZpZXc7XG5cbmV4cG9ydCB0eXBlIEFuaW1hdGVkU2Nyb2xsVmlldyA9IHR5cGVvZiBBbmltYXRlZFNjcm9sbFZpZXdDbGFzcyAmXG4gIEFuaW1hdGVkU2Nyb2xsVmlld0ludGVyZmFjZTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsd0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUgsT0FBQTtBQUdBLElBQUFJLEtBQUEsR0FBQUosT0FBQTtBQUE2RCxJQUFBSyxTQUFBO0FBQUEsU0FBQUMseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxXQUFBLFdBQUFBLFdBQUEsR0FBQUcsZ0JBQUEsR0FBQUQsaUJBQUEsS0FBQUYsV0FBQTtBQUFBLFNBQUFSLHdCQUFBWSxHQUFBLEVBQUFKLFdBQUEsU0FBQUEsV0FBQSxJQUFBSSxHQUFBLElBQUFBLEdBQUEsQ0FBQUMsVUFBQSxXQUFBRCxHQUFBLFFBQUFBLEdBQUEsb0JBQUFBLEdBQUEsd0JBQUFBLEdBQUEsNEJBQUFFLE9BQUEsRUFBQUYsR0FBQSxVQUFBRyxLQUFBLEdBQUFSLHdCQUFBLENBQUFDLFdBQUEsT0FBQU8sS0FBQSxJQUFBQSxLQUFBLENBQUFDLEdBQUEsQ0FBQUosR0FBQSxZQUFBRyxLQUFBLENBQUFFLEdBQUEsQ0FBQUwsR0FBQSxTQUFBTSxNQUFBLFdBQUFDLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUMsY0FBQSxJQUFBRCxNQUFBLENBQUFFLHdCQUFBLFdBQUFDLEdBQUEsSUFBQVgsR0FBQSxRQUFBVyxHQUFBLGtCQUFBSCxNQUFBLENBQUFJLFNBQUEsQ0FBQUMsY0FBQSxDQUFBQyxJQUFBLENBQUFkLEdBQUEsRUFBQVcsR0FBQSxTQUFBSSxJQUFBLEdBQUFSLHFCQUFBLEdBQUFDLE1BQUEsQ0FBQUUsd0JBQUEsQ0FBQVYsR0FBQSxFQUFBVyxHQUFBLGNBQUFJLElBQUEsS0FBQUEsSUFBQSxDQUFBVixHQUFBLElBQUFVLElBQUEsQ0FBQUMsR0FBQSxLQUFBUixNQUFBLENBQUFDLGNBQUEsQ0FBQUgsTUFBQSxFQUFBSyxHQUFBLEVBQUFJLElBQUEsWUFBQVQsTUFBQSxDQUFBSyxHQUFBLElBQUFYLEdBQUEsQ0FBQVcsR0FBQSxTQUFBTCxNQUFBLENBQUFKLE9BQUEsR0FBQUYsR0FBQSxNQUFBRyxLQUFBLElBQUFBLEtBQUEsQ0FBQWEsR0FBQSxDQUFBaEIsR0FBQSxFQUFBTSxNQUFBLFlBQUFBLE1BQUE7Ozs7Ozs7Ozs7Ozs7OztBQWtCN0QsSUFBTVcsMkJBQTJCLEdBQUcsSUFBQUMsZ0NBQXVCLEVBQ3pEQyx1QkFBVSxDQUNKO0FBSUQsSUFBTUMsa0JBQXNDLEdBQUcsSUFBQUMsaUJBQVUsRUFDOUQsVUFBQ0MsS0FBOEIsRUFBRUMsR0FBcUMsRUFBSztFQUN6RSxJQUFRQyxnQkFBZ0IsR0FBbUJGLEtBQUssQ0FBeENFLGdCQUFnQjtJQUFLQyxTQUFBLE9BQUFDLHlCQUFBLENBQUF4QixPQUFBLEVBQWNvQixLQUFLLEVBQUE1QixTQUFBO0VBQ2hELElBQU1pQyxJQUFJLEdBQUdKLEdBQUcsS0FBSyxJQUFJLEdBQUcsSUFBQUssb0JBQWMsR0FBYyxHQUFHTCxHQUFHO0VBRTlELElBQUlDLGdCQUFnQixFQUFFO0lBQ3BCLElBQUFLLHlCQUFtQixFQUNqQkYsSUFBSSxFQUNKSCxnQkFBZ0IsQ0FDakI7RUFDSDtFQU1BLElBQUksRUFBRSxxQkFBcUIsSUFBSUMsU0FBUyxDQUFDLEVBQUU7SUFDekNBLFNBQVMsQ0FBQ0ssbUJBQW1CLEdBQUcsQ0FBQztFQUNuQztFQUVBLE9BQU9DLGNBQUEsQ0FBQUMsYUFBQSxDQUFDZiwyQkFBMkIsRUFBQWdCLFFBQUE7SUFBQ1YsR0FBRyxFQUFFSTtFQUFLLEdBQUtGLFNBQVMsRUFBSTtBQUNsRSxDQUFDLENBQytCO0FBQUFTLE9BQUEsQ0FBQWQsa0JBQUEsR0FBQUEsa0JBQUEifQ==