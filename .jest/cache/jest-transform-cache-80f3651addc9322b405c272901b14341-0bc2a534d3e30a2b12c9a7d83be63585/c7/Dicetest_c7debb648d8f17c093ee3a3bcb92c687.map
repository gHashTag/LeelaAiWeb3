{"version":3,"names":["react_1","__importDefault","require","react_native_1","_1","describe","mockProps","count","players","disabled","canGo","isReported","updateStep","jest","fn","random","it","_ref","render","_jsxRuntime","jsx","Dice","Object","assign","getByTestId","expect","toBeDefined"],"sources":["/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx"],"sourcesContent":["import React from 'react'\nimport {render, fireEvent} from '@testing-library/react-native'\nimport {Dice, DiceProps} from './' // Replace with the actual path to your Dice component\n\ndescribe('Dice Component', () => {\n  const mockProps: DiceProps = {\n    count: 3,\n    players: 4,\n    disabled: false,\n    canGo: true,\n    isReported: false,\n    updateStep: jest.fn(),\n    random: jest.fn(),\n  }\n\n  it('renders correctly with the provided props', () => {\n    const {getByTestId} = render(<Dice {...mockProps} />)\n    expect(getByTestId('dice-component')).toBeDefined()\n  })\n\n  //   it('calls the random function and updateStep on press when not disabled', () => {\n  //     const {getByTestId} = render(<Dice {...mockProps} />)\n  //     fireEvent.press(getByTestId('dice-component'))\n  //     expect(mockProps.random).toHaveBeenCalledTimes(1)\n  //     expect(mockProps.updateStep).toHaveBeenCalledTimes(1)\n  //   })\n\n  //   it('does not call the random function and updateStep on press when disabled', () => {\n  //     const {getByTestId} = render(<Dice {...mockProps} disabled={true} />)\n  //     fireEvent.press(getByTestId('dice-component'))\n  //     expect(mockProps.random).toHaveBeenCalledTimes(0)\n  //     expect(mockProps.updateStep).toHaveBeenCalledTimes(0)\n  //   })\n\n  //   it('does not call the random function and updateStep on press when canGo is false', () => {\n  //     const {getByTestId} = render(<Dice {...mockProps} canGo={false} />)\n  //     fireEvent.press(getByTestId('dice-component'))\n  //     expect(mockProps.random).toHaveBeenCalledTimes(0)\n  //     expect(mockProps.updateStep).toHaveBeenCalledTimes(0)\n  //   })\n\n  //   it('does not call the random function and updateStep on press when isReported is true', () => {\n  //     const {getByTestId} = render(<Dice {...mockProps} isReported={true} />)\n  //     fireEvent.press(getByTestId('dice-component'))\n  //     expect(mockProps.random).toHaveBeenCalledTimes(0)\n  //     expect(mockProps.updateStep).toHaveBeenCalledTimes(0)\n  //   })\n\n  // Add more tests based on your component's behavior and requirements\n})\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,eAAA,CAAAC,OAAA;AACA,IAAAC,cAAA,GAAAD,OAAA;AACA,IAAAE,EAAA,GAAAF,OAAA;AAEAG,QAAQ,CAAC,gBAAgB,EAAE,YAAK;EAC9B,IAAMC,SAAS,GAAc;IAC3BC,KAAK,EAAE,CAAC;IACRC,OAAO,EAAE,CAAC;IACVC,QAAQ,EAAE,KAAK;IACfC,KAAK,EAAE,IAAI;IACXC,UAAU,EAAE,KAAK;IACjBC,UAAU,EAAEC,IAAI,CAACC,EAAE,EAAE;IACrBC,MAAM,EAAEF,IAAI,CAACC,EAAE;GAChB;EAEDE,EAAE,CAAC,2CAA2C,EAAE,YAAK;IACnD,IAAAC,IAAA,GAAsB,IAAAd,cAAA,CAAAe,MAAM,EAAC,IAAAC,WAAA,CAAAC,GAAA,EAAChB,EAAA,CAAAiB,IAAI,EAAAC,MAAA,CAAAC,MAAA,KAAKjB,SAAS,CAAC,CAAG,CAAC;MAA9CkB,WAAW,GAAAP,IAAA,CAAXO,WAAW;IAClBC,MAAM,CAACD,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAACE,WAAW,EAAE;EACrD,CAAC,CAAC;AA+BJ,CAAC,CAAC"}