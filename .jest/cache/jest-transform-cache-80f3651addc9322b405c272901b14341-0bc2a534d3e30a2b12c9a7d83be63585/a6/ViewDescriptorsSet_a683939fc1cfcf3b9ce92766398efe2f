8f3eaacdf397ff9597965d1773a5f850
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeViewDescriptorsSet = makeViewDescriptorsSet;
exports.makeViewsRefSet = makeViewsRefSet;
var _react = require("react");
var _core = require("./core");
function makeViewDescriptorsSet() {
  var sharableViewDescriptors = (0, _core.makeMutable)([]);
  var data = {
    sharableViewDescriptors: sharableViewDescriptors,
    add: function add(item) {
      sharableViewDescriptors.modify(function (descriptors) {
        'worklet';

        var index = descriptors.findIndex(function (descriptor) {
          return descriptor.tag === item.tag;
        });
        if (index !== -1) {
          descriptors[index] = item;
        } else {
          descriptors.push(item);
        }
        return descriptors;
      });
    },
    remove: function remove(viewTag) {
      sharableViewDescriptors.modify(function (descriptors) {
        'worklet';

        var index = descriptors.findIndex(function (descriptor) {
          return descriptor.tag === viewTag;
        });
        if (index !== -1) {
          descriptors.splice(index, 1);
        }
        return descriptors;
      });
    }
  };
  return data;
}
function makeViewsRefSet() {
  var ref = (0, _react.useRef)(null);
  if (ref.current === null) {
    var data = {
      items: new Set(),
      add: function add(item) {
        if (data.items.has(item)) return;
        data.items.add(item);
      },
      remove: function remove(item) {
        data.items.delete(item);
      }
    };
    ref.current = data;
  }
  return ref.current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2NvcmUiLCJtYWtlVmlld0Rlc2NyaXB0b3JzU2V0Iiwic2hhcmFibGVWaWV3RGVzY3JpcHRvcnMiLCJtYWtlTXV0YWJsZSIsImRhdGEiLCJhZGQiLCJpdGVtIiwibW9kaWZ5IiwiZGVzY3JpcHRvcnMiLCJpbmRleCIsImZpbmRJbmRleCIsImRlc2NyaXB0b3IiLCJ0YWciLCJwdXNoIiwicmVtb3ZlIiwidmlld1RhZyIsInNwbGljZSIsIm1ha2VWaWV3c1JlZlNldCIsInJlZiIsInVzZVJlZiIsImN1cnJlbnQiLCJpdGVtcyIsIlNldCIsImhhcyIsImRlbGV0ZSJdLCJzb3VyY2VzIjpbIlZpZXdEZXNjcmlwdG9yc1NldC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBtYWtlTXV0YWJsZSB9IGZyb20gJy4vY29yZSc7XG5pbXBvcnQgdHlwZSB7IFNoYXJlZFZhbHVlIH0gZnJvbSAnLi9jb21tb25UeXBlcyc7XG5pbXBvcnQgdHlwZSB7IERlc2NyaXB0b3IgfSBmcm9tICcuL2hvb2svY29tbW9uVHlwZXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXdSZWZTZXQ8VD4ge1xuICBpdGVtczogU2V0PFQ+O1xuICBhZGQ6IChpdGVtOiBUKSA9PiB2b2lkO1xuICByZW1vdmU6IChpdGVtOiBUKSA9PiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXdEZXNjcmlwdG9yc1NldCB7XG4gIHNoYXJhYmxlVmlld0Rlc2NyaXB0b3JzOiBTaGFyZWRWYWx1ZTxEZXNjcmlwdG9yW10+O1xuICBhZGQ6IChpdGVtOiBEZXNjcmlwdG9yKSA9PiB2b2lkO1xuICByZW1vdmU6ICh2aWV3VGFnOiBudW1iZXIpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlVmlld0Rlc2NyaXB0b3JzU2V0KCk6IFZpZXdEZXNjcmlwdG9yc1NldCB7XG4gIGNvbnN0IHNoYXJhYmxlVmlld0Rlc2NyaXB0b3JzID0gbWFrZU11dGFibGU8RGVzY3JpcHRvcltdPihbXSk7XG4gIGNvbnN0IGRhdGE6IFZpZXdEZXNjcmlwdG9yc1NldCA9IHtcbiAgICBzaGFyYWJsZVZpZXdEZXNjcmlwdG9ycyxcbiAgICBhZGQ6IChpdGVtOiBEZXNjcmlwdG9yKSA9PiB7XG4gICAgICBzaGFyYWJsZVZpZXdEZXNjcmlwdG9ycy5tb2RpZnkoKGRlc2NyaXB0b3JzOiBEZXNjcmlwdG9yW10pID0+IHtcbiAgICAgICAgJ3dvcmtsZXQnO1xuICAgICAgICBjb25zdCBpbmRleCA9IGRlc2NyaXB0b3JzLmZpbmRJbmRleChcbiAgICAgICAgICAoZGVzY3JpcHRvcikgPT4gZGVzY3JpcHRvci50YWcgPT09IGl0ZW0udGFnXG4gICAgICAgICk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICBkZXNjcmlwdG9yc1tpbmRleF0gPSBpdGVtO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlc2NyaXB0b3JzLnB1c2goaXRlbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlc2NyaXB0b3JzO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIHJlbW92ZTogKHZpZXdUYWc6IG51bWJlcikgPT4ge1xuICAgICAgc2hhcmFibGVWaWV3RGVzY3JpcHRvcnMubW9kaWZ5KChkZXNjcmlwdG9yczogRGVzY3JpcHRvcltdKSA9PiB7XG4gICAgICAgICd3b3JrbGV0JztcbiAgICAgICAgY29uc3QgaW5kZXggPSBkZXNjcmlwdG9ycy5maW5kSW5kZXgoXG4gICAgICAgICAgKGRlc2NyaXB0b3IpID0+IGRlc2NyaXB0b3IudGFnID09PSB2aWV3VGFnXG4gICAgICAgICk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICBkZXNjcmlwdG9ycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXNjcmlwdG9ycztcbiAgICAgIH0pO1xuICAgIH0sXG4gIH07XG4gIHJldHVybiBkYXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVZpZXdzUmVmU2V0PFQ+KCk6IFZpZXdSZWZTZXQ8VD4ge1xuICBjb25zdCByZWYgPSB1c2VSZWY8Vmlld1JlZlNldDxUPiB8IG51bGw+KG51bGwpO1xuICBpZiAocmVmLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICBjb25zdCBkYXRhOiBWaWV3UmVmU2V0PFQ+ID0ge1xuICAgICAgaXRlbXM6IG5ldyBTZXQoKSxcblxuICAgICAgYWRkOiAoaXRlbTogVCkgPT4ge1xuICAgICAgICBpZiAoZGF0YS5pdGVtcy5oYXMoaXRlbSkpIHJldHVybjtcbiAgICAgICAgZGF0YS5pdGVtcy5hZGQoaXRlbSk7XG4gICAgICB9LFxuXG4gICAgICByZW1vdmU6IChpdGVtOiBUKSA9PiB7XG4gICAgICAgIGRhdGEuaXRlbXMuZGVsZXRlKGl0ZW0pO1xuICAgICAgfSxcbiAgICB9O1xuICAgIHJlZi5jdXJyZW50ID0gZGF0YTtcbiAgfVxuXG4gIHJldHVybiByZWYuY3VycmVudDtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxLQUFBLEdBQUFELE9BQUE7QUFnQk8sU0FBU0Usc0JBQXNCQSxDQUFBLEVBQXVCO0VBQzNELElBQU1DLHVCQUF1QixHQUFHLElBQUFDLGlCQUFXLEVBQWUsRUFBRSxDQUFDO0VBQzdELElBQU1DLElBQXdCLEdBQUc7SUFDL0JGLHVCQUF1QixFQUF2QkEsdUJBQXVCO0lBQ3ZCRyxHQUFHLEVBQUcsU0FBQUEsSUFBQUMsSUFBZ0IsRUFBSztNQUN6QkosdUJBQXVCLENBQUNLLE1BQU0sQ0FBRSxVQUFBQyxXQUF5QixFQUFLO1FBQzVELFNBQVM7O1FBQ1QsSUFBTUMsS0FBSyxHQUFHRCxXQUFXLENBQUNFLFNBQVMsQ0FDaEMsVUFBQUMsVUFBVTtVQUFBLE9BQUtBLFVBQVUsQ0FBQ0MsR0FBRyxLQUFLTixJQUFJLENBQUNNLEdBQUc7UUFBQSxFQUM1QztRQUNELElBQUlILEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtVQUNoQkQsV0FBVyxDQUFDQyxLQUFLLENBQUMsR0FBR0gsSUFBSTtRQUMzQixDQUFDLE1BQU07VUFDTEUsV0FBVyxDQUFDSyxJQUFJLENBQUNQLElBQUksQ0FBQztRQUN4QjtRQUNBLE9BQU9FLFdBQVc7TUFDcEIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVETSxNQUFNLEVBQUcsU0FBQUEsT0FBQUMsT0FBZSxFQUFLO01BQzNCYix1QkFBdUIsQ0FBQ0ssTUFBTSxDQUFFLFVBQUFDLFdBQXlCLEVBQUs7UUFDNUQsU0FBUzs7UUFDVCxJQUFNQyxLQUFLLEdBQUdELFdBQVcsQ0FBQ0UsU0FBUyxDQUNoQyxVQUFBQyxVQUFVO1VBQUEsT0FBS0EsVUFBVSxDQUFDQyxHQUFHLEtBQUtHLE9BQU87UUFBQSxFQUMzQztRQUNELElBQUlOLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtVQUNoQkQsV0FBVyxDQUFDUSxNQUFNLENBQUNQLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDOUI7UUFDQSxPQUFPRCxXQUFXO01BQ3BCLENBQUMsQ0FBQztJQUNKO0VBQ0YsQ0FBQztFQUNELE9BQU9KLElBQUk7QUFDYjtBQUVPLFNBQVNhLGVBQWVBLENBQUEsRUFBcUI7RUFDbEQsSUFBTUMsR0FBRyxHQUFHLElBQUFDLGFBQU0sRUFBdUIsSUFBSSxDQUFDO0VBQzlDLElBQUlELEdBQUcsQ0FBQ0UsT0FBTyxLQUFLLElBQUksRUFBRTtJQUN4QixJQUFNaEIsSUFBbUIsR0FBRztNQUMxQmlCLEtBQUssRUFBRSxJQUFJQyxHQUFHLEVBQUU7TUFFaEJqQixHQUFHLEVBQUcsU0FBQUEsSUFBQUMsSUFBTyxFQUFLO1FBQ2hCLElBQUlGLElBQUksQ0FBQ2lCLEtBQUssQ0FBQ0UsR0FBRyxDQUFDakIsSUFBSSxDQUFDLEVBQUU7UUFDMUJGLElBQUksQ0FBQ2lCLEtBQUssQ0FBQ2hCLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDO01BQ3RCLENBQUM7TUFFRFEsTUFBTSxFQUFHLFNBQUFBLE9BQUFSLElBQU8sRUFBSztRQUNuQkYsSUFBSSxDQUFDaUIsS0FBSyxDQUFDRyxNQUFNLENBQUNsQixJQUFJLENBQUM7TUFDekI7SUFDRixDQUFDO0lBQ0RZLEdBQUcsQ0FBQ0UsT0FBTyxHQUFHaEIsSUFBSTtFQUNwQjtFQUVBLE9BQU9jLEdBQUcsQ0FBQ0UsT0FBTztBQUNwQiJ9