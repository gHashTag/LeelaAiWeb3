{"version":3,"names":["isAffineMatrixFlat","x","Array","isArray","length","every","element","isNaN","isAffineMatrix","row","flatten","matrix","flat","unflatten","m","maybeFlattenMatrix","multiplyMatrices","a","b","subtractMatrices","maybeFlatA","maybeFlatB","isFlatOnStart","c","map","_","i","addMatrices","scaleMatrix","scalar","getRotationMatrix","angle","axis","arguments","undefined","cos","Math","sin","norm3d","y","z","sqrt","transposeMatrix","assertVectorsHaveEqualLengths","__DEV__","Error","innerProduct","reduce","acc","projection","u","s","e","subtractVectors","scaleVector","gramSchmidtAlgorithm","_matrix","_slicedToArray2","default","a0","a1","a2","a3","u0","u1","u2","u3","_map","_map2","e0","e1","e2","e3","rotationMatrix","skewMatrix","decomposeMatrix","unknownTypeMatrix","forEach","translationMatrix","sx","sy","sz","rotationAndSkewMatrix","_gramSchmidtAlgorithm","decomposeMatrixIntoMatricesAndAngles","_decomposeMatrix","sinRy","ry","asin","rx","rz","atan2"],"sources":["matrixUtils.tsx"],"sourcesContent":["type FixedLengthArray<\n  T,\n  L extends number,\n  PassedObject = [T, ...Array<T>]\n> = PassedObject & {\n  readonly length: L;\n  [I: number]: T;\n};\n\nexport type AffineMatrix = FixedLengthArray<FixedLengthArray<number, 4>, 4>;\n\nexport type AffineMatrixFlat = FixedLengthArray<number, 16>;\n\nexport type TransformMatrixDecomposition = Record<\n  'translationMatrix' | 'scaleMatrix' | 'rotationMatrix' | 'skewMatrix',\n  AffineMatrix\n>;\n\ntype Axis = 'x' | 'y' | 'z';\n\ninterface TansformMatrixDecompositionWithAngles\n  extends TransformMatrixDecomposition {\n  rx: number;\n  ry: number;\n  rz: number;\n}\n\nexport function isAffineMatrixFlat(x: unknown): x is AffineMatrixFlat {\n  'worklet';\n  return (\n    Array.isArray(x) &&\n    x.length === 16 &&\n    x.every((element) => typeof element === 'number' && !isNaN(element))\n  );\n}\n\nexport function isAffineMatrix(x: unknown): x is AffineMatrix {\n  'worklet';\n  return (\n    Array.isArray(x) &&\n    x.length === 4 &&\n    x.every(\n      (row) =>\n        Array.isArray(row) &&\n        row.length === 4 &&\n        row.every((element) => typeof element === 'number' && !isNaN(element))\n    )\n  );\n}\n\nexport function flatten(matrix: AffineMatrix): AffineMatrixFlat {\n  'worklet';\n  return matrix.flat() as AffineMatrixFlat;\n}\n\nexport function unflatten(m: AffineMatrixFlat): AffineMatrix {\n  'worklet';\n  return [\n    [m[0], m[1], m[2], m[3]],\n    [m[4], m[5], m[6], m[7]],\n    [m[8], m[9], m[10], m[11]],\n    [m[12], m[13], m[14], m[15]],\n  ] as AffineMatrix;\n}\n\nfunction maybeFlattenMatrix(\n  matrix: AffineMatrix | AffineMatrixFlat\n): AffineMatrixFlat {\n  'worklet';\n  return isAffineMatrix(matrix) ? flatten(matrix) : matrix;\n}\n\nexport function multiplyMatrices(\n  a: AffineMatrix,\n  b: AffineMatrix\n): AffineMatrix {\n  'worklet';\n  return [\n    [\n      a[0][0] * b[0][0] +\n        a[0][1] * b[1][0] +\n        a[0][2] * b[2][0] +\n        a[0][3] * b[3][0],\n\n      a[0][0] * b[0][1] +\n        a[0][1] * b[1][1] +\n        a[0][2] * b[2][1] +\n        a[0][3] * b[3][1],\n\n      a[0][0] * b[0][2] +\n        a[0][1] * b[1][2] +\n        a[0][2] * b[2][2] +\n        a[0][3] * b[3][2],\n\n      a[0][0] * b[0][3] +\n        a[0][1] * b[1][3] +\n        a[0][2] * b[2][3] +\n        a[0][3] * b[3][3],\n    ],\n    [\n      a[1][0] * b[0][0] +\n        a[1][1] * b[1][0] +\n        a[1][2] * b[2][0] +\n        a[1][3] * b[3][0],\n\n      a[1][0] * b[0][1] +\n        a[1][1] * b[1][1] +\n        a[1][2] * b[2][1] +\n        a[1][3] * b[3][1],\n\n      a[1][0] * b[0][2] +\n        a[1][1] * b[1][2] +\n        a[1][2] * b[2][2] +\n        a[1][3] * b[3][2],\n\n      a[1][0] * b[0][3] +\n        a[1][1] * b[1][3] +\n        a[1][2] * b[2][3] +\n        a[1][3] * b[3][3],\n    ],\n    [\n      a[2][0] * b[0][0] +\n        a[2][1] * b[1][0] +\n        a[2][2] * b[2][0] +\n        a[2][3] * b[3][0],\n\n      a[2][0] * b[0][1] +\n        a[2][1] * b[1][1] +\n        a[2][2] * b[2][1] +\n        a[2][3] * b[3][1],\n\n      a[2][0] * b[0][2] +\n        a[2][1] * b[1][2] +\n        a[2][2] * b[2][2] +\n        a[2][3] * b[3][2],\n\n      a[2][0] * b[0][3] +\n        a[2][1] * b[1][3] +\n        a[2][2] * b[2][3] +\n        a[2][3] * b[3][3],\n    ],\n    [\n      a[3][0] * b[0][0] +\n        a[3][1] * b[1][0] +\n        a[3][2] * b[2][0] +\n        a[3][3] * b[3][0],\n\n      a[3][0] * b[0][1] +\n        a[3][1] * b[1][1] +\n        a[3][2] * b[2][1] +\n        a[3][3] * b[3][1],\n\n      a[3][0] * b[0][2] +\n        a[3][1] * b[1][2] +\n        a[3][2] * b[2][2] +\n        a[3][3] * b[3][2],\n\n      a[3][0] * b[0][3] +\n        a[3][1] * b[1][3] +\n        a[3][2] * b[2][3] +\n        a[3][3] * b[3][3],\n    ],\n  ];\n}\n\nexport function subtractMatrices<T extends AffineMatrixFlat | AffineMatrix>(\n  maybeFlatA: T,\n  maybeFlatB: T\n): T {\n  'worklet';\n  const isFlatOnStart = isAffineMatrixFlat(maybeFlatA);\n  const a: AffineMatrixFlat = maybeFlattenMatrix(maybeFlatA);\n  const b: AffineMatrixFlat = maybeFlattenMatrix(maybeFlatB);\n\n  const c = a.map((_, i) => a[i] - b[i]) as AffineMatrixFlat;\n  return isFlatOnStart ? (c as T) : (unflatten(c) as T);\n}\n\nexport function addMatrices<T extends AffineMatrixFlat | AffineMatrix>(\n  maybeFlatA: T,\n  maybeFlatB: T\n): T {\n  'worklet';\n  const isFlatOnStart = isAffineMatrixFlat(maybeFlatA);\n  const a = maybeFlattenMatrix(maybeFlatA);\n  const b = maybeFlattenMatrix(maybeFlatB);\n\n  const c = a.map((_, i) => a[i] + b[i]) as AffineMatrixFlat;\n  return isFlatOnStart ? (c as T) : (unflatten(c) as T);\n}\n\nexport function scaleMatrix<T extends AffineMatrixFlat | AffineMatrix>(\n  maybeFlatA: T,\n  scalar: number\n): T {\n  'worklet';\n  const isFlatOnStart = isAffineMatrixFlat(maybeFlatA);\n  const a = maybeFlattenMatrix(maybeFlatA);\n\n  const b = a.map((x) => x * scalar) as AffineMatrixFlat;\n  return isFlatOnStart ? (b as T) : (unflatten(b) as T);\n}\n\nexport function getRotationMatrix(\n  angle: number,\n  axis: Axis = 'z'\n): AffineMatrix {\n  'worklet';\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  switch (axis) {\n    case 'z':\n      return [\n        [cos, sin, 0, 0],\n        [-sin, cos, 0, 0],\n        [0, 0, 1, 0],\n        [0, 0, 0, 1],\n      ];\n    case 'y':\n      return [\n        [cos, 0, -sin, 0],\n        [0, 1, 0, 0],\n        [sin, 0, cos, 0],\n        [0, 0, 0, 1],\n      ];\n    case 'x':\n      return [\n        [1, 0, 0, 0],\n        [0, cos, sin, 0],\n        [0, -sin, cos, 0],\n        [0, 0, 0, 1],\n      ];\n  }\n}\n\nfunction norm3d(x: number, y: number, z: number) {\n  'worklet';\n  return Math.sqrt(x * x + y * y + z * z);\n}\n\nfunction transposeMatrix(matrix: AffineMatrix): AffineMatrix {\n  'worklet';\n  const m = flatten(matrix);\n  return [\n    [m[0], m[4], m[8], m[12]],\n    [m[1], m[5], m[9], m[13]],\n    [m[2], m[6], m[10], m[14]],\n    [m[3], m[7], m[11], m[15]],\n  ];\n}\n\nfunction assertVectorsHaveEqualLengths(a: number[], b: number[]) {\n  'worklet';\n  if (__DEV__ && a.length !== b.length) {\n    throw new Error(\n      `Cannot calculate inner product of two vectors of different lengths. Length of ${a} is ${a.length} and length of ${b} is ${b.length}.`\n    );\n  }\n}\n\nfunction innerProduct(a: number[], b: number[]) {\n  'worklet';\n  assertVectorsHaveEqualLengths(a, b);\n  return a.reduce((acc, _, i) => acc + a[i] * b[i], 0);\n}\n\nfunction projection(u: number[], a: number[]) {\n  'worklet';\n  assertVectorsHaveEqualLengths(u, a);\n  const s = innerProduct(u, a) / innerProduct(u, u);\n  return u.map((e) => e * s);\n}\n\nfunction subtractVectors(a: number[], b: number[]) {\n  'worklet';\n  assertVectorsHaveEqualLengths(a, b);\n  return a.map((_, i) => a[i] - b[i]);\n}\n\nfunction scaleVector(u: number[], a: number) {\n  'worklet';\n  return u.map((e) => e * a);\n}\n\nfunction gramSchmidtAlgorithm(matrix: AffineMatrix): {\n  rotationMatrix: AffineMatrix;\n  skewMatrix: AffineMatrix;\n} {\n  // Gram-Schmidt orthogonalization decomposes any matrix with non-zero determinant into an orthogonal and a triangular matrix\n  // These matrices are equal to rotation and skew matrices respectively, because we apply it to transformation matrix\n  // That is expected to already have extracted the remaining transforms (scale & translation)\n  'worklet';\n  const [a0, a1, a2, a3] = matrix;\n\n  const u0 = a0;\n  const u1 = subtractVectors(a1, projection(u0, a1));\n  const u2 = subtractVectors(\n    subtractVectors(a2, projection(u0, a2)),\n    projection(u1, a2)\n  );\n  const u3 = subtractVectors(\n    subtractVectors(\n      subtractVectors(a3, projection(u0, a3)),\n      projection(u1, a3)\n    ),\n    projection(u2, a3)\n  );\n\n  const [e0, e1, e2, e3] = [u0, u1, u2, u3].map((u) =>\n    scaleVector(u, 1 / Math.sqrt(innerProduct(u, u)))\n  );\n\n  const rotationMatrix: AffineMatrix = [\n    [e0[0], e1[0], e2[0], e3[0]],\n    [e0[1], e1[1], e2[1], e3[1]],\n    [e0[2], e1[2], e2[2], e3[2]],\n    [e0[3], e1[3], e2[3], e3[3]],\n  ];\n\n  const skewMatrix: AffineMatrix = [\n    [\n      innerProduct(e0, a0),\n      innerProduct(e0, a1),\n      innerProduct(e0, a2),\n      innerProduct(e0, a3),\n    ],\n    [0, innerProduct(e1, a1), innerProduct(e1, a2), innerProduct(e1, a3)],\n    [0, 0, innerProduct(e2, a2), innerProduct(e2, a3)],\n    [0, 0, 0, innerProduct(e3, a3)],\n  ];\n  return {\n    rotationMatrix: transposeMatrix(rotationMatrix),\n    skewMatrix: transposeMatrix(skewMatrix),\n  };\n}\n\nexport function decomposeMatrix(\n  unknownTypeMatrix: AffineMatrixFlat | AffineMatrix\n): TransformMatrixDecomposition {\n  'worklet';\n  const matrix = maybeFlattenMatrix(unknownTypeMatrix);\n\n  // normalize matrix\n  if (matrix[15] === 0) {\n    throw new Error('Invalid transform matrix!');\n  }\n  matrix.forEach((_, i) => (matrix[i] /= matrix[15]));\n\n  const translationMatrix: AffineMatrix = [\n    [1, 0, 0, 0],\n    [0, 1, 0, 0],\n    [0, 0, 1, 0],\n    [matrix[12], matrix[13], matrix[14], 1],\n  ];\n  const sx = matrix[15] * norm3d(matrix[0], matrix[4], matrix[8]);\n  const sy = matrix[15] * norm3d(matrix[1], matrix[5], matrix[9]);\n  const sz = matrix[15] * norm3d(matrix[2], matrix[6], matrix[10]);\n\n  const scaleMatrix: AffineMatrix = [\n    [sx, 0, 0, 0],\n    [0, sy, 0, 0],\n    [0, 0, sz, 0],\n    [0, 0, 0, 1],\n  ];\n\n  const rotationAndSkewMatrix: AffineMatrix = [\n    [matrix[0] / sx, matrix[1] / sx, matrix[2] / sx, 0],\n    [matrix[4] / sy, matrix[5] / sy, matrix[6] / sy, 0],\n    [matrix[8] / sz, matrix[9] / sz, matrix[10] / sz, 0],\n    [0, 0, 0, 1],\n  ];\n\n  const { rotationMatrix, skewMatrix } = gramSchmidtAlgorithm(\n    rotationAndSkewMatrix\n  );\n\n  return {\n    translationMatrix,\n    scaleMatrix,\n    rotationMatrix,\n    skewMatrix,\n  };\n}\n\nexport function decomposeMatrixIntoMatricesAndAngles(\n  matrix: AffineMatrixFlat | AffineMatrix\n): TansformMatrixDecompositionWithAngles {\n  'worklet';\n  const { scaleMatrix, rotationMatrix, translationMatrix, skewMatrix } =\n    decomposeMatrix(matrix);\n\n  const sinRy = -rotationMatrix[0][2];\n\n  const ry = Math.asin(sinRy);\n  let rx;\n  let rz;\n  if (sinRy === 1 || sinRy === -1) {\n    rz = 0;\n    rx = Math.atan2(sinRy * rotationMatrix[0][1], sinRy * rotationMatrix[0][2]);\n  } else {\n    rz = Math.atan2(rotationMatrix[0][1], rotationMatrix[0][0]);\n    rx = Math.atan2(rotationMatrix[1][2], rotationMatrix[2][2]);\n  }\n\n  return {\n    scaleMatrix,\n    rotationMatrix,\n    translationMatrix,\n    skewMatrix,\n    rx: rx || 0,\n    ry: ry || 0,\n    rz: rz || 0,\n  };\n}\n"],"mappings":"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CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACpB,EACD,CACED,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACpB,EACD,CACED,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACpB,EACD,CACED,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAEnBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACfD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GACjBD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC,CA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"}