aa7c7efdac6b32d34d0613de28c0b67a
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('./Animated', function () {
  return Object.assign({}, jest.requireActual('./Animated'), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
describe('Dice Component', function () {
  var mockRandom = jest.fn();
  var mockUpdateStep = jest.fn();
  var mockProps = {
    count: 1,
    players: 2,
    disabled: false,
    canGo: true,
    isReported: false,
    updateStep: mockUpdateStep,
    random: mockRandom
  };
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('renders correctly with the provided props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('dice-component')).toBeDefined();
  });
  it('calls the random function and updateStep on press when not disabled', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref2.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.random).toHaveBeenCalledTimes(1);
    expect(mockProps.updateStep).toHaveBeenCalledTimes(1);
  });
  it('does not call the random function and updateStep on press when disabled', function () {
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps, {
        disabled: true
      }))),
      getByTestId = _ref3.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.random).not.toHaveBeenCalled();
    expect(mockProps.updateStep).not.toHaveBeenCalled();
  });
  it('does not call the random function and updateStep on press when canGo is false', function () {
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps, {
        canGo: false
      }))),
      getByTestId = _ref4.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.random).not.toHaveBeenCalled();
    expect(mockProps.updateStep).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX2pzeFJ1bnRpbWUiLCJyZXF1aXJlIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWFjdF9uYXRpdmVfMSIsIl8xIiwiZGVzY3JpYmUiLCJtb2NrUmFuZG9tIiwiZm4iLCJtb2NrVXBkYXRlU3RlcCIsIm1vY2tQcm9wcyIsImNvdW50IiwicGxheWVycyIsImRpc2FibGVkIiwiY2FuR28iLCJpc1JlcG9ydGVkIiwidXBkYXRlU3RlcCIsInJhbmRvbSIsImJlZm9yZUVhY2giLCJ1c2VGYWtlVGltZXJzIiwiYWZ0ZXJFYWNoIiwidXNlUmVhbFRpbWVycyIsIml0IiwiX3JlZiIsInJlbmRlciIsImpzeCIsIkRpY2UiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwiX3JlZjIiLCJhY3QiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInJ1bkFsbFRpbWVycyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIl9yZWYzIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZWY0Il0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9EaWNlL0RpY2UudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudCwgYWN0fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7RGljZX0gZnJvbSAnLi8nXG5cbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbmltYXRlZC9OYXRpdmVBbmltYXRlZEhlbHBlcicpXG5qZXN0Lm1vY2soJy4vQW5pbWF0ZWQnLCAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCcuL0FuaW1hdGVkJyksXG4gICAgY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQ6IChjb21wb25lbnQ6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIGNvbXBvbmVudFxuICAgIH0sXG4gIH1cbn0pXG5cbmRlc2NyaWJlKCdEaWNlIENvbXBvbmVudCcsICgpID0+IHtcbiAgY29uc3QgbW9ja1JhbmRvbSA9IGplc3QuZm4oKVxuICBjb25zdCBtb2NrVXBkYXRlU3RlcCA9IGplc3QuZm4oKVxuXG4gIC8vINCf0LXRgNC10LTQsNC50YLQtSDQvNC+0LrQuCDRh9C10YDQtdC3IG1vY2tQcm9wc1xuICBjb25zdCBtb2NrUHJvcHMgPSB7XG4gICAgY291bnQ6IDEsXG4gICAgcGxheWVyczogMixcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgY2FuR286IHRydWUsXG4gICAgaXNSZXBvcnRlZDogZmFsc2UsXG4gICAgdXBkYXRlU3RlcDogbW9ja1VwZGF0ZVN0ZXAsXG4gICAgcmFuZG9tOiBtb2NrUmFuZG9tLFxuICB9XG5cbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC51c2VGYWtlVGltZXJzKClcbiAgfSlcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QudXNlUmVhbFRpbWVycygpXG4gIH0pXG5cbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggdGhlIHByb3ZpZGVkIHByb3BzJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gLz4pXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKS50b0JlRGVmaW5lZCgpXG4gIH0pXG5cbiAgaXQoJ2NhbGxzIHRoZSByYW5kb20gZnVuY3Rpb24gYW5kIHVwZGF0ZVN0ZXAgb24gcHJlc3Mgd2hlbiBub3QgZGlzYWJsZWQnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSAvPilcblxuICAgIGFjdCgoKSA9PiB7XG4gICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpXG4gICAgICBqZXN0LnJ1bkFsbFRpbWVycygpIC8vINCU0LvRjyDQuNC80LjRgtCw0YbQuNC4INC30LDQstC10YDRiNC10L3QuNGPINCw0L3QuNC80LDRhtC40LhcbiAgICB9KVxuXG4gICAgZXhwZWN0KG1vY2tQcm9wcy5yYW5kb20pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICAgIGV4cGVjdChtb2NrUHJvcHMudXBkYXRlU3RlcCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gIH0pXG5cbiAgaXQoJ2RvZXMgbm90IGNhbGwgdGhlIHJhbmRvbSBmdW5jdGlvbiBhbmQgdXBkYXRlU3RlcCBvbiBwcmVzcyB3aGVuIGRpc2FibGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gZGlzYWJsZWQ9e3RydWV9IC8+KVxuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKCkgLy8g0JTQu9GPINC40LzQuNGC0LDRhtC40Lgg0LfQsNCy0LXRgNGI0LXQvdC40Y8g0LDQvdC40LzQsNGG0LjQuFxuICAgIH0pXG5cbiAgICBleHBlY3QobW9ja1Byb3BzLnJhbmRvbSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIGV4cGVjdChtb2NrUHJvcHMudXBkYXRlU3RlcCkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKVxuICB9KVxuXG4gIGl0KCdkb2VzIG5vdCBjYWxsIHRoZSByYW5kb20gZnVuY3Rpb24gYW5kIHVwZGF0ZVN0ZXAgb24gcHJlc3Mgd2hlbiBjYW5HbyBpcyBmYWxzZScsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IGNhbkdvPXtmYWxzZX0gLz4pXG5cbiAgICBhY3QoKCkgPT4ge1xuICAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuICAgICAgamVzdC5ydW5BbGxUaW1lcnMoKSAvLyDQlNC70Y8g0LjQvNC40YLQsNGG0LjQuCDQt9Cw0LLQtdGA0YjQtdC90LjRjyDQsNC90LjQvNCw0YbQuNC4XG4gICAgfSlcblxuICAgIGV4cGVjdChtb2NrUHJvcHMucmFuZG9tKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpXG4gICAgZXhwZWN0KG1vY2tQcm9wcy51cGRhdGVTdGVwKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpXG4gIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoiOztBQUlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxzREFBc0QsQ0FBQztBQUNqRUQsV0FBQSxHQUFLQyxJQUFJLENBQUMsWUFBWSxFQUFFLFlBQUs7RUFDM0IsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0tDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLFlBQVksQ0FBQztJQUNuQ0MsdUJBQXVCLEVBQUUsU0FBQUEsd0JBQUNDLFNBQWMsRUFBSTtNQUMxQyxPQUFPQSxTQUFTO0lBQ2xCO0VBQUM7QUFFTCxDQUFDLENBQUM7QUFBQSxJQUFBQyxXQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxLQUFBO0VBQUFDLFlBQUE7QUFBQSxTQUFBWCxZQUFBO0VBQUEsSUFBQVksUUFBQSxHQUFBSCxPQUFBO0lBQUFMLElBQUEsR0FBQVEsUUFBQSxDQUFBUixJQUFBO0VBQUFKLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFJLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTs7Ozs7Ozs7O0FBWkYsSUFBQVMsT0FBQSxHQUFBQyxlQUFBLENBQUFMLE9BQUE7QUFDQSxJQUFBTSxjQUFBLEdBQUFOLE9BQUE7QUFDQSxJQUFBTyxFQUFB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