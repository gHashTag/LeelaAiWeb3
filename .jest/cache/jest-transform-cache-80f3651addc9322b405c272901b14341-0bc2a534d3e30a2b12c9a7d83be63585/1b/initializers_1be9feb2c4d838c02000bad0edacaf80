488538a1ecf89796d4c0301f26da9c78
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initializeUIRuntime = initializeUIRuntime;
var _errors = require("./errors");
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _PlatformChecker = require("./PlatformChecker");
var _threads = require("./threads");
function callGuardDEV(fn) {
  'worklet';

  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  try {
    fn.apply(void 0, args);
  } catch (e) {
    if (global.__ErrorUtils) {
      global.__ErrorUtils.reportFatalError(e);
    } else {
      throw e;
    }
  }
}
function valueUnpacker(objectToUnpack, category) {
  'worklet';

  var workletsCache = global.__workletsCache;
  var handleCache = global.__handleCache;
  if (workletsCache === undefined) {
    workletsCache = global.__workletsCache = new Map();
    handleCache = global.__handleCache = new WeakMap();
  }
  var workletHash = objectToUnpack.__workletHash;
  if (workletHash !== undefined) {
    var workletFun = workletsCache.get(workletHash);
    if (workletFun === undefined) {
      var initData = objectToUnpack.__initData;
      if (global.evalWithSourceMap) {
        workletFun = global.evalWithSourceMap('(' + initData.code + '\n)', initData.location, initData.sourceMap);
      } else if (global.evalWithSourceUrl) {
        workletFun = global.evalWithSourceUrl('(' + initData.code + '\n)', `worklet_${workletHash}`);
      } else {
        workletFun = eval('(' + initData.code + '\n)');
      }
      workletsCache.set(workletHash, workletFun);
    }
    var functionInstance = workletFun.bind(objectToUnpack);
    objectToUnpack._recur = functionInstance;
    return functionInstance;
  } else if (objectToUnpack.__init) {
    var value = handleCache.get(objectToUnpack);
    if (value === undefined) {
      value = objectToUnpack.__init();
      handleCache.set(objectToUnpack, value);
    }
    return value;
  } else if (category === 'RemoteFunction') {
    var fun = function fun() {
      throw new Error(`Tried to synchronously call a non-worklet function on the UI thread.

Possible solutions are:
  a) If you want to synchronously execute this method, mark it as a worklet
  b) If you want to execute this function on the JS thread, wrap it using \`runOnJS\``);
    };
    fun.__remoteFunction = objectToUnpack;
    return fun;
  } else {
    throw new Error('data type not recognized by unpack method');
  }
}
function setupRequestAnimationFrame() {
  'worklet';
  var nativeRequestAnimationFrame = global.requestAnimationFrame;
  var animationFrameCallbacks = [];
  var lastNativeAnimationFrameTimestamp = -1;
  global.__flushAnimationFrame = function (frameTimestamp) {
    var currentCallbacks = animationFrameCallbacks;
    animationFrameCallbacks = [];
    currentCallbacks.forEach(function (f) {
      return f(frameTimestamp);
    });
    (0, _threads.callMicrotasks)();
  };
  global.requestAnimationFrame = function (callback) {
    animationFrameCallbacks.push(callback);
    if (animationFrameCallbacks.length === 1) {
      nativeRequestAnimationFrame(function (timestamp) {
        if (lastNativeAnimationFrameTimestamp >= timestamp) {
          return;
        }
        lastNativeAnimationFrameTimestamp = timestamp;
        global.__frameTimestamp = timestamp;
        global.__flushAnimationFrame(timestamp);
        global.__frameTimestamp = undefined;
      });
    }
    return -1;
  };
}
function initializeUIRuntime() {
  _NativeReanimated.default.installCoreFunctions(callGuardDEV, valueUnpacker);
  var IS_JEST = (0, _PlatformChecker.isJest)();
  var IS_CHROME_DEBUGGER = (0, _PlatformChecker.isChromeDebugger)();
  var IS_NATIVE = !(0, _PlatformChecker.shouldBeUseWeb)();
  if (IS_JEST) {
    global.requestAnimationFrame = function (callback) {
      return setTimeout(function () {
        return callback(performance.now());
      }, 0);
    };
  }
  var capturableConsole = Object.assign({}, console);
  (0, _threads.runOnUIImmediately)(function () {
    'worklet';
    global.__ErrorUtils = {
      reportFatalError: function reportFatalError(error) {
        (0, _threads.runOnJS)(_errors.reportFatalErrorOnJS)({
          message: error.message,
          stack: error.stack
        });
      }
    };
    if (!IS_CHROME_DEBUGGER) {
      global.console = {
        assert: (0, _threads.runOnJS)(capturableConsole.assert),
        debug: (0, _threads.runOnJS)(capturableConsole.debug),
        log: (0, _threads.runOnJS)(capturableConsole.log),
        warn: (0, _threads.runOnJS)(capturableConsole.warn),
        error: (0, _threads.runOnJS)(capturableConsole.error),
        info: (0, _threads.runOnJS)(capturableConsole.info)
      };
    }
    if (IS_NATIVE) {
      (0, _threads.setupMicrotasks)();
      setupRequestAnimationFrame();
    }
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,