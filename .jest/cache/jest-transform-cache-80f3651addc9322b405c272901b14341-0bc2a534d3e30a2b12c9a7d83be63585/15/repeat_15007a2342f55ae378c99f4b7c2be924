97ae9d3143ca743d9c8debef75fb2ccf
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withRepeat = void 0;
var _util = require("./util");
var withRepeat = function withRepeat(_nextAnimation) {
  'worklet';

  var numberOfReps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var reverse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var callback = arguments.length > 3 ? arguments[3] : undefined;
  return (0, _util.defineAnimation)(_nextAnimation, function () {
    'worklet';

    var nextAnimation = typeof _nextAnimation === 'function' ? _nextAnimation() : _nextAnimation;
    function repeat(animation, now) {
      var finished = nextAnimation.onFrame(nextAnimation, now);
      animation.current = nextAnimation.current;
      if (finished) {
        animation.reps += 1;
        if (nextAnimation.callback) {
          nextAnimation.callback(true, animation.current);
        }
        if (numberOfReps > 0 && animation.reps >= numberOfReps) {
          return true;
        }
        var startValue = reverse ? nextAnimation.current : animation.startValue;
        if (reverse) {
          nextAnimation.toValue = animation.startValue;
          animation.startValue = startValue;
        }
        nextAnimation.onStart(nextAnimation, startValue, now, nextAnimation.previousAnimation);
        return false;
      }
      return false;
    }
    var repCallback = function repCallback(finished) {
      if (callback) {
        callback(finished);
      }
      if (!finished && nextAnimation.callback) {
        nextAnimation.callback(false);
      }
    };
    function onStart(animation, value, now, previousAnimation) {
      animation.startValue = value;
      animation.reps = 0;
      nextAnimation.onStart(nextAnimation, value, now, previousAnimation);
    }
    return {
      isHigherOrder: true,
      onFrame: repeat,
      onStart: onStart,
      reps: 0,
      current: nextAnimation.current,
      callback: repCallback,
      startValue: 0
    };
  });
};
exports.withRepeat = withRepeat;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbCIsInJlcXVpcmUiLCJ3aXRoUmVwZWF0IiwiX25leHRBbmltYXRpb24iLCJudW1iZXJPZlJlcHMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJyZXZlcnNlIiwiY2FsbGJhY2siLCJkZWZpbmVBbmltYXRpb24iLCJuZXh0QW5pbWF0aW9uIiwicmVwZWF0IiwiYW5pbWF0aW9uIiwibm93IiwiZmluaXNoZWQiLCJvbkZyYW1lIiwiY3VycmVudCIsInJlcHMiLCJzdGFydFZhbHVlIiwidG9WYWx1ZSIsIm9uU3RhcnQiLCJwcmV2aW91c0FuaW1hdGlvbiIsInJlcENhbGxiYWNrIiwidmFsdWUiLCJpc0hpZ2hlck9yZGVyIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInJlcGVhdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZpbmVBbmltYXRpb24gfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHR5cGUge1xuICBBbmltYXRpb24sXG4gIEFuaW1hdGlvbkNhbGxiYWNrLFxuICBBbmltYXRhYmxlVmFsdWUsXG4gIFRpbWVzdGFtcCxcbiAgQW5pbWF0aW9uT2JqZWN0LFxufSBmcm9tICcuLi9jb21tb25UeXBlcyc7XG5pbXBvcnQgdHlwZSB7IFJlcGVhdEFuaW1hdGlvbiB9IGZyb20gJy4vY29tbW9uVHlwZXMnO1xuXG4vLyBUT0RPIFRZUEVTQ1JJUFQgVGhpcyBpcyBhIHRlbXBvcmFyeSB0eXBlIHRvIGdldCByaWQgb2YgLmQudHMgZmlsZS5cbnR5cGUgd2l0aFJlcGVhdFR5cGUgPSA8VCBleHRlbmRzIEFuaW1hdGFibGVWYWx1ZT4oXG4gIGFuaW1hdGlvbjogVCxcbiAgbnVtYmVyT2ZSZXBzPzogbnVtYmVyLFxuICByZXZlcnNlPzogYm9vbGVhbixcbiAgY2FsbGJhY2s/OiBBbmltYXRpb25DYWxsYmFja1xuKSA9PiBUO1xuXG5leHBvcnQgY29uc3Qgd2l0aFJlcGVhdCA9IGZ1bmN0aW9uIDxUIGV4dGVuZHMgQW5pbWF0aW9uT2JqZWN0PihcbiAgX25leHRBbmltYXRpb246IFQgfCAoKCkgPT4gVCksXG4gIG51bWJlck9mUmVwcyA9IDIsXG4gIHJldmVyc2UgPSBmYWxzZSxcbiAgY2FsbGJhY2s/OiBBbmltYXRpb25DYWxsYmFja1xuKTogQW5pbWF0aW9uPFJlcGVhdEFuaW1hdGlvbj4ge1xuICAnd29ya2xldCc7XG5cbiAgcmV0dXJuIGRlZmluZUFuaW1hdGlvbjxSZXBlYXRBbmltYXRpb24sIFQ+KFxuICAgIF9uZXh0QW5pbWF0aW9uLFxuICAgICgpOiBSZXBlYXRBbmltYXRpb24gPT4ge1xuICAgICAgJ3dvcmtsZXQnO1xuXG4gICAgICBjb25zdCBuZXh0QW5pbWF0aW9uID1cbiAgICAgICAgdHlwZW9mIF9uZXh0QW5pbWF0aW9uID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgPyBfbmV4dEFuaW1hdGlvbigpXG4gICAgICAgICAgOiBfbmV4dEFuaW1hdGlvbjtcblxuICAgICAgZnVuY3Rpb24gcmVwZWF0KGFuaW1hdGlvbjogUmVwZWF0QW5pbWF0aW9uLCBub3c6IFRpbWVzdGFtcCk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBmaW5pc2hlZCA9IG5leHRBbmltYXRpb24ub25GcmFtZShuZXh0QW5pbWF0aW9uLCBub3cpO1xuICAgICAgICBhbmltYXRpb24uY3VycmVudCA9IG5leHRBbmltYXRpb24uY3VycmVudDtcbiAgICAgICAgaWYgKGZpbmlzaGVkKSB7XG4gICAgICAgICAgYW5pbWF0aW9uLnJlcHMgKz0gMTtcbiAgICAgICAgICAvLyBjYWxsIGlubmVyIGFuaW1hdGlvbidzIGNhbGxiYWNrIG9uIGV2ZXJ5IHJlcGV0aXRpb25cbiAgICAgICAgICAvLyBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50IHRoZSBhbmltYXRpb24ncyBjdXJyZW50IHZhbHVlIGlzIHBhc3NlZFxuICAgICAgICAgIGlmIChuZXh0QW5pbWF0aW9uLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICBuZXh0QW5pbWF0aW9uLmNhbGxiYWNrKHRydWUgLyogZmluaXNoZWQgKi8sIGFuaW1hdGlvbi5jdXJyZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG51bWJlck9mUmVwcyA+IDAgJiYgYW5pbWF0aW9uLnJlcHMgPj0gbnVtYmVyT2ZSZXBzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBzdGFydFZhbHVlID0gcmV2ZXJzZVxuICAgICAgICAgICAgPyAobmV4dEFuaW1hdGlvbi5jdXJyZW50IGFzIG51bWJlcilcbiAgICAgICAgICAgIDogYW5pbWF0aW9uLnN0YXJ0VmFsdWU7XG4gICAgICAgICAgaWYgKHJldmVyc2UpIHtcbiAgICAgICAgICAgIG5leHRBbmltYXRpb24udG9WYWx1ZSA9IGFuaW1hdGlvbi5zdGFydFZhbHVlO1xuICAgICAgICAgICAgYW5pbWF0aW9uLnN0YXJ0VmFsdWUgPSBzdGFydFZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBuZXh0QW5pbWF0aW9uLm9uU3RhcnQoXG4gICAgICAgICAgICBuZXh0QW5pbWF0aW9uLFxuICAgICAgICAgICAgc3RhcnRWYWx1ZSxcbiAgICAgICAgICAgIG5vdyxcbiAgICAgICAgICAgIG5leHRBbmltYXRpb24ucHJldmlvdXNBbmltYXRpb24gYXMgUmVwZWF0QW5pbWF0aW9uXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByZXBDYWxsYmFjayA9IChmaW5pc2hlZD86IGJvb2xlYW4pOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgY2FsbGJhY2soZmluaXNoZWQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdoZW4gY2FuY2VsbGVkIGNhbGwgaW5uZXIgYW5pbWF0aW9uJ3MgY2FsbGJhY2tcbiAgICAgICAgaWYgKCFmaW5pc2hlZCAmJiBuZXh0QW5pbWF0aW9uLmNhbGxiYWNrKSB7XG4gICAgICAgICAgbmV4dEFuaW1hdGlvbi5jYWxsYmFjayhmYWxzZSAvKiBmaW5pc2hlZCAqLyk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIG9uU3RhcnQoXG4gICAgICAgIGFuaW1hdGlvbjogUmVwZWF0QW5pbWF0aW9uLFxuICAgICAgICB2YWx1ZTogQW5pbWF0YWJsZVZhbHVlLFxuICAgICAgICBub3c6IFRpbWVzdGFtcCxcbiAgICAgICAgcHJldmlvdXNBbmltYXRpb246IEFuaW1hdGlvbjxhbnk+IHwgbnVsbFxuICAgICAgKTogdm9pZCB7XG4gICAgICAgIGFuaW1hdGlvbi5zdGFydFZhbHVlID0gdmFsdWU7XG4gICAgICAgIGFuaW1hdGlvbi5yZXBzID0gMDtcbiAgICAgICAgbmV4dEFuaW1hdGlvbi5vblN0YXJ0KG5leHRBbmltYXRpb24sIHZhbHVlLCBub3csIHByZXZpb3VzQW5pbWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNIaWdoZXJPcmRlcjogdHJ1ZSxcbiAgICAgICAgb25GcmFtZTogcmVwZWF0LFxuICAgICAgICBvblN0YXJ0LFxuICAgICAgICByZXBzOiAwLFxuICAgICAgICBjdXJyZW50OiBuZXh0QW5pbWF0aW9uLmN1cnJlbnQsXG4gICAgICAgIGNhbGxiYWNrOiByZXBDYWxsYmFjayxcbiAgICAgICAgc3RhcnRWYWx1ZTogMCxcbiAgICAgIH07XG4gICAgfVxuICApO1xufSBhcyB3aXRoUmVwZWF0VHlwZTtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsT0FBQTtBQWtCTyxJQUFNQyxVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FDckJDLGNBQTZCLEVBSUQ7RUFDNUIsU0FBUzs7RUFBQyxJQUpWQyxZQUFZLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxRQUFBRCxTQUFBLFFBQUFFLFNBQUEsR0FBQUYsU0FBQSxNQUFHLENBQUM7RUFBQSxJQUNoQkcsT0FB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