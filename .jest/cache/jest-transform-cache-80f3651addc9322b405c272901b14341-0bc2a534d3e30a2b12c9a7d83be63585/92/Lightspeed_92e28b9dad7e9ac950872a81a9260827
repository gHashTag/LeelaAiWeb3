09d1b2921d496268e07ca35873b25d72
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LightSpeedOutRight = exports.LightSpeedOutLeft = exports.LightSpeedInRight = exports.LightSpeedInLeft = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _animation = require("../../animation");
var _animationBuilder = require("../animationBuilder");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var LightSpeedInRight = function (_ComplexAnimationBuil) {
  (0, _inherits2.default)(LightSpeedInRight, _ComplexAnimationBuil);
  var _super = _createSuper(LightSpeedInRight);
  function LightSpeedInRight() {
    var _this;
    (0, _classCallCheck2.default)(this, LightSpeedInRight);
    _this = _super.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "build", function () {
      var delayFunction = _this.getDelayFunction();
      var _this$getAnimationAnd = _this.getAnimationAndConfig(),
        _this$getAnimationAnd2 = (0, _slicedToArray2.default)(_this$getAnimationAnd, 2),
        animation = _this$getAnimationAnd2[0],
        config = _this$getAnimationAnd2[1];
      var delay = _this.getDelay();
      var duration = _this.getDuration();
      var callback = _this.callbackV;
      var initialValues = _this.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, (0, _animation.withTiming)(1, {
              duration: duration
            })),
            transform: [{
              translateX: delayFunction(delay, animation(0, Object.assign({}, config, {
                duration: duration * 0.7
              })))
            }, {
              skewX: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)('10deg', {
                duration: duration * 0.7
              }), (0, _animation.withTiming)('-5deg', {
                duration: duration * 0.15
              }), (0, _animation.withTiming)('0deg', {
                duration: duration * 0.15
              })))
            }]
          },
          initialValues: Object.assign({
            opacity: 0,
            transform: [{
              translateX: values.windowWidth
            }, {
              skewX: '-45deg'
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this;
  }
  (0, _createClass2.default)(LightSpeedInRight, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new LightSpeedInRight();
    }
  }]);
  return LightSpeedInRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.LightSpeedInRight = LightSpeedInRight;
var LightSpeedInLeft = function (_ComplexAnimationBuil2) {
  (0, _inherits2.default)(LightSpeedInLeft, _ComplexAnimationBuil2);
  var _super2 = _createSuper(LightSpeedInLeft);
  function LightSpeedInLeft() {
    var _this2;
    (0, _classCallCheck2.default)(this, LightSpeedInLeft);
    _this2 = _super2.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this2), "build", function () {
      var delayFunction = _this2.getDelayFunction();
      var _this2$getAnimationAn = _this2.getAnimationAndConfig(),
        _this2$getAnimationAn2 = (0, _slicedToArray2.default)(_this2$getAnimationAn, 2),
        animation = _this2$getAnimationAn2[0],
        config = _this2$getAnimationAn2[1];
      var delay = _this2.getDelay();
      var duration = _this2.getDuration();
      var callback = _this2.callbackV;
      var initialValues = _this2.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, (0, _animation.withTiming)(1, {
              duration: duration
            })),
            transform: [{
              translateX: delayFunction(delay, animation(0, Object.assign({}, config, {
                duration: duration * 0.7
              })))
            }, {
              skewX: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)('-10deg', {
                duration: duration * 0.7
              }), (0, _animation.withTiming)('5deg', {
                duration: duration * 0.15
              }), (0, _animation.withTiming)('0deg', {
                duration: duration * 0.15
              })))
            }]
          },
          initialValues: Object.assign({
            opacity: 0,
            transform: [{
              translateX: -values.windowWidth
            }, {
              skewX: '45deg'
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this2;
  }
  (0, _createClass2.default)(LightSpeedInLeft, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new LightSpeedInLeft();
    }
  }]);
  return LightSpeedInLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.LightSpeedInLeft = LightSpeedInLeft;
var LightSpeedOutRight = function (_ComplexAnimationBuil3) {
  (0, _inherits2.default)(LightSpeedOutRight, _ComplexAnimationBuil3);
  var _super3 = _createSuper(LightSpeedOutRight);
  function LightSpeedOutRight() {
    var _this3;
    (0, _classCallCheck2.default)(this, LightSpeedOutRight);
    _this3 = _super3.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this3), "build", function () {
      var delayFunction = _this3.getDelayFunction();
      var _this3$getAnimationAn = _this3.getAnimationAndConfig(),
        _this3$getAnimationAn2 = (0, _slicedToArray2.default)(_this3$getAnimationAn, 2),
        animation = _this3$getAnimationAn2[0],
        config = _this3$getAnimationAn2[1];
      var delay = _this3.getDelay();
      var callback = _this3.callbackV;
      var initialValues = _this3.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, animation(0, config)),
            transform: [{
              translateX: delayFunction(delay, animation(values.windowWidth, config))
            }, {
              skewX: delayFunction(delay, animation('-45deg', config))
            }]
          },
          initialValues: Object.assign({
            opacity: 1,
            transform: [{
              translateX: 0
            }, {
              skewX: '0deg'
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this3;
  }
  (0, _createClass2.default)(LightSpeedOutRight, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new LightSpeedOutRight();
    }
  }]);
  return LightSpeedOutRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.LightSpeedOutRight = LightSpeedOutRight;
var LightSpeedOutLeft = function (_ComplexAnimationBuil4) {
  (0, _inherits2.default)(LightSpeedOutLeft, _ComplexAnimationBuil4);
  var _super4 = _createSuper(LightSpeedOutLeft);
  function LightSpeedOutLeft() {
    var _this4;
    (0, _classCallCheck2.default)(this, LightSpeedOutLeft);
    _this4 = _super4.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this4), "build", function () {
      var delayFunction = _this4.getDelayFunction();
      var _this4$getAnimationAn = _this4.getAnimationAndConfig(),
        _this4$getAnimationAn2 = (0, _slicedToArray2.default)(_this4$getAnimationAn, 2),
        animation = _this4$getAnimationAn2[0],
        config = _this4$getAnimationAn2[1];
      var delay = _this4.getDelay();
      var callback = _this4.callbackV;
      var initialValues = _this4.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, animation(0, config)),
            transform: [{
              translateX: delayFunction(delay, animation(-values.windowWidth, config))
            }, {
              skewX: delayFunction(delay, animation('45deg', config))
            }]
          },
          initialValues: Object.assign({
            opacity: 1,
            transform: [{
              translateX: 0
            }, {
              skewX: '0deg'
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this4;
  }
  (0, _createClass2.default)(LightSpeedOutLeft, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new LightSpeedOutLeft();
    }
  }]);
  return LightSpeedOutLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.LightSpeedOutLeft = LightSpeedOutLeft;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,