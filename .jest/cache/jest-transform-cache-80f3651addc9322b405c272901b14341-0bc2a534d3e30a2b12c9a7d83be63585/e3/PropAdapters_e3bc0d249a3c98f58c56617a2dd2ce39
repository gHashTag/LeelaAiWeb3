683f602d251166ef65eb27f5d67e3cb8
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAnimatedPropAdapter = exports.TextInputAdapter = exports.SVGAdapter = void 0;
var _ConfigHelper = require("../ConfigHelper");
var createAnimatedPropAdapter = function createAnimatedPropAdapter(adapter, nativeProps) {
  var nativePropsToAdd = {};
  nativeProps === null || nativeProps === void 0 ? void 0 : nativeProps.forEach(function (prop) {
    nativePropsToAdd[prop] = true;
  });
  (0, _ConfigHelper.addWhitelistedNativeProps)(nativePropsToAdd);
  return adapter;
};
exports.createAnimatedPropAdapter = createAnimatedPropAdapter;
var SVGAdapter = createAnimatedPropAdapter(function (props) {
  'worklet';

  var keys = Object.keys(props);
  if (keys.includes('transform')) {
    if (Array.isArray(props.transform)) {
      var _props$x, _props$y;
      if (props.transform.length !== 6) {
        throw new Error(`invalid transform length of ${props.transform.length}, should be 6`);
      }
      var transform = props.transform;
      var x = (_props$x = props.x) != null ? _props$x : 0;
      var y = (_props$y = props.y) != null ? _props$y : 0;
      props.transform = [{
        translateX: transform[0] * x + transform[2] * y + transform[4]
      }, {
        translateY: transform[1] * x + transform[3] * y + transform[5]
      }];
    } else if (typeof props.transform === 'string') {
      var _transform = props.transform;
      var arr = _transform.replace('translate(', '').replace(')', '').split(' ');
      props.transform = [{
        translateX: parseFloat(arr[0])
      }, {
        translateY: parseFloat(arr[1])
      }];
    }
  }
});
exports.SVGAdapter = SVGAdapter;
var TextInputAdapter = createAnimatedPropAdapter(function (props) {
  'worklet';

  var keys = Object.keys(props);
  if (keys.includes('value')) {
    props.text = props.value;
    delete props.value;
  }
}, ['text']);
exports.TextInputAdapter = TextInputAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfQ29uZmlnSGVscGVyIiwicmVxdWlyZSIsImNyZWF0ZUFuaW1hdGVkUHJvcEFkYXB0ZXIiLCJhZGFwdGVyIiwibmF0aXZlUHJvcHMiLCJuYXRpdmVQcm9wc1RvQWRkIiwiZm9yRWFjaCIsInByb3AiLCJhZGRXaGl0ZWxpc3RlZE5hdGl2ZVByb3BzIiwiZXhwb3J0cyIsIlNWR0FkYXB0ZXIiLCJwcm9wcyIsImtleXMiLCJPYmplY3QiLCJpbmNsdWRlcyIsIkFycmF5IiwiaXNBcnJheSIsInRyYW5zZm9ybSIsIl9wcm9wcyR4IiwiX3Byb3BzJHkiLCJsZW5ndGgiLCJFcnJvciIsIngiLCJ5IiwidHJhbnNsYXRlWCIsInRyYW5zbGF0ZVkiLCJhcnIiLCJyZXBsYWNlIiwic3BsaXQiLCJwYXJzZUZsb2F0IiwiVGV4dElucHV0QWRhcHRlciIsInRleHQiLCJ2YWx1ZSJdLCJzb3VyY2VzIjpbIlByb3BBZGFwdGVycy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhZGRXaGl0ZWxpc3RlZE5hdGl2ZVByb3BzIH0gZnJvbSAnLi4vQ29uZmlnSGVscGVyJztcbmltcG9ydCB0eXBlIHsgQWRhcHRlcldvcmtsZXRGdW5jdGlvbiB9IGZyb20gJy4vY29tbW9uVHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBBbmltYXRlZFByb3BzQWRhcHRlckZ1bmN0aW9uIH0gZnJvbSAnLi9oZWxwZXJUeXBlcyc7XG5cbi8vIFRPRE8gVFlQRVNDUklQVCBUaGlzIGlzIGEgdGVtcG9yYXJ5IHR5cGUgdG8gZ2V0IHJpZCBvZiAuZC50cyBmaWxlLlxuZXhwb3J0IHR5cGUgY3JlYXRlQW5pbWF0ZWRQcm9wQWRhcHRlclR5cGUgPSAoXG4gIGFkYXB0ZXI6IEFuaW1hdGVkUHJvcHNBZGFwdGVyRnVuY3Rpb24sXG4gIG5hdGl2ZVByb3BzPzogc3RyaW5nW11cbikgPT4gQW5pbWF0ZWRQcm9wc0FkYXB0ZXJGdW5jdGlvbjtcblxuZXhwb3J0IGNvbnN0IGNyZWF0ZUFuaW1hdGVkUHJvcEFkYXB0ZXIgPSAoKFxuICBhZGFwdGVyOiBBZGFwdGVyV29ya2xldEZ1bmN0aW9uLFxuICBuYXRpdmVQcm9wcz86IHN0cmluZ1tdXG4pOiBBZGFwdGVyV29ya2xldEZ1bmN0aW9uID0+IHtcbiAgY29uc3QgbmF0aXZlUHJvcHNUb0FkZDogeyBba2V5OiBzdHJpbmddOiBib29sZWFuIH0gPSB7fTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xuICBuYXRpdmVQcm9wcz8uZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgIG5hdGl2ZVByb3BzVG9BZGRbcHJvcF0gPSB0cnVlO1xuICB9KTtcbiAgYWRkV2hpdGVsaXN0ZWROYXRpdmVQcm9wcyhuYXRpdmVQcm9wc1RvQWRkKTtcbiAgcmV0dXJuIGFkYXB0ZXI7XG59KSBhcyBjcmVhdGVBbmltYXRlZFByb3BBZGFwdGVyVHlwZTtcblxuLy8gQURBUFRFUlNcblxuZXhwb3J0IGNvbnN0IFNWR0FkYXB0ZXI6IEFkYXB0ZXJXb3JrbGV0RnVuY3Rpb24gPSBjcmVhdGVBbmltYXRlZFByb3BBZGFwdGVyKFxuICAocHJvcHMpID0+IHtcbiAgICAnd29ya2xldCc7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKTtcbiAgICAvLyB0cmFuc2Zvcm1cbiAgICBpZiAoa2V5cy5pbmNsdWRlcygndHJhbnNmb3JtJykpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BzLnRyYW5zZm9ybSkpIHtcbiAgICAgICAgLy8gY2FzZSBvZiBhcnJheSB3aXRoIDYgdmFsdWVzID0+IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtc3ZnL3JlYWN0LW5hdGl2ZS1zdmcvYmxvYi9iMmUyYzM1NTIwNGZmNGIxMDk3M2QzYWZjZTE0OTVmN2U0MTY3ZmY3L3NyYy9lbGVtZW50cy9TaGFwZS50c3gjTDIwMFxuICAgICAgICBpZiAocHJvcHMudHJhbnNmb3JtLmxlbmd0aCAhPT0gNikge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBpbnZhbGlkIHRyYW5zZm9ybSBsZW5ndGggb2YgJHtwcm9wcy50cmFuc2Zvcm0ubGVuZ3RofSwgc2hvdWxkIGJlIDZgXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0cmFuc2Zvcm06IG51bWJlcltdID0gcHJvcHMudHJhbnNmb3JtIGFzIG51bWJlcltdO1xuICAgICAgICBjb25zdCB4OiBudW1iZXIgPSAocHJvcHMueCBhcyBudW1iZXIpID8/IDA7XG4gICAgICAgIGNvbnN0IHk6IG51bWJlciA9IChwcm9wcy55IGFzIG51bWJlcikgPz8gMDtcbiAgICAgICAgcHJvcHMudHJhbnNmb3JtID0gW1xuICAgICAgICAgIHsgdHJhbnNsYXRlWDogdHJhbnNmb3JtWzBdICogeCArIHRyYW5zZm9ybVsyXSAqIHkgKyB0cmFuc2Zvcm1bNF0gfSxcbiAgICAgICAgICB7IHRyYW5zbGF0ZVk6IHRyYW5zZm9ybVsxXSAqIHggKyB0cmFuc2Zvcm1bM10gKiB5ICsgdHJhbnNmb3JtWzVdIH0sXG4gICAgICAgIF07XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9wcy50cmFuc2Zvcm0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIGNhc2Ugb2Ygc3RyaW5nICd0cmFuc2xhdGUodHJhbnNsYXRlWCB0cmFuc2xhdGVZKSdcbiAgICAgICAgLy8gdG9kbzogaGFuZGxlIG90aGVyIGNhc2VzIG9mIHRyYW5zZm9ybSBzdHJpbmcgbGlrZSBoZXJlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXRpdmUtc3ZnL3JlYWN0LW5hdGl2ZS1zdmcvYmxvYi9iMmUyYzM1NTIwNGZmNGIxMDk3M2QzYWZjZTE0OTVmN2U0MTY3ZmY3L3NyYy9saWIvZXh0cmFjdC9leHRyYWN0VHJhbnNmb3JtLnRzI0wxODRcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtOiBzdHJpbmcgPSBwcm9wcy50cmFuc2Zvcm0gYXMgc3RyaW5nO1xuICAgICAgICBjb25zdCBhcnIgPSB0cmFuc2Zvcm1cbiAgICAgICAgICAucmVwbGFjZSgndHJhbnNsYXRlKCcsICcnKVxuICAgICAgICAgIC5yZXBsYWNlKCcpJywgJycpXG4gICAgICAgICAgLnNwbGl0KCcgJyk7XG4gICAgICAgIHByb3BzLnRyYW5zZm9ybSA9IFtcbiAgICAgICAgICB7IHRyYW5zbGF0ZVg6IHBhcnNlRmxvYXQoYXJyWzBdKSB9LFxuICAgICAgICAgIHsgdHJhbnNsYXRlWTogcGFyc2VGbG9hdChhcnJbMV0pIH0sXG4gICAgICAgIF07XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHRvZG86IG90aGVyIHByb3BzXG4gIH1cbik7XG5cbmV4cG9ydCBjb25zdCBUZXh0SW5wdXRBZGFwdGVyID0gY3JlYXRlQW5pbWF0ZWRQcm9wQWRhcHRlcihcbiAgKHByb3BzKSA9PiB7XG4gICAgJ3dvcmtsZXQnO1xuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwcm9wcyk7XG4gICAgLy8gY29udmVydCB0ZXh0IHRvIHZhbHVlIGxpa2UgUk4gZG9lcyBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL2Jsb2IvZjJjNjI3OWNhNDk3YjM0ZDVhMmJmYmI2ZjJkMzNkYzdhN2JlYTAyYS9MaWJyYXJpZXMvQ29tcG9uZW50cy9UZXh0SW5wdXQvVGV4dElucHV0LmpzI0w4NzhcbiAgICBpZiAoa2V5cy5pbmNsdWRlcygndmFsdWUnKSkge1xuICAgICAgcHJvcHMudGV4dCA9IHByb3BzLnZhbHVlO1xuICAgICAgZGVsZXRlIHByb3BzLnZhbHVlO1xuICAgIH1cbiAgfSxcbiAgWyd0ZXh0J11cbik7XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxJQUFBQSxhQUFBLEdBQUFDLE9BQUE7QUFVTyxJQUFNQyx5QkFBeUIsR0FBSSxTQUE3QkEseUJBQXlCQSxDQUNwQ0MsT0FBK0IsRUFDL0JDLFdBQXNCLEVBQ0s7RUFDM0IsSUFBTUMsZ0JBQTRDLEdBQUcsQ0FBQyxDQUFDO0VBRXZERCxXQUFXLGFBQVhBLFdBQVcsdUJB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