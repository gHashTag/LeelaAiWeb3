3eeb803968ba80dbfc6d967e1adc024f
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withDelay = void 0;
var _util = require("./util");
var withDelay = function withDelay(delayMs, _nextAnimation) {
  'worklet';

  return (0, _util.defineAnimation)(_nextAnimation, function () {
    'worklet';

    var nextAnimation = typeof _nextAnimation === 'function' ? _nextAnimation() : _nextAnimation;
    function delay(animation, now) {
      var startTime = animation.startTime,
        started = animation.started,
        previousAnimation = animation.previousAnimation;
      var current = animation.current;
      if (now - startTime > delayMs) {
        if (!started) {
          nextAnimation.onStart(nextAnimation, current, now, previousAnimation);
          animation.previousAnimation = null;
          animation.started = true;
        }
        var finished = nextAnimation.onFrame(nextAnimation, now);
        animation.current = nextAnimation.current;
        return finished;
      } else if (previousAnimation) {
        var _finished = previousAnimation.finished || previousAnimation.onFrame(previousAnimation, now);
        animation.current = previousAnimation.current;
        if (_finished) {
          animation.previousAnimation = null;
        }
      }
      return false;
    }
    function onStart(animation, value, now, previousAnimation) {
      animation.startTime = now;
      animation.started = false;
      animation.current = value;
      if (previousAnimation === animation) {
        animation.previousAnimation = previousAnimation.previousAnimation;
      } else {
        animation.previousAnimation = previousAnimation;
      }
    }
    var callback = function callback(finished) {
      if (nextAnimation.callback) {
        nextAnimation.callback(finished);
      }
    };
    return {
      isHigherOrder: true,
      onFrame: delay,
      onStart: onStart,
      current: nextAnimation.current,
      callback: callback,
      previousAnimation: null,
      startTime: 0,
      started: false
    };
  });
};
exports.withDelay = withDelay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbCIsInJlcXVpcmUiLCJ3aXRoRGVsYXkiLCJkZWxheU1zIiwiX25leHRBbmltYXRpb24iLCJkZWZpbmVBbmltYXRpb24iLCJuZXh0QW5pbWF0aW9uIiwiZGVsYXkiLCJhbmltYXRpb24iLCJub3ciLCJzdGFydFRpbWUiLCJzdGFydGVkIiwicHJldmlvdXNBbmltYXRpb24iLCJjdXJyZW50Iiwib25TdGFydCIsImZpbmlzaGVkIiwib25GcmFtZSIsInZhbHVlIiwiY2FsbGJhY2siLCJpc0hpZ2hlck9yZGVyIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImRlbGF5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZUFuaW1hdGlvbiB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgdHlwZSB7XG4gIEFuaW1hdGlvbixcbiAgVGltZXN0YW1wLFxuICBBbmltYXRhYmxlVmFsdWUsXG4gIEFuaW1hdGlvbk9iamVjdCxcbn0gZnJvbSAnLi4vY29tbW9uVHlwZXMnO1xuaW1wb3J0IHR5cGUgeyBEZWxheUFuaW1hdGlvbiB9IGZyb20gJy4vY29tbW9uVHlwZXMnO1xuXG4vLyBUT0RPIFRZUEVTQ1JJUFQgVGhpcyBpcyBhIHRlbXBvcmFyeSB0eXBlIHRvIGdldCByaWQgb2YgLmQudHMgZmlsZS5cbnR5cGUgd2l0aERlbGF5VHlwZSA9IDxUIGV4dGVuZHMgQW5pbWF0YWJsZVZhbHVlPihcbiAgZGVsYXlNczogbnVtYmVyLFxuICBkZWxheWVkQW5pbWF0aW9uOiBUXG4pID0+IFQ7XG5cbmV4cG9ydCBjb25zdCB3aXRoRGVsYXkgPSBmdW5jdGlvbiA8VCBleHRlbmRzIEFuaW1hdGlvbk9iamVjdD4oXG4gIGRlbGF5TXM6IG51bWJlcixcbiAgX25leHRBbmltYXRpb246IFQgfCAoKCkgPT4gVClcbik6IEFuaW1hdGlvbjxEZWxheUFuaW1hdGlvbj4ge1xuICAnd29ya2xldCc7XG4gIHJldHVybiBkZWZpbmVBbmltYXRpb248RGVsYXlBbmltYXRpb24sIFQ+KFxuICAgIF9uZXh0QW5pbWF0aW9uLFxuICAgICgpOiBEZWxheUFuaW1hdGlvbiA9PiB7XG4gICAgICAnd29ya2xldCc7XG4gICAgICBjb25zdCBuZXh0QW5pbWF0aW9uID1cbiAgICAgICAgdHlwZW9mIF9uZXh0QW5pbWF0aW9uID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgPyBfbmV4dEFuaW1hdGlvbigpXG4gICAgICAgICAgOiBfbmV4dEFuaW1hdGlvbjtcblxuICAgICAgZnVuY3Rpb24gZGVsYXkoYW5pbWF0aW9uOiBEZWxheUFuaW1hdGlvbiwgbm93OiBUaW1lc3RhbXApOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgeyBzdGFydFRpbWUsIHN0YXJ0ZWQsIHByZXZpb3VzQW5pbWF0aW9uIH0gPSBhbmltYXRpb247XG4gICAgICAgIGNvbnN0IGN1cnJlbnQ6IEFuaW1hdGFibGVWYWx1ZSA9IGFuaW1hdGlvbi5jdXJyZW50O1xuXG4gICAgICAgIGlmIChub3cgLSBzdGFydFRpbWUgPiBkZWxheU1zKSB7XG4gICAgICAgICAgaWYgKCFzdGFydGVkKSB7XG4gICAgICAgICAgICBuZXh0QW5pbWF0aW9uLm9uU3RhcnQoXG4gICAgICAgICAgICAgIG5leHRBbmltYXRpb24sXG4gICAgICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgICAgIG5vdyxcbiAgICAgICAgICAgICAgcHJldmlvdXNBbmltYXRpb24hXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYW5pbWF0aW9uLnByZXZpb3VzQW5pbWF0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5zdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZmluaXNoZWQgPSBuZXh0QW5pbWF0aW9uLm9uRnJhbWUobmV4dEFuaW1hdGlvbiwgbm93KTtcbiAgICAgICAgICBhbmltYXRpb24uY3VycmVudCA9IG5leHRBbmltYXRpb24uY3VycmVudCE7XG4gICAgICAgICAgcmV0dXJuIGZpbmlzaGVkO1xuICAgICAgICB9IGVsc2UgaWYgKHByZXZpb3VzQW5pbWF0aW9uKSB7XG4gICAgICAgICAgY29uc3QgZmluaXNoZWQgPVxuICAgICAgICAgICAgcHJldmlvdXNBbmltYXRpb24uZmluaXNoZWQgfHxcbiAgICAgICAgICAgIHByZXZpb3VzQW5pbWF0aW9uLm9uRnJhbWUocHJldmlvdXNBbmltYXRpb24sIG5vdyk7XG4gICAgICAgICAgYW5pbWF0aW9uLmN1cnJlbnQgPSBwcmV2aW91c0FuaW1hdGlvbi5jdXJyZW50O1xuICAgICAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICAgICAgYW5pbWF0aW9uLnByZXZpb3VzQW5pbWF0aW9uID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvblN0YXJ0KFxuICAgICAgICBhbmltYXRpb246IEFuaW1hdGlvbjxhbnk+LFxuICAgICAgICB2YWx1ZTogQW5pbWF0YWJsZVZhbHVlLFxuICAgICAgICBub3c6IFRpbWVzdGFtcCxcbiAgICAgICAgcHJldmlvdXNBbmltYXRpb246IEFuaW1hdGlvbjxhbnk+IHwgbnVsbFxuICAgICAgKTogdm9pZCB7XG4gICAgICAgIGFuaW1hdGlvbi5zdGFydFRpbWUgPSBub3c7XG4gICAgICAgIGFuaW1hdGlvbi5zdGFydGVkID0gZmFsc2U7XG4gICAgICAgIGFuaW1hdGlvbi5jdXJyZW50ID0gdmFsdWU7XG4gICAgICAgIGlmIChwcmV2aW91c0FuaW1hdGlvbiA9PT0gYW5pbWF0aW9uKSB7XG4gICAgICAgICAgYW5pbWF0aW9uLnByZXZpb3VzQW5pbWF0aW9uID0gcHJldmlvdXNBbmltYXRpb24ucHJldmlvdXNBbmltYXRpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYW5pbWF0aW9uLnByZXZpb3VzQW5pbWF0aW9uID0gcHJldmlvdXNBbmltYXRpb247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgY2FsbGJhY2sgPSAoZmluaXNoZWQ/OiBib29sZWFuKTogdm9pZCA9PiB7XG4gICAgICAgIGlmIChuZXh0QW5pbWF0aW9uLmNhbGxiYWNrKSB7XG4gICAgICAgICAgbmV4dEFuaW1hdGlvbi5jYWxsYmFjayhmaW5pc2hlZCk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlzSGlnaGVyT3JkZXI6IHRydWUsXG4gICAgICAgIG9uRnJhbWU6IGRlbGF5LFxuICAgICAgICBvblN0YXJ0LFxuICAgICAgICBjdXJyZW50OiBuZXh0QW5pbWF0aW9uLmN1cnJlbnQhLFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgICAgcHJldmlvdXNBbmltYXRpb246IG51bGwsXG4gICAgICAgIHN0YXJ0VGltZTogMCxcbiAgICAgICAgc3RhcnRlZDogZmFsc2UsXG4gICAgICB9O1xuICAgIH1cbiAgKTtcbn0gYXMgd2l0aERlbGF5VHlwZTtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLElBQUFBLEtBQUEsR0FBQUMsT0FBQTtBQWVPLElBQU1DLFNBQVMsR0FBRyxTQUFaQSxTQUFTQSxDQUNwQkMsT0FBZSxFQUNmQyxjQUE2QixFQUNGO0VBQzNCLFNBQVM7O0VBQ1QsT0FBTyxJQUFBQyxxQkFBZSxFQUNwQkQsY0FBYyxFQUNkLFlBQXNCO0lBQ3BCLFNBQVM7O0lBQ1QsSUFBTUUsYUFBYSxHQUNqQixPQUFPRixjQUFjLEtBQUssVUFBVSxHQUNoQ0EsY0FBYyxFQUFFLEdBQ2hCQSxjQUFjO0lBRXBCLFNBQVNHLEtBQUtBLENBQUNDLFNBQXlCLEVBQUVDLEdBQWMsRUFBVztNQUNqRSxJQUFRQyxTQUFTLEdBQWlDRixTQUFTLENBQW5ERSxTQUFTO1FBQUVDLE9BQU8sR0FBd0JILFNBQVMsQ0FBeENHLE9BQU87UUFBRUMsaUJBQUEsR0FBc0JKLFNBQVMsQ0FBL0JJLGlCQUFBO01BQzVCLElBQU1DLE9BQXdCLEdBQUdMLFNBQVMsQ0FBQ0ssT0FBTztNQUVsRCxJQUFJSixHQUFHLEdBQUdDLFNBQVMsR0FBR1AsT0FBTyxFQUFFO1FBQzdCLElBQUksQ0FBQ1EsT0FBTyxFQUFFO1VBQ1pMLGFBQWEsQ0FBQ1EsT0FBTyxDQUNuQlIsYUFBYSxFQUNiTyxPQUFPLEVBQ1BKLEdBQUcsRUFDSEcsaUJBQWlCLENBQ2xCO1VBQ0RKLFNBQVMsQ0FBQ0ksaUJBQWlCLEdBQUcsSUFBSTtVQUNsQ0osU0FBUyxDQUFDRyxPQUFPLEdBQUcsSUFBSTtRQUMxQjtRQUNBLElBQU1JLFFBQVEsR0FBR1QsYUFBYSxDQUFDVSxPQUFPLENBQUNWLGFBQWEsRUFBRUcsR0FBRyxDQUFDO1FBQzFERCxTQUFTLENBQUNLLE9BQU8sR0FBR1AsYUFBYSxDQUFDTyxPQUFRO1FBQzFDLE9BQU9FLFFBQVE7TUFDakIsQ0FBQyxNQUFNLElBQUlILGlCQUFpQixFQUFFO1FBQzVCLElBQU1HLFNBQVEsR0FDWkgsaUJBQWlCLENBQUNHLFFBQVEsSUFDMUJILGlCQUFpQixDQUFDSSxPQUFPLENBQUNKLGlCQUFpQixFQUFFSCxHQUFHLENBQUM7UUFDbkRELFNBQVMsQ0FBQ0ssT0FBTyxHQUFHRCxpQkFBaUIsQ0FBQ0MsT0FBTztRQUM3QyxJQUFJRSxTQUFRLEVBQUU7VUFDWlAsU0FBUyxDQUFDSSxpQkFBaUIsR0FBRyxJQUFJO1FBQ3BDO01BQ0Y7TUFDQSxPQUFPLEtBQUs7SUFDZDtJQUVBLFNBQVNFLE9BQU9BLENBQ2ROLFNBQXlCLEVBQ3pCUyxLQUFzQixFQUN0QlIsR0FBYyxFQUNkRyxpQkFBd0MsRUFDbEM7TUFDTkosU0FBUyxDQUFDRSxTQUFTLEdBQUdELEdBQUc7TUFDekJELFNBQVMsQ0FBQ0csT0FBTyxHQUFHLEtBQUs7TUFDekJILFNBQVMsQ0FBQ0ssT0FBTyxHQUFHSSxLQUFLO01BQ3pCLElBQUlMLGlCQUFpQixLQUFLSixTQUFTLEVBQUU7UUFDbkNBLFNBQVMsQ0FBQ0ksaUJBQWlCLEdBQUdBLGlCQUFpQixDQUFDQSxpQkFBaUI7TUFDbkUsQ0FBQyxNQUFNO1FBQ0xKLFNBQVMsQ0FBQ0ksaUJBQWlCLEdBQUdBLGlCQUFpQjtNQUNqRDtJQUNGO0lBRUEsSUFBTU0sUUFBUSxHQUFJLFNBQVpBLFFBQVFBLENBQUlILFFBQWtCLEVBQVc7TUFDN0MsSUFBSVQsYUFBYSxDQUFDWSxRQUFRLEVBQUU7UUFDMUJaLGFBQWEsQ0FBQ1ksUUFBUSxDQUFDSCxRQUFRLENBQUM7TUFDbEM7SUFDRixDQUFDO0lBRUQsT0FBTztNQUNMSSxhQUFhLEVBQUUsSUFBSTtNQUNuQkgsT0FBTyxFQUFFVCxLQUFLO01BQ2RPLE9BQU8sRUFBUEEsT0FBTztNQUNQRCxPQUFPLEVBQUVQLGFBQWEsQ0FBQ08sT0FBUTtNQUMvQkssUUFBUSxFQUFSQSxRQUFRO01BQ1JOLGlCQUFpQixFQUFFLElBQUk7TUFDdkJGLFNBQVMsRUFBRSxDQUFDO01BQ1pDLE9BQU8sRUFBRTtJQUNYLENBQUM7RUFDSCxDQUFDLENBQ0Y7QUFDSCxDQUFrQjtBQUFBUyxPQUFBLENBQUFsQixTQUFBLEdBQUFBLFNBQUEifQ==