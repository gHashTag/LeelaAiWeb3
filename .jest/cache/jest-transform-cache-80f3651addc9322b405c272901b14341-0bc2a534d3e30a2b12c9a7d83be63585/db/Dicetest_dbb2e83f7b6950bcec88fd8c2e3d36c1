65275d52682015c397eb75c04ef1ecbc
"use strict";

_getJestObj().mock('./Animated', function () {
  var _require = require('react-native'),
    View = _require.View;
  return Object.assign({}, jest.requireActual('./Animated'), {
    createAnimatedComponent: function createAnimatedComponent() {
      return function (props) {
        return (0, _jsxRuntime.jsx)(View, Object.assign({}, props, {
          children: props.children
        }));
      };
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
describe('Dice Component', function () {
  var mockProps = {
    count: 3,
    players: 4,
    disabled: false,
    canGo: true,
    isReported: false,
    updateStep: jest.fn(),
    random: jest.fn()
  };
  it('renders correctly with the provided props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('dice-component')).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJWaWV3IiwiT2JqZWN0IiwiYXNzaWduIiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJjcmVhdGVBbmltYXRlZENvbXBvbmVudCIsInByb3BzIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJjaGlsZHJlbiIsIl90aGlzIiwiX2pzeEZpbGVOYW1lIiwiX3JlcXVpcmUyIiwicmVhY3RfMSIsIl9faW1wb3J0RGVmYXVsdCIsInJlYWN0X25hdGl2ZV8xIiwiXzEiLCJkZXNjcmliZSIsIm1vY2tQcm9wcyIsImNvdW50IiwicGxheWVycyIsImRpc2FibGVkIiwiY2FuR28iLCJpc1JlcG9ydGVkIiwidXBkYXRlU3RlcCIsImZuIiwicmFuZG9tIiwiaXQiLCJfcmVmIiwicmVuZGVyIiwiRGljZSIsImdldEJ5VGVzdElkIiwiZXhwZWN0IiwidG9CZURlZmluZWQiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL0RpY2UvRGljZS50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQge3JlbmRlciwgZmlyZUV2ZW50fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7RGljZSwgRGljZVByb3BzfSBmcm9tICcuLycgLy8gUmVwbGFjZSB3aXRoIHRoZSBhY3R1YWwgcGF0aCB0byB5b3VyIERpY2UgY29tcG9uZW50XG5cbmplc3QubW9jaygnLi9BbmltYXRlZCcsICgpID0+IHtcbiAgY29uc3Qge1ZpZXd9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJylcbiAgcmV0dXJuIHtcbiAgICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJy4vQW5pbWF0ZWQnKSxcbiAgICBjcmVhdGVBbmltYXRlZENvbXBvbmVudDogKCkgPT4ge1xuICAgICAgcmV0dXJuIChwcm9wczogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiA8VmlldyB7Li4ucHJvcHN9Pntwcm9wcy5jaGlsZHJlbn08L1ZpZXc+XG4gICAgICB9XG4gICAgfSxcbiAgfVxufSlcblxuZGVzY3JpYmUoJ0RpY2UgQ29tcG9uZW50JywgKCkgPT4ge1xuICBjb25zdCBtb2NrUHJvcHM6IERpY2VQcm9wcyA9IHtcbiAgICBjb3VudDogMyxcbiAgICBwbGF5ZXJzOiA0LFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBjYW5HbzogdHJ1ZSxcbiAgICBpc1JlcG9ydGVkOiBmYWxzZSxcbiAgICB1cGRhdGVTdGVwOiBqZXN0LmZuKCksXG4gICAgcmFuZG9tOiBqZXN0LmZuKCksXG4gIH1cblxuICBpdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCB0aGUgcHJvdmlkZWQgcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSAvPilcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpLnRvQmVEZWZpbmVkKClcbiAgfSlcblxuICAvLyAgIGl0KCdjYWxscyB0aGUgcmFuZG9tIGZ1bmN0aW9uIGFuZCB1cGRhdGVTdGVwIG9uIHByZXNzIHdoZW4gbm90IGRpc2FibGVkJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSAvPilcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMucmFuZG9tKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMudXBkYXRlU3RlcCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gIC8vICAgfSlcblxuICAvLyAgIGl0KCdkb2VzIG5vdCBjYWxsIHRoZSByYW5kb20gZnVuY3Rpb24gYW5kIHVwZGF0ZVN0ZXAgb24gcHJlc3Mgd2hlbiBkaXNhYmxlZCcsICgpID0+IHtcbiAgLy8gICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gZGlzYWJsZWQ9e3RydWV9IC8+KVxuICAvLyAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy5yYW5kb20pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy51cGRhdGVTdGVwKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICB9KVxuXG4gIC8vICAgaXQoJ2RvZXMgbm90IGNhbGwgdGhlIHJhbmRvbSBmdW5jdGlvbiBhbmQgdXBkYXRlU3RlcCBvbiBwcmVzcyB3aGVuIGNhbkdvIGlzIGZhbHNlJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSBjYW5Hbz17ZmFsc2V9IC8+KVxuICAvLyAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy5yYW5kb20pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy51cGRhdGVTdGVwKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICB9KVxuXG4gIC8vICAgaXQoJ2RvZXMgbm90IGNhbGwgdGhlIHJhbmRvbSBmdW5jdGlvbiBhbmQgdXBkYXRlU3RlcCBvbiBwcmVzcyB3aGVuIGlzUmVwb3J0ZWQgaXMgdHJ1ZScsICgpID0+IHtcbiAgLy8gICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gaXNSZXBvcnRlZD17dHJ1ZX0gLz4pXG4gIC8vICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnJhbmRvbSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnVwZGF0ZVN0ZXApLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgIH0pXG5cbiAgLy8gQWRkIG1vcmUgdGVzdHMgYmFzZWQgb24geW91ciBjb21wb25lbnQncyBiZWhhdmlvciBhbmQgcmVxdWlyZW1lbnRzXG59KVxuIl0sIm1hcHBpbmdzIjoiOztBQUlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxZQUFZLEVBQUUsWUFBSztFQUMzQixJQUFBQyxRQUFBLEdBQWVDLE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFBL0JDLElBQUksR0FBQUYsUUFBQSxDQUFKRSxJQUFJO0VBQ1gsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0tDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLFlBQVksQ0FBQztJQUNuQ0MsdUJBQXVCLEVBQUUsU0FBQUEsd0JBQUEsRUFBSztNQUM1QixPQUFPLFVBQUNDLEtBQVUsRUFBSTtRQUNwQixPQUFPLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDUixJQUFJLEVBQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUFLSSxLQUFLO1VBQUFHLFFBQUEsRUFBR0gsS0FBSyxDQUFDRztRQUFRLEVBQU8sQ0FBQztNQUNqRCxDQUFDO0lBQ0g7RUFBQztBQUVMLENBQUMsQ0FBQztBQUFBLElBQUFGLFdBQUEsR0FBQVIsT0FBQTtBQUFBLElBQUFXLEtBQUE7RUFBQUMsWUFBQTtBQUFBLFNBQUFmLFlBQUE7RUFBQSxJQUFBZ0IsU0FBQSxHQUFBYixPQUFBO0lBQUFJLElBQUEsR0FBQVMsU0FBQSxDQUFBVCxJQUFBO0VBQUFQLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFPLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTs7Ozs7Ozs7O0FBZEYsSUFBQVUsT0FBQSxHQUFBQyxlQUFBLENBQUFmLE9BQUE7QUFDQSxJQUFBZ0IsY0FBQSxHQUFBaEIsT0FBQTtBQUNBLElBQUFpQixFQUFBLEdBQUFqQixPQUFBO0FBY0FrQixRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBSztFQUM5QixJQUFNQyxTQUFTLEdBQWM7SUFDM0JDLEtBQUssRUFBRSxDQUFDO0lBQ1JDLE9BQU8sRUFBRSxDQUFDO0lBQ1ZDLFFBQVEsRUFBRSxLQUFLO0lBQ2ZDLEtBQUssRUFBRSxJQUFJO0lBQ1hDLFVBQVUsRUFBRSxLQUFLO0lBQ2pCQyxVQUFVLEVBQUVyQixJQUFJLENBQUNzQixFQUFFLEVBQUU7SUFDckJDLE1BQU0sRUFBRXZCLElBQUksQ0FBQ3NCLEVBQUU7R0FDaEI7RUFFREUsRUFBRSxDQUFDLDJDQUEyQyxFQUFFLFlBQUs7SUFDbkQsSUFBQUMsSUFBQSxHQUFzQixJQUFBYixjQUFBLENBQUFjLE1BQU0sRUFBQyxJQUFBdEIsV0FBQSxDQUFBQyxHQUFBLEVBQUNRLEVBQUEsQ0FBQWMsSUFBSSxFQUFBN0IsTUFBQSxDQUFBQyxNQUFBLEtBQUtnQixTQUFTLENBQUMsQ0FBRyxDQUFDO01BQTlDYSxXQUFXLEdBQUFILElBQUEsQ0FBWEcsV0FBVztJQUNsQkMsTUFBTSxDQUFDRCxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDRSxXQUFXLEVBQUU7RUFDckQsQ0FBQyxDQUFDO0FBK0JKLENBQUMsQ0FBQyJ9