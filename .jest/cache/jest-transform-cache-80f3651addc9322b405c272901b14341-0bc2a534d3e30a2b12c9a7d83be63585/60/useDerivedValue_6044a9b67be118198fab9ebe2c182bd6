c543c52dee3166e8b66cd96f5655c4c4
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useDerivedValue = useDerivedValue;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = require("react");
var _animation = require("../animation");
var _core = require("../core");
var _PlatformChecker = require("../PlatformChecker");
function useDerivedValue(processor, dependencies) {
  var _processor$_closure;
  var initRef = (0, _react.useRef)(null);
  var inputs = Object.values((_processor$_closure = processor._closure) != null ? _processor$_closure : {});
  if ((0, _PlatformChecker.shouldBeUseWeb)()) {
    var _dependencies;
    if (!inputs.length && (_dependencies = dependencies) !== null && _dependencies !== void 0 && _dependencies.length) {
      inputs = dependencies;
    }
  }
  if (dependencies === undefined) {
    dependencies = [].concat((0, _toConsumableArray2.default)(inputs), [processor.__workletHash]);
  } else {
    dependencies.push(processor.__workletHash);
  }
  if (initRef.current === null) {
    initRef.current = (0, _core.makeMutable)((0, _animation.initialUpdaterRun)(processor));
  }
  var sharedValue = initRef.current;
  (0, _react.useEffect)(function () {
    var fun = function fun() {
      'worklet';

      sharedValue.value = processor();
    };
    var mapperId = (0, _core.startMapper)(fun, inputs, [sharedValue]);
    return function () {
      (0, _core.stopMapper)(mapperId);
    };
  }, dependencies);
  (0, _react.useEffect)(function () {
    return function () {
      initRef.current = null;
    };
  }, []);
  return sharedValue;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2FuaW1hdGlvbiIsIl9jb3JlIiwiX1BsYXRmb3JtQ2hlY2tlciIsInVzZURlcml2ZWRWYWx1ZSIsInByb2Nlc3NvciIsImRlcGVuZGVuY2llcyIsIl9wcm9jZXNzb3IkX2Nsb3N1cmUiLCJpbml0UmVmIiwidXNlUmVmIiwiaW5wdXRzIiwiT2JqZWN0IiwidmFsdWVzIiwiX2Nsb3N1cmUiLCJzaG91bGRCZVVzZVdlYiIsIl9kZXBlbmRlbmNpZXMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJjb25jYXQiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwiZGVmYXVsdCIsIl9fd29ya2xldEhhc2giLCJwdXNoIiwiY3VycmVudCIsIm1ha2VNdXRhYmxlIiwiaW5pdGlhbFVwZGF0ZXJSdW4iLCJzaGFyZWRWYWx1ZSIsInVzZUVmZmVjdCIsImZ1biIsInZhbHVlIiwibWFwcGVySWQiLCJzdGFydE1hcHBlciIsInN0b3BNYXBwZXIiXSwic291cmNlcyI6WyJ1c2VEZXJpdmVkVmFsdWUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBpbml0aWFsVXBkYXRlclJ1biB9IGZyb20gJy4uL2FuaW1hdGlvbic7XG5pbXBvcnQgdHlwZSB7IEJhc2ljV29ya2xldEZ1bmN0aW9uLCBTaGFyZWRWYWx1ZSB9IGZyb20gJy4uL2NvbW1vblR5cGVzJztcbmltcG9ydCB7IG1ha2VNdXRhYmxlLCBzdGFydE1hcHBlciwgc3RvcE1hcHBlciB9IGZyb20gJy4uL2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBEZXBlbmRlbmN5TGlzdCB9IGZyb20gJy4vY29tbW9uVHlwZXMnO1xuaW1wb3J0IHsgc2hvdWxkQmVVc2VXZWIgfSBmcm9tICcuLi9QbGF0Zm9ybUNoZWNrZXInO1xuXG5leHBvcnQgdHlwZSBEZXJpdmVkVmFsdWU8VD4gPSBSZWFkb25seTxTaGFyZWRWYWx1ZTxUPj47XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VEZXJpdmVkVmFsdWU8VD4oXG4gIHByb2Nlc3NvcjogQmFzaWNXb3JrbGV0RnVuY3Rpb248VD4sXG4gIGRlcGVuZGVuY2llcz86IERlcGVuZGVuY3lMaXN0XG4pOiBEZXJpdmVkVmFsdWU8VD4ge1xuICBjb25zdCBpbml0UmVmID0gdXNlUmVmPFNoYXJlZFZhbHVlPFQ+IHwgbnVsbD4obnVsbCk7XG4gIGxldCBpbnB1dHMgPSBPYmplY3QudmFsdWVzKHByb2Nlc3Nvci5fY2xvc3VyZSA/PyB7fSk7XG4gIGlmIChzaG91bGRCZVVzZVdlYigpKSB7XG4gICAgaWYgKCFpbnB1dHMubGVuZ3RoICYmIGRlcGVuZGVuY2llcz8ubGVuZ3RoKSB7XG4gICAgICAvLyBsZXQgd2ViIHdvcmsgd2l0aG91dCBhIEJhYmVsL1NXQyBwbHVnaW5cbiAgICAgIGlucHV0cyA9IGRlcGVuZGVuY2llcztcbiAgICB9XG4gIH1cblxuICAvLyBidWlsZCBkZXBlbmRlbmNpZXNcbiAgaWYgKGRlcGVuZGVuY2llcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZGVwZW5kZW5jaWVzID0gWy4uLmlucHV0cywgcHJvY2Vzc29yLl9fd29ya2xldEhhc2hdO1xuICB9IGVsc2Uge1xuICAgIGRlcGVuZGVuY2llcy5wdXNoKHByb2Nlc3Nvci5fX3dvcmtsZXRIYXNoKTtcbiAgfVxuXG4gIGlmIChpbml0UmVmLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICBpbml0UmVmLmN1cnJlbnQgPSBtYWtlTXV0YWJsZShpbml0aWFsVXBkYXRlclJ1bihwcm9jZXNzb3IpKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gIGNvbnN0IHNoYXJlZFZhbHVlOiBTaGFyZWRWYWx1ZTxUPiA9IGluaXRSZWYuY3VycmVudCE7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBmdW4gPSAoKSA9PiB7XG4gICAgICAnd29ya2xldCc7XG4gICAgICBzaGFyZWRWYWx1ZS52YWx1ZSA9IHByb2Nlc3NvcigpO1xuICAgIH07XG4gICAgY29uc3QgbWFwcGVySWQgPSBzdGFydE1hcHBlcihmdW4sIGlucHV0cywgW3NoYXJlZFZhbHVlXSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN0b3BNYXBwZXIobWFwcGVySWQpO1xuICAgIH07XG4gIH0sIGRlcGVuZGVuY2llcyk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaW5pdFJlZi5jdXJyZW50ID0gbnVsbDtcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgcmV0dXJuIHNoYXJlZFZhbHVlO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxVQUFBLEdBQUFELE9BQUE7QUFFQSxJQUFBRSxLQUFBLEdBQUFGLE9BQUE7QUFFQSxJQUFBRyxnQkFBQSxHQUFBSCxPQUFBO0FBSU8sU0FBU0ksZUFBZUEsQ0FDN0JDLFNBQWtDLEVBQ2xDQyxZQUE2QixFQUNaO0VBQUEsSUFBQUMsbUJBQUE7RUFDakIsSUFBTUMsT0FBTyxHQUFHLElBQUFDLGFBQU0sRUFBd0IsSUFBSSxDQUFDO0VBQ25ELElBQUlDLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxNQUFNLEVBQUFMLG1CQUFBLEdBQUNGLFNBQVMsQ0FBQ1EsUUFBUSxZQUFBTixtQkFBQSxHQUFJLENBQUMsQ0FBQyxDQUFDO0VBQ3BELElBQUksSUFBQU8sK0JBQWMsR0FBRSxFQUFFO0lBQUEsSUFBQUMsYUFBQTtJQUNwQixJQUFJLENBQUNMLE1BQU0sQ0FBQ00sTUFBTSxLQUFBRCxhQUFBLEdBQUlULFlBQVksY0FBQVMsYUFBQSxlQUFaQSxhQUFBLENBQWNDLE1BQU0sRUFBRTtNQUUxQ04sTUFBTSxHQUFHSixZQUFZO0lBQ3ZCO0VBQ0Y7RUFHQSxJQUFJQSxZQUFZLEtBQUtXLFNBQVMsRUFBRTtJQUM5QlgsWUFBWSxNQUFBWSxNQUFBLEtBQUFDLG1CQUFBLENBQUFDLE9BQUEsRUFBT1YsTUFBTSxJQUFFTCxTQUFTLENBQUNnQixhQUFhLEVBQUM7RUFDckQsQ0FBQyxNQUFNO0lBQ0xmLFlBQVksQ0FBQ2dCLElBQUksQ0FBQ2pCLFNBQVMsQ0FBQ2dCLGFBQWEsQ0FBQztFQUM1QztFQUVBLElBQUliLE9BQU8sQ0FBQ2UsT0FBTyxLQUFLLElBQUksRUFBRTtJQUM1QmYsT0FBTyxDQUFDZSxPQUFPLEdBQUcsSUFBQUMsaUJBQVcsRUFBQyxJQUFBQyw0QkFBaUIsRUFBQ3BCLFNBQVMsQ0FBQyxDQUFDO0VBQzdEO0VBR0EsSUFBTXFCLFdBQTJCLEdBQUdsQixPQUFPLENBQUNlLE9BQVE7RUFFcEQsSUFBQUksZ0JBQVMsRUFBQyxZQUFNO0lBQ2QsSUFBTUMsR0FBRyxHQUFHLFNBQU5BLEdBQUdBLENBQUEsRUFBUztNQUNoQixTQUFTOztNQUNURixXQUFXLENBQUNHLEtBQUssR0FBR3hCLFNBQVMsRUFBRTtJQUNqQyxDQUFDO0lBQ0QsSUFBTXlCLFFBQVEsR0FBRyxJQUFBQyxpQkFBVyxFQUFDSCxHQUFHLEVBQUVsQixNQUFNLEVBQUUsQ0FBQ2dCLFdBQVcsQ0FBQyxDQUFDO0lBQ3hELE9BQU8sWUFBTTtNQUNYLElBQUFNLGdCQUFVLEVBQUNGLFFBQVEsQ0FBQztJQUN0QixDQUFDO0VBQ0gsQ0FBQyxFQUFFeEIsWUFBWSxDQUFDO0VBRWhCLElBQUFxQixnQkFBUyxFQUFDLFlBQU07SUFDZCxPQUFPLFlBQU07TUFDWG5CLE9BQU8sQ0FBQ2UsT0FBTyxHQUFHLElBQUk7SUFDeEIsQ0FBQztFQUNILENBQUMsRUFBRSxFQUFFLENBQUM7RUFFTixPQUFPRyxXQUFXO0FBQ3BCIn0=