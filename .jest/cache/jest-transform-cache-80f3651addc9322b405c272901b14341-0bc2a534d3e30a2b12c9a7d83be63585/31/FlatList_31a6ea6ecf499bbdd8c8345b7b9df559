995a2c9065ebe06b8b5f1e6ee24b0d89
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReanimatedFlatList = void 0;
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _View = require("./View");
var _createAnimatedComponent = _interopRequireDefault(require("../../createAnimatedComponent"));
var _excluded = ["itemLayoutAnimation"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var AnimatedFlatList = (0, _createAnimatedComponent.default)(_reactNative.FlatList);
var createCellRenderer = function createCellRenderer(itemLayoutAnimation, cellStyle) {
  var cellRenderer = function cellRenderer(props) {
    return _react.default.createElement(_View.AnimatedView, {
      layout: itemLayoutAnimation,
      onLayout: props.onLayout,
      style: cellStyle
    }, props.children);
  };
  return cellRenderer;
};
var ReanimatedFlatList = (0, _react.forwardRef)(function (props, ref) {
  var itemLayoutAnimation = props.itemLayoutAnimation,
    restProps = (0, _objectWithoutProperties2.default)(props, _excluded);
  var cellStyle = restProps !== null && restProps !== void 0 && restProps.inverted ? restProps !== null && restProps !== void 0 && restProps.horizontal ? styles.horizontallyInverted : styles.verticallyInverted : undefined;
  if (!('scrollEventThrottle' in restProps)) {
    restProps.scrollEventThrottle = 1;
  }
  var cellRenderer = _react.default.useMemo(function () {
    return createCellRenderer(itemLayoutAnimation, cellStyle);
  }, [cellStyle]);
  return _react.default.createElement(AnimatedFlatList, _extends({
    ref: ref
  }, restProps, {
    CellRendererComponent: cellRenderer
  }));
});
exports.ReanimatedFlatList = ReanimatedFlatList;
var styles = _reactNative.StyleSheet.create({
  verticallyInverted: {
    transform: [{
      scaleY: -1
    }]
  },
  horizontallyInverted: {
    transform: [{
      scaleX: -1
    }]
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfVmlldyIsIl9jcmVhdGVBbmltYXRlZENvbXBvbmVudCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfZXhjbHVkZWQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJub2RlSW50ZXJvcCIsIldlYWtNYXAiLCJjYWNoZUJhYmVsSW50ZXJvcCIsImNhY2hlTm9kZUludGVyb3AiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiQW5pbWF0ZWRGbGF0TGlzdCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiRmxhdExpc3QiLCJjcmVhdGVDZWxsUmVuZGVyZXIiLCJpdGVtTGF5b3V0QW5pbWF0aW9uIiwiY2VsbFN0eWxlIiwiY2VsbFJlbmRlcmVyIiwicHJvcHMiLCJSZWFjdCIsImNyZWF0ZUVsZW1lbnQiLCJBbmltYXRlZFZpZXciLCJsYXlvdXQiLCJvbkxheW91dCIsInN0eWxlIiwiY2hpbGRyZW4iLCJSZWFuaW1hdGVkRmxhdExpc3QiLCJmb3J3YXJkUmVmIiwicmVmIiwicmVzdFByb3BzIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiIsImludmVydGVkIiwiaG9yaXpvbnRhbCIsInN0eWxlcyIsImhvcml6b250YWxseUludmVydGVkIiwidmVydGljYWxseUludmVydGVkIiwidW5kZWZpbmVkIiwic2Nyb2xsRXZlbnRUaHJvdHRsZSIsInVzZU1lbW8iLCJfZXh0ZW5kcyIsIkNlbGxSZW5kZXJlckNvbXBvbmVudCIsImV4cG9ydHMiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwidHJhbnNmb3JtIiwic2NhbGVZIiwic2NhbGVYIl0sInNvdXJjZXMiOlsiRmxhdExpc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgRm9yd2FyZGVkUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCwgZm9yd2FyZFJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIHsgRmxhdExpc3RQcm9wcywgTGF5b3V0Q2hhbmdlRXZlbnQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgRmxhdExpc3QsIFN0eWxlU2hlZXQgfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IHsgQW5pbWF0ZWRWaWV3IH0gZnJvbSAnLi9WaWV3JztcbmltcG9ydCBjcmVhdGVBbmltYXRlZENvbXBvbmVudCBmcm9tICcuLi8uLi9jcmVhdGVBbmltYXRlZENvbXBvbmVudCc7XG5pbXBvcnQgdHlwZSB7IElMYXlvdXRBbmltYXRpb25CdWlsZGVyIH0gZnJvbSAnLi4vbGF5b3V0UmVhbmltYXRpb24vYW5pbWF0aW9uQnVpbGRlci9jb21tb25UeXBlcyc7XG5pbXBvcnQgdHlwZSB7IFN0eWxlUHJvcHMgfSBmcm9tICcuLi9jb21tb25UeXBlcyc7XG5pbXBvcnQgdHlwZSB7IEFuaW1hdGVQcm9wcyB9IGZyb20gJy4uL2hlbHBlclR5cGVzJztcblxuY29uc3QgQW5pbWF0ZWRGbGF0TGlzdCA9IGNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50KEZsYXRMaXN0IGFzIGFueSkgYXMgYW55O1xuXG5pbnRlcmZhY2UgQW5pbWF0ZWRGbGF0TGlzdFByb3BzIHtcbiAgb25MYXlvdXQ6IChldmVudDogTGF5b3V0Q2hhbmdlRXZlbnQpID0+IHZvaWQ7XG4gIC8vIGltcGxpY2l0IGBjaGlsZHJlbmAgcHJvcCBoYXMgYmVlbiByZW1vdmVkIGluIEB0eXBlcy9yZWFjdF4xOC4wLjBcbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgaW52ZXJ0ZWQ/OiBib29sZWFuO1xuICBob3Jpem9udGFsPzogYm9vbGVhbjtcbn1cblxuY29uc3QgY3JlYXRlQ2VsbFJlbmRlcmVyID0gKFxuICBpdGVtTGF5b3V0QW5pbWF0aW9uPzogSUxheW91dEFuaW1hdGlvbkJ1aWxkZXIsXG4gIGNlbGxTdHlsZT86IFN0eWxlUHJvcHNcbikgPT4ge1xuICBjb25zdCBjZWxsUmVuZGVyZXIgPSAocHJvcHM6IEFuaW1hdGVkRmxhdExpc3RQcm9wcykgPT4ge1xuICAgIHJldHVybiAoXG4gICAgICA8QW5pbWF0ZWRWaWV3XG4gICAgICAgIC8vIFRPRE8gVFlQRVNDUklQVCBUaGlzIGlzIHRlbXBvcmFyeSBjYXN0IGlzIHRvIGdldCByaWQgb2YgLmQudHMgZmlsZS5cbiAgICAgICAgbGF5b3V0PXtpdGVtTGF5b3V0QW5pbWF0aW9uIGFzIGFueX1cbiAgICAgICAgb25MYXlvdXQ9e3Byb3BzLm9uTGF5b3V0fVxuICAgICAgICBzdHlsZT17Y2VsbFN0eWxlfT5cbiAgICAgICAge3Byb3BzLmNoaWxkcmVufVxuICAgICAgPC9BbmltYXRlZFZpZXc+XG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gY2VsbFJlbmRlcmVyO1xufTtcblxuaW50ZXJmYWNlIFJlYW5pbWF0ZWRGbGF0TGlzdFByb3BzV2l0aExheW91dDxUPiBleHRlbmRzIEZsYXRMaXN0UHJvcHM8VD4ge1xuICBpdGVtTGF5b3V0QW5pbWF0aW9uPzogSUxheW91dEFuaW1hdGlvbkJ1aWxkZXI7XG59XG5cbi8vIFRPRE8gVFlQRVNDUklQVCBUaGlzIGlzIGEgdGVtcG9yYXJ5IHR5cGUgdG8gZ2V0IHJpZCBvZiAuZC50cyBmaWxlLlxuZGVjbGFyZSBjbGFzcyBSZWFuaW1hdGVkRmxhdExpc3RDbGFzczxUPiBleHRlbmRzIENvbXBvbmVudDxcbiAgQW5pbWF0ZVByb3BzPFJlYW5pbWF0ZWRGbGF0TGlzdFByb3BzV2l0aExheW91dDxUPj5cbj4ge1xuICBnZXROb2RlKCk6IEZsYXRMaXN0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlYW5pbWF0ZWRGbGF0TGlzdFByb3BzPEl0ZW1UPiBleHRlbmRzIEZsYXRMaXN0UHJvcHM8SXRlbVQ+IHtcbiAgaXRlbUxheW91dEFuaW1hdGlvbj86IElMYXlvdXRBbmltYXRpb25CdWlsZGVyO1xufVxuXG5leHBvcnQgY29uc3QgUmVhbmltYXRlZEZsYXRMaXN0ID0gZm9yd2FyZFJlZihcbiAgKHByb3BzOiBSZWFuaW1hdGVkRmxhdExpc3RQcm9wczxhbnk+LCByZWY6IEZvcndhcmRlZFJlZjxGbGF0TGlzdD4pID0+IHtcbiAgICBjb25zdCB7IGl0ZW1MYXlvdXRBbmltYXRpb24sIC4uLnJlc3RQcm9wcyB9ID0gcHJvcHM7XG5cbiAgICBjb25zdCBjZWxsU3R5bGUgPSByZXN0UHJvcHM/LmludmVydGVkXG4gICAgICA/IHJlc3RQcm9wcz8uaG9yaXpvbnRhbFxuICAgICAgICA/IHN0eWxlcy5ob3Jpem9udGFsbHlJbnZlcnRlZFxuICAgICAgICA6IHN0eWxlcy52ZXJ0aWNhbGx5SW52ZXJ0ZWRcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgLy8gU2V0IGRlZmF1bHQgc2Nyb2xsRXZlbnRUaHJvdHRsZSwgYmVjYXVzZSB1c2VyIGV4cGVjdHNcbiAgICAvLyB0byBoYXZlIGNvbnRpbnVvdXMgc2Nyb2xsIGV2ZW50cyBhbmRcbiAgICAvLyByZWFjdC1uYXRpdmUgZGVmYXVsdHMgaXQgdG8gNTAgZm9yIEZsYXRMaXN0cy5cbiAgICAvLyBXZSBzZXQgaXQgdG8gMSBzbyB3ZSBoYXZlIHBlYWNlIHVudGlsXG4gICAgLy8gdGhlcmUgYXJlIDk2MCBmcHMgc2NyZWVucy5cbiAgICBpZiAoISgnc2Nyb2xsRXZlbnRUaHJvdHRsZScgaW4gcmVzdFByb3BzKSkge1xuICAgICAgcmVzdFByb3BzLnNjcm9sbEV2ZW50VGhyb3R0bGUgPSAxO1xuICAgIH1cblxuICAgIGNvbnN0IGNlbGxSZW5kZXJlciA9IFJlYWN0LnVzZU1lbW8oXG4gICAgICAoKSA9PiBjcmVhdGVDZWxsUmVuZGVyZXIoaXRlbUxheW91dEFuaW1hdGlvbiwgY2VsbFN0eWxlKSxcbiAgICAgIFtjZWxsU3R5bGVdXG4gICAgKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8QW5pbWF0ZWRGbGF0TGlzdFxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgey4uLnJlc3RQcm9wc31cbiAgICAgICAgQ2VsbFJlbmRlcmVyQ29tcG9uZW50PXtjZWxsUmVuZGVyZXJ9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbiAgLy8gVE9ETyBUWVBFU0NSSVBUIHRoaXMgd2FzIGEgY2FzdCBiZWZvcmVcbiAgLy8gKSBhcyA8VD4oXG4gIC8vICAgcHJvcHM6IFJlYW5pbWF0ZWRGbGF0TGlzdFByb3BzPFQ+ICYgUmVmQXR0cmlidXRlczxGbGF0TGlzdDxhbnk+PlxuICAvLyApID0+IFJlYWN0LlJlYWN0RWxlbWVudDtcbik7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgdmVydGljYWxseUludmVydGVkOiB7IHRyYW5zZm9ybTogW3sgc2NhbGVZOiAtMSB9XSB9LFxuICBob3Jpem9udGFsbHlJbnZlcnRlZDogeyB0cmFuc2Zvcm06IFt7IHNjYWxlWDogLTEgfV0gfSxcbn0pO1xuXG5leHBvcnQgdHlwZSBSZWFuaW1hdGVkRmxhdExpc3Q8VD4gPSB0eXBlb2YgUmVhbmltYXRlZEZsYXRMaXN0Q2xhc3M8VD4gJlxuICBGbGF0TGlzdDxUPjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsSUFBQUEsTUFBQSxHQUFBQyx1QkFBQSxDQUFBQyxPQUFBO0FBRUEsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsS0FBQSxHQUFBRixPQUFBO0FBQ0EsSUFBQUcsd0JBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUFtRSxJQUFBSyxTQUFBO0FBQUEsU0FBQUMseUJBQUFDLFdBQUEsZUFBQUMsT0FBQSxrQ0FBQUMsaUJBQUEsT0FBQUQsT0FBQSxRQUFBRSxnQkFBQSxPQUFBRixPQUFBLFlBQUFGLHdCQUFBLFlBQUFBLHlCQUFBQyxX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