4588ea0f384fc0d0059bbcc58024c586
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
var react_1 = __importDefault(require("react"));
describe('Text Component', function () {
  it('renders correctly with default props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title"
      })),
      getByText = _ref.getByText;
    expect(getByText('Test Title')).toBeTruthy();
  });
  it('applies the correct style based on the "h" prop', function () {
    var styles = ['h0', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7', 'h8', 'h9', 'h10', 'h11', 'h12'];
    styles.forEach(function (style) {
      var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
          title: "Test Title",
          h: style
        })),
        getByTestId = _ref2.getByTestId;
      var expectedStyle = _1.textStyles[style];
      var receivedStyle = getByTestId('text-component').props.style[0];
      var filteredReceivedStyle = Object.keys(expectedStyle).reduce(function (obj, key) {
        obj[key] = receivedStyle[key];
        return obj;
      }, {});
      expect(filteredReceivedStyle).toEqual(expectedStyle);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF9uYXRpdmVfMSIsInJlcXVpcmUiLCJfMSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJkZXNjcmliZSIsIml0IiwiX3JlZiIsInJlbmRlciIsIl9qc3hSdW50aW1lIiwianN4IiwiVGV4dCIsInRpdGxlIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsInN0eWxlcyIsImZvckVhY2giLCJzdHlsZSIsIl9yZWYyIiwiaCIsImdldEJ5VGVzdElkIiwiZXhwZWN0ZWRTdHlsZSIsInRleHRTdHlsZXMiLCJyZWNlaXZlZFN0eWxlIiwicHJvcHMiLCJmaWx0ZXJlZFJlY2VpdmVkU3R5bGUiLCJPYmplY3QiLCJrZXlzIiwicmVkdWNlIiwib2JqIiwia2V5IiwidG9FcXVhbCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvVGV4dC9UZXh0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cmVuZGVyfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7VGV4dCwgaFQsIHRleHRTdHlsZXN9IGZyb20gJy4vJyAvLyBSZXBsYWNlIHdpdGggeW91ciBhY3R1YWwgZmlsZSBwYXRoXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmRlc2NyaWJlKCdUZXh0IENvbXBvbmVudCcsICgpID0+IHtcbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggZGVmYXVsdCBwcm9wcycsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXh0fSA9IHJlbmRlcig8VGV4dCB0aXRsZT1cIlRlc3QgVGl0bGVcIiAvPilcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdUZXN0IFRpdGxlJykpLnRvQmVUcnV0aHkoKVxuICB9KVxuXG4gIGl0KCdhcHBsaWVzIHRoZSBjb3JyZWN0IHN0eWxlIGJhc2VkIG9uIHRoZSBcImhcIiBwcm9wJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0eWxlczogaFRbXSA9IFtcbiAgICAgICdoMCcsXG4gICAgICAnaDEnLFxuICAgICAgJ2gyJyxcbiAgICAgICdoMycsXG4gICAgICAnaDQnLFxuICAgICAgJ2g1JyxcbiAgICAgICdoNicsXG4gICAgICAnaDcnLFxuICAgICAgJ2g4JyxcbiAgICAgICdoOScsXG4gICAgICAnaDEwJyxcbiAgICAgICdoMTEnLFxuICAgICAgJ2gxMicsXG4gICAgXVxuICAgIHN0eWxlcy5mb3JFYWNoKHN0eWxlID0+IHtcbiAgICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPFRleHQgdGl0bGU9XCJUZXN0IFRpdGxlXCIgaD17c3R5bGV9IC8+KVxuICAgICAgY29uc3QgZXhwZWN0ZWRTdHlsZSA9IHRleHRTdHlsZXNbc3R5bGVdXG4gICAgICBjb25zdCByZWNlaXZlZFN0eWxlID0gZ2V0QnlUZXN0SWQoJ3RleHQtY29tcG9uZW50JykucHJvcHMuc3R5bGVbMF1cblxuICAgICAgLy8g0J7RgtCx0YDQsNGB0YvQstCw0LXQvCDQu9C40YjQvdC40LUg0YHQstC+0LnRgdGC0LLQsCDQuNC3INC/0L7Qu9GD0YfQtdC90L3QvtCz0L4g0YHRgtC40LvRj1xuICAgICAgY29uc3QgZmlsdGVyZWRSZWNlaXZlZFN0eWxlID0gT2JqZWN0LmtleXMoZXhwZWN0ZWRTdHlsZSkucmVkdWNlKFxuICAgICAgICAob2JqOiBhbnksIGtleSkgPT4ge1xuICAgICAgICAgIG9ialtrZXldID0gcmVjZWl2ZWRTdHlsZVtrZXldXG4gICAgICAgICAgcmV0dXJuIG9ialxuICAgICAgICB9LFxuICAgICAgICB7fSxcbiAgICAgIClcblxuICAgICAgZXhwZWN0KGZpbHRlcmVkUmVjZWl2ZWRTdHlsZSkudG9FcXVhbChleHBlY3RlZFN0eWxlKVxuICAgIH0pXG4gIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsY0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsRUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBQyxlQUFBLENBQUFILE9BQUE7QUFFQUksUUFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQUs7RUFDOUJDLEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxZQUFLO0lBQzlDLElBQUFDLElBQUEsR0FBb0IsSUFBQVAsY0FBQSxDQUFBUSxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNSLEVBQUEsQ0FBQVMsSUFBSTtRQUFDQyxLQUFLLEVBQUM7TUFBWSxFQUFHLENBQUM7TUFBaERDLFNBQVMsR0FBQU4sSUFBQSxDQUFUTSxTQUFTO0lBQ2hCQyxNQUFNLENBQUNELFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDRSxVQUFVLEVBQUU7RUFDOUMsQ0FBQyxDQUFDO0VBRUZULEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxZQUFLO0lBQ3pELElBQU1VLE1BQU0sR0FBUyxDQUNuQixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLENBQ047SUFDREEsTUFBTSxDQUFDQyxPQUFPLENBQUMsVUFBQUMsS0FBSyxFQUFHO01BQ3JCLElBQUFDLEtBQUEsR0FBc0IsSUFBQW5CLGNBQUEsQ0FBQVEsTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDUixFQUFBLENBQUFTLElBQUk7VUFBQ0MsS0FBSyxFQUFDLFlBQVk7VUFBQ1EsQ0FBQyxFQUFFRjtRQUFNLEVBQUcsQ0FBQztRQUE1REcsV0FBVyxHQUFBRixLQUFBLENBQVhFLFdBQVc7TUFDbEIsSUFBTUMsYUFBYSxHQUFHcEIsRUFBQSxDQUFBcUIsVUFBVSxDQUFDTCxLQUFLLENBQUM7TUFDdkMsSUFBTU0sYUFBYSxHQUFHSCxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ0ksS0FBSyxDQUFDUCxLQUFLLENBQUMsQ0FBQyxDQUFDO01BR2xFLElBQU1RLHFCQUFxQixHQUFHQyxNQUFNLENBQUNDLElBQUksQ0FBQ04sYUFBYSxDQUFDLENBQUNPLE1BQU0sQ0FDN0QsVUFBQ0MsR0FBUSxFQUFFQyxHQUFHLEVBQUk7UUFDaEJELEdBQUcsQ0FBQ0MsR0FBRyxDQUFDLEdBQUdQLGFBQWEsQ0FBQ08sR0FBRyxDQUFDO1FBQzdCLE9BQU9ELEdBQUc7TUFDWixDQUFDLEVBQ0QsRUFBRSxDQUNIO01BRURoQixNQUFNLENBQUNZLHFCQUFxQixDQUFDLENBQUNNLE9BQU8sQ0FBQ1YsYUFBYSxDQUFDO0lBQ3RELENBQUMsQ0FBQztFQUNKLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9