23c20e8956e3962be62dddafb47a7553
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('./Animated', function () {
  return Object.assign({}, jest.requireActual('./Animated'), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
describe('Dice Component', function () {
  var mockRandom = jest.fn();
  var mockUpdateStep = jest.fn();
  var mockProps = {
    count: 1,
    players: 2,
    disabled: false,
    canGo: true,
    isReported: false,
    updateStep: mockUpdateStep,
    random: mockRandom
  };
  it('renders correctly with the provided props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('dice-component')).toBeDefined();
  });
  it('calls the random function and updateStep on press when not disabled', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref2.getByTestId;
    react_native_1.fireEvent.press(getByTestId('dice-component'));
    expect(mockRandom).toHaveBeenCalledTimes(1);
    expect(mockUpdateStep).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX2pzeFJ1bnRpbWUiLCJyZXF1aXJlIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWFjdF9uYXRpdmVfMSIsIl8xIiwiZGVzY3JpYmUiLCJtb2NrUmFuZG9tIiwiZm4iLCJtb2NrVXBkYXRlU3RlcCIsIm1vY2tQcm9wcyIsImNvdW50IiwicGxheWVycyIsImRpc2FibGVkIiwiY2FuR28iLCJpc1JlcG9ydGVkIiwidXBkYXRlU3RlcCIsInJhbmRvbSIsIml0IiwiX3JlZiIsInJlbmRlciIsImpzeCIsIkRpY2UiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwiX3JlZjIiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvRGljZS9EaWNlLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHtEaWNlLCBEaWNlUHJvcHN9IGZyb20gJy4vJ1xuXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRIZWxwZXInKVxuamVzdC5tb2NrKCcuL0FuaW1hdGVkJywgKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnLi9BbmltYXRlZCcpLFxuICAgIGNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50OiAoY29tcG9uZW50OiBhbnkpID0+IHtcbiAgICAgIHJldHVybiBjb21wb25lbnRcbiAgICB9LFxuICB9XG59KVxuXG5kZXNjcmliZSgnRGljZSBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tSYW5kb20gPSBqZXN0LmZuKClcbiAgY29uc3QgbW9ja1VwZGF0ZVN0ZXAgPSBqZXN0LmZuKClcblxuICAvLyDQn9C10YDQtdC00LDQudGC0LUg0LzQvtC60Lgg0YfQtdGA0LXQtyBtb2NrUHJvcHNcbiAgY29uc3QgbW9ja1Byb3BzID0ge1xuICAgIGNvdW50OiAxLFxuICAgIHBsYXllcnM6IDIsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIGNhbkdvOiB0cnVlLFxuICAgIGlzUmVwb3J0ZWQ6IGZhbHNlLFxuICAgIHVwZGF0ZVN0ZXA6IG1vY2tVcGRhdGVTdGVwLFxuICAgIHJhbmRvbTogbW9ja1JhbmRvbSxcbiAgfVxuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIHRoZSBwcm92aWRlZCBwcm9wcycsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSkudG9CZURlZmluZWQoKVxuICB9KVxuXG4gIGl0KCdjYWxscyB0aGUgcmFuZG9tIGZ1bmN0aW9uIGFuZCB1cGRhdGVTdGVwIG9uIHByZXNzIHdoZW4gbm90IGRpc2FibGVkJywgKCkgPT4ge1xuICAgIC8vINCg0LXQvdC00LXRgCDQutC+0LzQv9C+0L3QtdC90YLQsCDRgSDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtdC8INC80L7QutC+0LJcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuXG4gICAgLy8g0KHQuNC80YPQu9C40YDRg9C50YLQtSDQvdCw0LbQsNGC0LjQtSDQvdCwINC60L7QvNC/0L7QvdC10L3RglxuICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcblxuICAgIC8vINCf0YDQvtCy0LXRgNGM0YLQtSwg0YfRgtC+INGE0YPQvdC60YbQuNC4IHJhbmRvbSDQuCB1cGRhdGVTdGVwINCx0YvQu9C4INCy0YvQt9Cy0LDQvdGLINC/0L4g0L7QtNC90L7QvNGDINGA0LDQt9GDXG4gICAgZXhwZWN0KG1vY2tSYW5kb20pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICAgIGV4cGVjdChtb2NrVXBkYXRlU3RlcCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gIH0pXG4gIC8vICAgaXQoJ2RvZXMgbm90IGNhbGwgdGhlIHJhbmRvbSBmdW5jdGlvbiBhbmQgdXBkYXRlU3RlcCBvbiBwcmVzcyB3aGVuIGRpc2FibGVkJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSBkaXNhYmxlZD17dHJ1ZX0gLz4pXG4gIC8vICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnJhbmRvbSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnVwZGF0ZVN0ZXApLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgIH0pXG5cbiAgLy8gICBpdCgnZG9lcyBub3QgY2FsbCB0aGUgcmFuZG9tIGZ1bmN0aW9uIGFuZCB1cGRhdGVTdGVwIG9uIHByZXNzIHdoZW4gY2FuR28gaXMgZmFsc2UnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IGNhbkdvPXtmYWxzZX0gLz4pXG4gIC8vICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnJhbmRvbSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnVwZGF0ZVN0ZXApLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgIH0pXG5cbiAgLy8gICBpdCgnZG9lcyBub3QgY2FsbCB0aGUgcmFuZG9tIGZ1bmN0aW9uIGFuZCB1cGRhdGVTdGVwIG9uIHByZXNzIHdoZW4gaXNSZXBvcnRlZCBpcyB0cnVlJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSBpc1JlcG9ydGVkPXt0cnVlfSAvPilcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMucmFuZG9tKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMudXBkYXRlU3RlcCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApXG4gIC8vICAgfSlcblxuICAvLyBBZGQgbW9yZSB0ZXN0cyBiYXNlZCBvbiB5b3VyIGNvbXBvbmVudCdzIGJlaGF2aW9yIGFuZCByZXF1aXJlbWVudHNcbn0pXG4iXSwibWFwcGluZ3MiOiI7O0FBSUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHNEQUFzRCxDQUFDO0FBQ2pFRCxXQUFBLEdBQUtDLElBQUksQ0FBQyxZQUFZLEVBQUUsWUFBSztFQUMzQixPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDS0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQ25DQyx1QkFBdUIsRUFBRSxTQUFBQSx3QkFBQ0MsU0FBYyxFQUFJO01BQzFDLE9BQU9BLFNBQVM7SUFDbEI7RUFBQztBQUVMLENBQUMsQ0FBQztBQUFBLElBQUFDLFdBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLEtBQUE7RUFBQUMsWUFBQTtBQUFBLFNBQUFYLFlBQUE7RUFBQSxJQUFBWSxRQUFBLEdBQUFILE9BQUE7SUFBQUwsSUFBQSxHQUFBUSxRQUFBLENBQUFSLElBQUE7RUFBQUosV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUksSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBOzs7Ozs7Ozs7QUFaRixJQUFBUyxPQUFBLEdBQUFDLGVBQUEsQ0FBQUwsT0FBQTtBQUNBLElBQUFNLGNBQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLEVBQUEsR0FBQVAsT0FBQTtBQVlBUSxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBSztFQUM5QixJQUFNQyxVQUFVLEdBQUdkLElBQUksQ0FBQ2UsRUFBRSxFQUFFO0VBQzVCLElBQU1DLGNBQWMsR0FBR2hCLElBQUksQ0FBQ2UsRUFBRSxFQUFFO0VBR2hDLElBQU1FLFNBQVMsR0FBRztJQUNoQkMsS0FBSyxFQUFFLENBQUM7SUFDUkMsT0FBTyxFQUFFLENBQUM7SUFDVkMsUUFBUSxFQUFFLEtBQUs7SUFDZkMsS0FBSyxFQUFFLElBQUk7SUFDWEMsVUFBVSxFQUFFLEtBQUs7SUFDakJDLFVBQVUsRUFBRVAsY0FBYztJQUMxQlEsTUFBTSxFQUFFVjtHQUNUO0VBRURXLEVBQUUsQ0FBQywyQ0FBMkMsRUFBRSxZQUFLO0lBQ25ELElBQUFDLElBQUEsR0FBc0IsSUFBQWYsY0FBQSxDQUFBZ0IsTUFBTSxFQUFDLElBQUF2QixXQUFBLENBQUF3QixHQUFBLEVBQUNoQixFQUFBLENBQUFpQixJQUFJLEVBQUEvQixNQUFBLENBQUFDLE1BQUEsS0FBS2tCLFNBQVMsQ0FBQyxDQUFHLENBQUM7TUFBOUNhLFdBQVcsR0FBQUosSUFBQSxDQUFYSSxXQUFXO0lBQ2xCQyxNQUFNLENBQUNELFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUNFLFdBQVcsRUFBRTtFQUNyRCxDQUFDLENBQUM7RUFFRlAsRUFBRSxDQUFDLHFFQUFxRSxFQUFFLFlBQUs7SUFFN0UsSUFBQVEsS0FBQSxHQUFzQixJQUFBdEIsY0FBQSxDQUFBZ0IsTUFBTSxFQUFDLElBQUF2QixXQUFBLENBQUF3QixHQUFBLEVBQUNoQixFQUFBLENBQUFpQixJQUFJLEVBQUEvQixNQUFBLENBQUFDLE1BQUEsS0FBS2tCLFNBQVMsQ0FBQyxDQUFHLENBQUM7TUFBOUNhLFdBQVcsR0FBQUcsS0FBQSxDQUFYSCxXQUFXO0lBR2xCbkIsY0FBQSxDQUFBdUIsU0FBUyxDQUFDQyxLQUFLLENBQUNMLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBRzlDQyxNQUFNLENBQUNqQixVQUFVLENBQUMsQ0FBQ3NCLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUMzQ0wsTUFBTSxDQUFDZixjQUFjLENBQUMsQ0FBQ29CLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUNqRCxDQUFDLENBQUM7QUF1QkosQ0FBQyxDQUFDIn0=