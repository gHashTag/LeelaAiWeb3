e695377351e59bda863d2858b53d50e8
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ZoomOutUp = exports.ZoomOutRotate = exports.ZoomOutRight = exports.ZoomOutLeft = exports.ZoomOutEasyUp = exports.ZoomOutEasyDown = exports.ZoomOutDown = exports.ZoomOut = exports.ZoomInUp = exports.ZoomInRotate = exports.ZoomInRight = exports.ZoomInLeft = exports.ZoomInEasyUp = exports.ZoomInEasyDown = exports.ZoomInDown = exports.ZoomIn = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _animationBuilder = require("../animationBuilder");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var ZoomIn = function (_ComplexAnimationBuil) {
  (0, _inherits2.default)(ZoomIn, _ComplexAnimationBuil);
  var _super = _createSuper(ZoomIn);
  function ZoomIn() {
    var _this;
    (0, _classCallCheck2.default)(this, ZoomIn);
    _this = _super.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "build", function () {
      var delayFunction = _this.getDelayFunction();
      var _this$getAnimationAnd = _this.getAnimationAndConfig(),
        _this$getAnimationAnd2 = (0, _slicedToArray2.default)(_this$getAnimationAnd, 2),
        animation = _this$getAnimationAnd2[0],
        config = _this$getAnimationAnd2[1];
      var delay = _this.getDelay();
      var callback = _this.callbackV;
      var initialValues = _this.initialValues;
      return function () {
        'worklet';

        return {
          animations: {
            transform: [{
              scale: delayFunction(delay, animation(1, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              scale: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this;
  }
  (0, _createClass2.default)(ZoomIn, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomIn();
    }
  }]);
  return ZoomIn;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomIn = ZoomIn;
var ZoomInRotate = function (_ComplexAnimationBuil2) {
  (0, _inherits2.default)(ZoomInRotate, _ComplexAnimationBuil2);
  var _super2 = _createSuper(ZoomInRotate);
  function ZoomInRotate() {
    var _this2;
    (0, _classCallCheck2.default)(this, ZoomInRotate);
    _this2 = _super2.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this2), "build", function () {
      var delayFunction = _this2.getDelayFunction();
      var _this2$getAnimationAn = _this2.getAnimationAndConfig(),
        _this2$getAnimationAn2 = (0, _slicedToArray2.default)(_this2$getAnimationAn, 2),
        animation = _this2$getAnimationAn2[0],
        config = _this2$getAnimationAn2[1];
      var delay = _this2.getDelay();
      var rotate = _this2.rotateV ? _this2.rotateV : '0.3';
      var callback = _this2.callbackV;
      var initialValues = _this2.initialValues;
      return function () {
        'worklet';

        return {
          animations: {
            transform: [{
              scale: delayFunction(delay, animation(1, config))
            }, {
              rotate: delayFunction(delay, animation(0, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              scale: 0
            }, {
              rotate: rotate
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this2;
  }
  (0, _createClass2.default)(ZoomInRotate, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomInRotate();
    }
  }]);
  return ZoomInRotate;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomInRotate = ZoomInRotate;
var ZoomInLeft = function (_ComplexAnimationBuil3) {
  (0, _inherits2.default)(ZoomInLeft, _ComplexAnimationBuil3);
  var _super3 = _createSuper(ZoomInLeft);
  function ZoomInLeft() {
    var _this3;
    (0, _classCallCheck2.default)(this, ZoomInLeft);
    _this3 = _super3.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this3), "build", function () {
      var delayFunction = _this3.getDelayFunction();
      var _this3$getAnimationAn = _this3.getAnimationAndConfig(),
        _this3$getAnimationAn2 = (0, _slicedToArray2.default)(_this3$getAnimationAn, 2),
        animation = _this3$getAnimationAn2[0],
        config = _this3$getAnimationAn2[1];
      var delay = _this3.getDelay();
      var callback = _this3.callbackV;
      var initialValues = _this3.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateX: delayFunction(delay, animation(0, config))
            }, {
              scale: delayFunction(delay, animation(1, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateX: -values.windowWidth
            }, {
              scale: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this3;
  }
  (0, _createClass2.default)(ZoomInLeft, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomInLeft();
    }
  }]);
  return ZoomInLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomInLeft = ZoomInLeft;
var ZoomInRight = function (_ComplexAnimationBuil4) {
  (0, _inherits2.default)(ZoomInRight, _ComplexAnimationBuil4);
  var _super4 = _createSuper(ZoomInRight);
  function ZoomInRight() {
    var _this4;
    (0, _classCallCheck2.default)(this, ZoomInRight);
    _this4 = _super4.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this4), "build", function () {
      var delayFunction = _this4.getDelayFunction();
      var _this4$getAnimationAn = _this4.getAnimationAndConfig(),
        _this4$getAnimationAn2 = (0, _slicedToArray2.default)(_this4$getAnimationAn, 2),
        animation = _this4$getAnimationAn2[0],
        config = _this4$getAnimationAn2[1];
      var delay = _this4.getDelay();
      var callback = _this4.callbackV;
      var initialValues = _this4.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateX: delayFunction(delay, animation(0, config))
            }, {
              scale: delayFunction(delay, animation(1, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateX: values.windowWidth
            }, {
              scale: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this4;
  }
  (0, _createClass2.default)(ZoomInRight, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomInRight();
    }
  }]);
  return ZoomInRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomInRight = ZoomInRight;
var ZoomInUp = function (_ComplexAnimationBuil5) {
  (0, _inherits2.default)(ZoomInUp, _ComplexAnimationBuil5);
  var _super5 = _createSuper(ZoomInUp);
  function ZoomInUp() {
    var _this5;
    (0, _classCallCheck2.default)(this, ZoomInUp);
    _this5 = _super5.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this5), "build", function () {
      var delayFunction = _this5.getDelayFunction();
      var _this5$getAnimationAn = _this5.getAnimationAndConfig(),
        _this5$getAnimationAn2 = (0, _slicedToArray2.default)(_this5$getAnimationAn, 2),
        animation = _this5$getAnimationAn2[0],
        config = _this5$getAnimationAn2[1];
      var delay = _this5.getDelay();
      var callback = _this5.callbackV;
      var initialValues = _this5.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateY: delayFunction(delay, animation(0, config))
            }, {
              scale: delayFunction(delay, animation(1, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateY: -values.windowHeight
            }, {
              scale: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this5;
  }
  (0, _createClass2.default)(ZoomInUp, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomInUp();
    }
  }]);
  return ZoomInUp;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomInUp = ZoomInUp;
var ZoomInDown = function (_ComplexAnimationBuil6) {
  (0, _inherits2.default)(ZoomInDown, _ComplexAnimationBuil6);
  var _super6 = _createSuper(ZoomInDown);
  function ZoomInDown() {
    var _this6;
    (0, _classCallCheck2.default)(this, ZoomInDown);
    _this6 = _super6.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this6), "build", function () {
      var delayFunction = _this6.getDelayFunction();
      var _this6$getAnimationAn = _this6.getAnimationAndConfig(),
        _this6$getAnimationAn2 = (0, _slicedToArray2.default)(_this6$getAnimationAn, 2),
        animation = _this6$getAnimationAn2[0],
        config = _this6$getAnimationAn2[1];
      var delay = _this6.getDelay();
      var callback = _this6.callbackV;
      var initialValues = _this6.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateY: delayFunction(delay, animation(0, config))
            }, {
              scale: delayFunction(delay, animation(1, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateY: values.windowHeight
            }, {
              scale: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this6;
  }
  (0, _createClass2.default)(ZoomInDown, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomInDown();
    }
  }]);
  return ZoomInDown;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomInDown = ZoomInDown;
var ZoomInEasyUp = function (_ComplexAnimationBuil7) {
  (0, _inherits2.default)(ZoomInEasyUp, _ComplexAnimationBuil7);
  var _super7 = _createSuper(ZoomInEasyUp);
  function ZoomInEasyUp() {
    var _this7;
    (0, _classCallCheck2.default)(this, ZoomInEasyUp);
    _this7 = _super7.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this7), "build", function () {
      var delayFunction = _this7.getDelayFunction();
      var _this7$getAnimationAn = _this7.getAnimationAndConfig(),
        _this7$getAnimationAn2 = (0, _slicedToArray2.default)(_this7$getAnimationAn, 2),
        animation = _this7$getAnimationAn2[0],
        config = _this7$getAnimationAn2[1];
      var delay = _this7.getDelay();
      var callback = _this7.callbackV;
      var initialValues = _this7.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateY: delayFunction(delay, animation(0, config))
            }, {
              scale: delayFunction(delay, animation(1, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateY: -values.targetHeight
            }, {
              scale: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this7;
  }
  (0, _createClass2.default)(ZoomInEasyUp, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomInEasyUp();
    }
  }]);
  return ZoomInEasyUp;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomInEasyUp = ZoomInEasyUp;
var ZoomInEasyDown = function (_ComplexAnimationBuil8) {
  (0, _inherits2.default)(ZoomInEasyDown, _ComplexAnimationBuil8);
  var _super8 = _createSuper(ZoomInEasyDown);
  function ZoomInEasyDown() {
    var _this8;
    (0, _classCallCheck2.default)(this, ZoomInEasyDown);
    _this8 = _super8.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this8), "build", function () {
      var delayFunction = _this8.getDelayFunction();
      var _this8$getAnimationAn = _this8.getAnimationAndConfig(),
        _this8$getAnimationAn2 = (0, _slicedToArray2.default)(_this8$getAnimationAn, 2),
        animation = _this8$getAnimationAn2[0],
        config = _this8$getAnimationAn2[1];
      var delay = _this8.getDelay();
      var callback = _this8.callbackV;
      var initialValues = _this8.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateY: delayFunction(delay, animation(0, config))
            }, {
              scale: delayFunction(delay, animation(1, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateY: values.targetHeight
            }, {
              scale: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this8;
  }
  (0, _createClass2.default)(ZoomInEasyDown, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomInEasyDown();
    }
  }]);
  return ZoomInEasyDown;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomInEasyDown = ZoomInEasyDown;
var ZoomOut = function (_ComplexAnimationBuil9) {
  (0, _inherits2.default)(ZoomOut, _ComplexAnimationBuil9);
  var _super9 = _createSuper(ZoomOut);
  function ZoomOut() {
    var _this9;
    (0, _classCallCheck2.default)(this, ZoomOut);
    _this9 = _super9.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this9), "build", function () {
      var delayFunction = _this9.getDelayFunction();
      var _this9$getAnimationAn = _this9.getAnimationAndConfig(),
        _this9$getAnimationAn2 = (0, _slicedToArray2.default)(_this9$getAnimationAn, 2),
        animation = _this9$getAnimationAn2[0],
        config = _this9$getAnimationAn2[1];
      var delay = _this9.getDelay();
      var callback = _this9.callbackV;
      var initialValues = _this9.initialValues;
      return function () {
        'worklet';

        return {
          animations: {
            transform: [{
              scale: delayFunction(delay, animation(0, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              scale: 1
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this9;
  }
  (0, _createClass2.default)(ZoomOut, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomOut();
    }
  }]);
  return ZoomOut;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomOut = ZoomOut;
var ZoomOutRotate = function (_ComplexAnimationBuil10) {
  (0, _inherits2.default)(ZoomOutRotate, _ComplexAnimationBuil10);
  var _super10 = _createSuper(ZoomOutRotate);
  function ZoomOutRotate() {
    var _this10;
    (0, _classCallCheck2.default)(this, ZoomOutRotate);
    _this10 = _super10.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this10), "build", function () {
      var delayFunction = _this10.getDelayFunction();
      var _this10$getAnimationA = _this10.getAnimationAndConfig(),
        _this10$getAnimationA2 = (0, _slicedToArray2.default)(_this10$getAnimationA, 2),
        animation = _this10$getAnimationA2[0],
        config = _this10$getAnimationA2[1];
      var delay = _this10.getDelay();
      var rotate = _this10.rotateV ? _this10.rotateV : '0.3';
      var callback = _this10.callbackV;
      var initialValues = _this10.initialValues;
      return function () {
        'worklet';

        return {
          animations: {
            transform: [{
              scale: delayFunction(delay, animation(0, config))
            }, {
              rotate: delayFunction(delay, animation(rotate, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              scale: 1
            }, {
              rotate: '0'
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this10;
  }
  (0, _createClass2.default)(ZoomOutRotate, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomOutRotate();
    }
  }]);
  return ZoomOutRotate;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomOutRotate = ZoomOutRotate;
var ZoomOutLeft = function (_ComplexAnimationBuil11) {
  (0, _inherits2.default)(ZoomOutLeft, _ComplexAnimationBuil11);
  var _super11 = _createSuper(ZoomOutLeft);
  function ZoomOutLeft() {
    var _this11;
    (0, _classCallCheck2.default)(this, ZoomOutLeft);
    _this11 = _super11.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this11), "build", function () {
      var delayFunction = _this11.getDelayFunction();
      var _this11$getAnimationA = _this11.getAnimationAndConfig(),
        _this11$getAnimationA2 = (0, _slicedToArray2.default)(_this11$getAnimationA, 2),
        animation = _this11$getAnimationA2[0],
        config = _this11$getAnimationA2[1];
      var delay = _this11.getDelay();
      var callback = _this11.callbackV;
      var initialValues = _this11.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateX: delayFunction(delay, animation(-values.windowWidth, config))
            }, {
              scale: delayFunction(delay, animation(0, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateX: 0
            }, {
              scale: 1
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this11;
  }
  (0, _createClass2.default)(ZoomOutLeft, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomOutLeft();
    }
  }]);
  return ZoomOutLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomOutLeft = ZoomOutLeft;
var ZoomOutRight = function (_ComplexAnimationBuil12) {
  (0, _inherits2.default)(ZoomOutRight, _ComplexAnimationBuil12);
  var _super12 = _createSuper(ZoomOutRight);
  function ZoomOutRight() {
    var _this12;
    (0, _classCallCheck2.default)(this, ZoomOutRight);
    _this12 = _super12.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this12), "build", function () {
      var delayFunction = _this12.getDelayFunction();
      var _this12$getAnimationA = _this12.getAnimationAndConfig(),
        _this12$getAnimationA2 = (0, _slicedToArray2.default)(_this12$getAnimationA, 2),
        animation = _this12$getAnimationA2[0],
        config = _this12$getAnimationA2[1];
      var delay = _this12.getDelay();
      var callback = _this12.callbackV;
      var initialValues = _this12.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateX: delayFunction(delay, animation(values.windowWidth, config))
            }, {
              scale: delayFunction(delay, animation(0, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateX: 0
            }, {
              scale: 1
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this12;
  }
  (0, _createClass2.default)(ZoomOutRight, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomOutRight();
    }
  }]);
  return ZoomOutRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomOutRight = ZoomOutRight;
var ZoomOutUp = function (_ComplexAnimationBuil13) {
  (0, _inherits2.default)(ZoomOutUp, _ComplexAnimationBuil13);
  var _super13 = _createSuper(ZoomOutUp);
  function ZoomOutUp() {
    var _this13;
    (0, _classCallCheck2.default)(this, ZoomOutUp);
    _this13 = _super13.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this13), "build", function () {
      var delayFunction = _this13.getDelayFunction();
      var _this13$getAnimationA = _this13.getAnimationAndConfig(),
        _this13$getAnimationA2 = (0, _slicedToArray2.default)(_this13$getAnimationA, 2),
        animation = _this13$getAnimationA2[0],
        config = _this13$getAnimationA2[1];
      var delay = _this13.getDelay();
      var callback = _this13.callbackV;
      var initialValues = _this13.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateY: delayFunction(delay, animation(-values.windowHeight, config))
            }, {
              scale: delayFunction(delay, animation(0, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateY: 0
            }, {
              scale: 1
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this13;
  }
  (0, _createClass2.default)(ZoomOutUp, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomOutUp();
    }
  }]);
  return ZoomOutUp;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomOutUp = ZoomOutUp;
var ZoomOutDown = function (_ComplexAnimationBuil14) {
  (0, _inherits2.default)(ZoomOutDown, _ComplexAnimationBuil14);
  var _super14 = _createSuper(ZoomOutDown);
  function ZoomOutDown() {
    var _this14;
    (0, _classCallCheck2.default)(this, ZoomOutDown);
    _this14 = _super14.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this14), "build", function () {
      var delayFunction = _this14.getDelayFunction();
      var _this14$getAnimationA = _this14.getAnimationAndConfig(),
        _this14$getAnimationA2 = (0, _slicedToArray2.default)(_this14$getAnimationA, 2),
        animation = _this14$getAnimationA2[0],
        config = _this14$getAnimationA2[1];
      var delay = _this14.getDelay();
      var callback = _this14.callbackV;
      var initialValues = _this14.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateY: delayFunction(delay, animation(values.windowHeight, config))
            }, {
              scale: delayFunction(delay, animation(0, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateY: 0
            }, {
              scale: 1
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this14;
  }
  (0, _createClass2.default)(ZoomOutDown, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomOutDown();
    }
  }]);
  return ZoomOutDown;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomOutDown = ZoomOutDown;
var ZoomOutEasyUp = function (_ComplexAnimationBuil15) {
  (0, _inherits2.default)(ZoomOutEasyUp, _ComplexAnimationBuil15);
  var _super15 = _createSuper(ZoomOutEasyUp);
  function ZoomOutEasyUp() {
    var _this15;
    (0, _classCallCheck2.default)(this, ZoomOutEasyUp);
    _this15 = _super15.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this15), "build", function () {
      var delayFunction = _this15.getDelayFunction();
      var _this15$getAnimationA = _this15.getAnimationAndConfig(),
        _this15$getAnimationA2 = (0, _slicedToArray2.default)(_this15$getAnimationA, 2),
        animation = _this15$getAnimationA2[0],
        config = _this15$getAnimationA2[1];
      var delay = _this15.getDelay();
      var callback = _this15.callbackV;
      var initialValues = _this15.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateY: delayFunction(delay, animation(-values.currentHeight, config))
            }, {
              scale: delayFunction(delay, animation(0, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateY: 0
            }, {
              scale: 1
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this15;
  }
  (0, _createClass2.default)(ZoomOutEasyUp, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomOutEasyUp();
    }
  }]);
  return ZoomOutEasyUp;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomOutEasyUp = ZoomOutEasyUp;
var ZoomOutEasyDown = function (_ComplexAnimationBuil16) {
  (0, _inherits2.default)(ZoomOutEasyDown, _ComplexAnimationBuil16);
  var _super16 = _createSuper(ZoomOutEasyDown);
  function ZoomOutEasyDown() {
    var _this16;
    (0, _classCallCheck2.default)(this, ZoomOutEasyDown);
    _this16 = _super16.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this16), "build", function () {
      var delayFunction = _this16.getDelayFunction();
      var _this16$getAnimationA = _this16.getAnimationAndConfig(),
        _this16$getAnimationA2 = (0, _slicedToArray2.default)(_this16$getAnimationA, 2),
        animation = _this16$getAnimationA2[0],
        config = _this16$getAnimationA2[1];
      var delay = _this16.getDelay();
      var callback = _this16.callbackV;
      var initialValues = _this16.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateY: delayFunction(delay, animation(values.currentHeight, config))
            }, {
              scale: delayFunction(delay, animation(0, config))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateY: 0
            }, {
              scale: 1
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this16;
  }
  (0, _createClass2.default)(ZoomOutEasyDown, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new ZoomOutEasyDown();
    }
  }]);
  return ZoomOutEasyDown;
}(_animationBuilder.ComplexAnimationBuilder);
exports.ZoomOutEasyDown = ZoomOutEasyDown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,