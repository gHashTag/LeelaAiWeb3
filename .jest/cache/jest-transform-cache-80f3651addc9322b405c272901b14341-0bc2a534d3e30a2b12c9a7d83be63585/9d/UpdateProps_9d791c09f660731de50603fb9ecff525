4869604cbf2fc5079e8464569a20871c
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updatePropsJestWrapper = exports.updateProps = exports.default = exports.colorProps = exports.ColorProperties = void 0;
var _Colors = require("./Colors");
var _core = require("./core");
var _jsReanimated = require("./js-reanimated");
var _PlatformChecker = require("./PlatformChecker");
var _threads = require("./threads");
var colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];
exports.colorProps = colorProps;
var ColorProperties = (0, _core.makeShareable)(colorProps);
exports.ColorProperties = ColorProperties;
var updateProps;
exports.updateProps = updateProps;
if ((0, _PlatformChecker.shouldBeUseWeb)()) {
  exports.updateProps = updateProps = function updateProps(_, updates, maybeViewRef) {
    'worklet';

    if (maybeViewRef) {
      maybeViewRef.items.forEach(function (item, _) {
        (0, _jsReanimated._updatePropsJS)(updates, item);
      });
    }
  };
} else {
  exports.updateProps = updateProps = function updateProps(viewDescriptors, updates) {
    'worklet';

    for (var key in updates) {
      if (ColorProperties.indexOf(key) !== -1) {
        updates[key] = (0, _Colors.processColor)(updates[key]);
      }
    }
    global.UpdatePropsManager.update(viewDescriptors, updates);
  };
}
var updatePropsJestWrapper = function updatePropsJestWrapper(viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) {
  adapters.forEach(function (adapter) {
    adapter(updates);
  });
  animatedStyle.current.value = Object.assign({}, animatedStyle.current.value, updates);
  updateProps(viewDescriptors, updates, maybeViewRef);
};
exports.updatePropsJestWrapper = updatePropsJestWrapper;
var _default = updateProps;
exports.default = _default;
var createUpdatePropsManager = global._IS_FABRIC ? function () {
  'worklet';
  var operations = [];
  return {
    update: function update(viewDescriptors, updates) {
      var _this = this;
      viewDescriptors.value.forEach(function (viewDescriptor) {
        operations.push({
          shadowNodeWrapper: viewDescriptor.shadowNodeWrapper,
          updates: updates
        });
        if (operations.length === 1) {
          queueMicrotask(_this.flush);
        }
      });
    },
    flush: function flush() {
      _updatePropsFabric(operations);
      operations.length = 0;
    }
  };
} : function () {
  'worklet';
  var operations = [];
  return {
    update: function update(viewDescriptors, updates) {
      var _this2 = this;
      viewDescriptors.value.forEach(function (viewDescriptor) {
        operations.push({
          tag: viewDescriptor.tag,
          name: viewDescriptor.name || 'RCTView',
          updates: updates
        });
        if (operations.length === 1) {
          queueMicrotask(_this2.flush);
        }
      });
    },
    flush: function flush() {
      _updatePropsPaper(operations);
      operations.length = 0;
    }
  };
};
(0, _threads.runOnUIImmediately)(function () {
  'worklet';

  global.UpdatePropsManager = createUpdatePropsManager();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,