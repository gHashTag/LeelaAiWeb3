0a339d1ce2bdb41b5db6913187b4fd9b
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setGestureState = exports.scrollTo = exports.measure = exports.dispatchCommand = void 0;
var _PlatformChecker = require("./PlatformChecker");
var IS_NATIVE = !(0, _PlatformChecker.shouldBeUseWeb)();
var measure;
exports.measure = measure;
if ((0, _PlatformChecker.isWeb)()) {
  exports.measure = measure = function measure(animatedRef) {
    var element = animatedRef();
    var viewportOffset = element.getBoundingClientRect();
    return {
      width: element.offsetWidth,
      height: element.offsetHeight,
      x: element.offsetLeft,
      y: element.offsetTop,
      pageX: viewportOffset.left,
      pageY: viewportOffset.top
    };
  };
} else if ((0, _PlatformChecker.isChromeDebugger)()) {
  exports.measure = measure = function measure() {
    console.warn('[Reanimated] measure() cannot be used with Chrome Debugger.');
    return null;
  };
} else if ((0, _PlatformChecker.isJest)()) {
  exports.measure = measure = function measure() {
    console.warn('[Reanimated] measure() cannot be used with Jest.');
    return null;
  };
} else if (IS_NATIVE) {
  exports.measure = measure = function measure(animatedRef) {
    'worklet';

    if (!_WORKLET) {
      return null;
    }
    var viewTag = animatedRef();
    if (viewTag === -1) {
      console.warn(`[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);
      return null;
    }
    var measured = _IS_FABRIC ? _measureFabric(viewTag) : _measurePaper(viewTag);
    if (measured === null) {
      console.warn(`[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \`LayoutMetrics\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);
      return null;
    } else if (measured.x === -1234567) {
      console.warn(`[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`);
      return null;
    } else if (isNaN(measured.x)) {
      console.warn(`[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \`collapsable={false}\` on this component.`);
      return null;
    } else {
      return measured;
    }
  };
} else {
  exports.measure = measure = function measure() {
    console.warn('[Reanimated] measure() is not supported on this configuration.');
    return null;
  };
}
var dispatchCommand;
exports.dispatchCommand = dispatchCommand;
if (IS_NATIVE && global._IS_FABRIC) {
  exports.dispatchCommand = dispatchCommand = function dispatchCommand(animatedRef, commandName) {
    'worklet';

    var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    if (!_WORKLET) {
      return;
    }
    var shadowNodeWrapper = animatedRef();
    _dispatchCommandFabric(shadowNodeWrapper, commandName, args);
  };
} else if (IS_NATIVE) {
  exports.dispatchCommand = dispatchCommand = function dispatchCommand(animatedRef, commandName) {
    'worklet';

    var args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    if (!_WORKLET) {
      return;
    }
    var viewTag = animatedRef();
    _dispatchCommandPaper(viewTag, commandName, args);
  };
} else if ((0, _PlatformChecker.isWeb)()) {
  exports.dispatchCommand = dispatchCommand = function dispatchCommand() {
    console.warn('[Reanimated] dispatchCommand() is not supported on web.');
  };
} else if ((0, _PlatformChecker.isChromeDebugger)()) {
  exports.dispatchCommand = dispatchCommand = function dispatchCommand() {
    console.warn('[Reanimated] dispatchCommand() is not supported with Chrome Debugger.');
  };
} else if ((0, _PlatformChecker.isJest)()) {
  exports.dispatchCommand = dispatchCommand = function dispatchCommand() {
    console.warn('[Reanimated] dispatchCommand() is not supported with Jest.');
  };
} else {
  exports.dispatchCommand = dispatchCommand = function dispatchCommand() {
    console.warn('[Reanimated] dispatchCommand() is not supported on this configuration.');
  };
}
var scrollTo;
exports.scrollTo = scrollTo;
if ((0, _PlatformChecker.isWeb)()) {
  exports.scrollTo = scrollTo = function scrollTo(animatedRef, x, y, animated) {
    'worklet';

    var element = animatedRef();
    element.scrollTo({
      x: x,
      y: y,
      animated: animated
    });
  };
} else if (IS_NATIVE && global._IS_FABRIC) {
  exports.scrollTo = scrollTo = function scrollTo(animatedRef, x, y, animated) {
    'worklet';

    dispatchCommand(animatedRef, 'scrollTo', [x, y, animated]);
  };
} else if (IS_NATIVE) {
  exports.scrollTo = scrollTo = function scrollTo(animatedRef, x, y, animated) {
    'worklet';

    if (!_WORKLET) {
      return;
    }
    var viewTag = animatedRef();
    _scrollToPaper(viewTag, x, y, animated);
  };
} else if ((0, _PlatformChecker.isChromeDebugger)()) {
  exports.scrollTo = scrollTo = function scrollTo() {
    console.warn('[Reanimated] scrollTo() is not supported with Chrome Debugger.');
  };
} else if ((0, _PlatformChecker.isJest)()) {
  exports.scrollTo = scrollTo = function scrollTo() {
    console.warn('[Reanimated] scrollTo() is not supported with Jest.');
  };
} else {
  exports.scrollTo = scrollTo = function scrollTo() {
    console.warn('[Reanimated] scrollTo() is not supported on this configuration.');
  };
}
var setGestureState;
exports.setGestureState = setGestureState;
if (IS_NATIVE) {
  exports.setGestureState = setGestureState = function setGestureState(handlerTag, newState) {
    'worklet';

    if (!_WORKLET) {
      console.warn('[Reanimated] You can not use setGestureState in non-worklet function.');
      return;
    }
    _setGestureState(handlerTag, newState);
  };
} else if ((0, _PlatformChecker.isWeb)()) {
  exports.setGestureState = setGestureState = function setGestureState() {
    console.warn('[Reanimated] setGestureState() is not available on web.');
  };
} else if ((0, _PlatformChecker.isChromeDebugger)()) {
  exports.setGestureState = setGestureState = function setGestureState() {
    console.warn('[Reanimated] setGestureState() cannot be used with Chrome Debugger.');
  };
} else if ((0, _PlatformChecker.isJest)()) {
  exports.setGestureState = setGestureState = function setGestureState() {
    console.warn('[Reanimated] setGestureState() cannot be used with Jest.');
  };
} else {
  exports.setGestureState = setGestureState = function setGestureState() {
    console.warn('[Reanimated] setGestureState() is not supported on this configuration.');
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,