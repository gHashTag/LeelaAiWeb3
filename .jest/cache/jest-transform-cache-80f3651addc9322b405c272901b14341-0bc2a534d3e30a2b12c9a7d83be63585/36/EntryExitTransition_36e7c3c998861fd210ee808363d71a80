4bf2219e3a4fb0ef82aa175b28a19d85
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EntryExitTransition = void 0;
exports.combineTransition = combineTransition;
var _defineProperty3 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _animationBuilder = require("../animationBuilder");
var _animation = require("../../animation");
var _Fade = require("../defaultAnimations/Fade");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var EntryExitTransition = function (_BaseAnimationBuilder) {
  (0, _inherits2.default)(EntryExitTransition, _BaseAnimationBuilder);
  var _super = _createSuper(EntryExitTransition);
  function EntryExitTransition() {
    var _this;
    (0, _classCallCheck2.default)(this, EntryExitTransition);
    _this = _super.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "enteringV", _Fade.FadeIn);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "exitingV", _Fade.FadeOut);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "build", function () {
      var delayFunction = _this.getDelayFunction();
      var callback = _this.callbackV;
      var delay = _this.getDelay();
      var enteringAnimation = _this.enteringV.build();
      var exitingAnimation = _this.exitingV.build();
      var exitingDuration = _this.exitingV.getDuration();
      return function (values) {
        'worklet';

        var _exitingValues$initia, _enteringValues$anima2;
        var enteringValues = enteringAnimation(values);
        var exitingValues = exitingAnimation(values);
        var animations = {
          transform: []
        };
        for (var prop of Object.keys(exitingValues.animations)) {
          if (prop === 'transform') {
            var _exitingValues$animat;
            (_exitingValues$animat = exitingValues.animations[prop]) === null || _exitingValues$animat === void 0 ? void 0 : _exitingValues$animat.forEach(function (value, index) {
              for (var transformProp of Object.keys(value)) {
                var _animations$transform;
                (_animations$transform = animations.transform) === null || _animations$transform === void 0 ? void 0 : _animations$transform.push((0, _defineProperty3.default)({}, transformProp, delayFunction(delay, (0, _animation.withSequence)(value[transformProp], (0, _animation.withTiming)(exitingValues.initialValues.transform ? exitingValues.initialValues.transform[index][transformProp] : 0, {
                  duration: 0
                })))));
              }
            });
          } else {
            var sequence = enteringValues.animations[prop] !== undefined ? [exitingValues.animations[prop], (0, _animation.withTiming)(enteringValues.initialValues[prop], {
              duration: 0
            }), enteringValues.animations[prop]] : [exitingValues.animations[prop], (0, _animation.withTiming)(Object.keys(values).includes(prop) ? values[prop] : exitingValues.initialValues[prop], {
              duration: 0
            })];
            animations[prop] = delayFunction(delay, _animation.withSequence.apply(void 0, sequence));
          }
        }
        for (var _prop of Object.keys(enteringValues.animations)) {
          if (_prop === 'transform') {
            var _enteringValues$anima;
            (_enteringValues$anima = enteringValues.animations[_prop]) === null || _enteringValues$anima === void 0 ? void 0 : _enteringValues$anima.forEach(function (value, index) {
              for (var transformProp of Object.keys(value)) {
                var _animations$transform2;
                (_animations$transform2 = animations.transform) === null || _animations$transform2 === void 0 ? void 0 : _animations$transform2.push((0, _defineProperty3.default)({}, transformProp, delayFunction(delay + exitingDuration, (0, _animation.withSequence)((0, _animation.withTiming)(enteringValues.initialValues.transform ? enteringValues.initialValues.transform[index][transformProp] : 0, {
                  duration: exitingDuration
                }), value[transformProp]))));
              }
            });
          } else if (animations[_prop] !== undefined) {
            continue;
          } else {
            animations[_prop] = delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(enteringValues.initialValues[_prop], {
              duration: 0
            }), enteringValues.animations[_prop]));
          }
        }
        var mergedTransform = ((_exitingValues$initia = exitingValues.initialValues.transform) != null ? _exitingValues$initia : []).concat(((_enteringValues$anima2 = enteringValues.animations.transform) != null ? _enteringValues$anima2 : []).map(function (value) {
          var objectKeys = Object.keys(value);
          if ((objectKeys === null || objectKeys === void 0 ? void 0 : objectKeys.length) < 1) {
            console.error(`[Reanimated]: \${value} is not a valid Transform object`);
            return value;
          }
          var transformProp = objectKeys[0];
          var current = value[transformProp].current;
          if (typeof current === 'string') {
            if (current.includes('deg')) return (0, _defineProperty3.default)({}, transformProp, '0deg');else return (0, _defineProperty3.default)({}, transformProp, '0');
          } else if (transformProp.includes('translate')) {
            return (0, _defineProperty3.default)({}, transformProp, 0);
          } else {
            return (0, _defineProperty3.default)({}, transformProp, 1);
          }
        }));
        return {
          initialValues: Object.assign({}, exitingValues.initialValues, {
            originX: values.currentOriginX,
            originY: values.currentOriginY,
            width: values.currentWidth,
            height: values.currentHeight,
            transform: mergedTransform
          }),
          animations: Object.assign({
            originX: delayFunction(delay + exitingDuration, (0, _animation.withTiming)(values.targetOriginX, {
              duration: exitingDuration
            })),
            originY: delayFunction(delay + exitingDuration, (0, _animation.withTiming)(values.targetOriginY, {
              duration: exitingDuration
            })),
            width: delayFunction(delay + exitingDuration, (0, _animation.withTiming)(values.targetWidth, {
              duration: exitingDuration
            })),
            height: delayFunction(delay + exitingDuration, (0, _animation.withTiming)(values.targetHeight, {
              duration: exitingDuration
            }))
          }, animations),
          callback: callback
        };
      };
    });
    return _this;
  }
  (0, _createClass2.default)(EntryExitTransition, [{
    key: "entering",
    value: function entering(animation) {
      this.enteringV = animation;
      return this;
    }
  }, {
    key: "exiting",
    value: function exiting(animation) {
      this.exitingV = animation;
      return this;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new EntryExitTransition();
    }
  }, {
    key: "entering",
    value: function entering(animation) {
      var instance = this.createInstance();
      return instance.entering(animation);
    }
  }, {
    key: "exiting",
    value: function exiting(animation) {
      var instance = this.createInstance();
      return instance.exiting(animation);
    }
  }]);
  return EntryExitTransition;
}(_animationBuilder.BaseAnimationBuilder);
exports.EntryExitTransition = EntryExitTransition;
function combineTransition(exiting, entering) {
  return EntryExitTransition.entering(entering).exiting(exiting);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,