938c8f404c023e04beca7fbafec03cf6
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Easing = void 0;
var _Bezier = require("./Bezier");
function linear(t) {
  'worklet';

  return t;
}
function ease(t) {
  'worklet';

  return (0, _Bezier.Bezier)(0.42, 0, 1, 1)(t);
}
function quad(t) {
  'worklet';

  return t * t;
}
function cubic(t) {
  'worklet';

  return t * t * t;
}
function poly(n) {
  'worklet';

  return function (t) {
    'worklet';

    return Math.pow(t, n);
  };
}
function sin(t) {
  'worklet';

  return 1 - Math.cos(t * Math.PI / 2);
}
function circle(t) {
  'worklet';

  return 1 - Math.sqrt(1 - t * t);
}
function exp(t) {
  'worklet';

  return Math.pow(2, 10 * (t - 1));
}
function elastic() {
  'worklet';

  var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  var p = bounciness * Math.PI;
  return function (t) {
    'worklet';

    return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
  };
}
function back() {
  'worklet';

  var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1.70158;
  return function (t) {
    'worklet';

    return t * t * ((s + 1) * t - s);
  };
}
function bounce(t) {
  'worklet';

  if (t < 1 / 2.75) {
    return 7.5625 * t * t;
  }
  if (t < 2 / 2.75) {
    var _t = t - 1.5 / 2.75;
    return 7.5625 * _t * _t + 0.75;
  }
  if (t < 2.5 / 2.75) {
    var _t2 = t - 2.25 / 2.75;
    return 7.5625 * _t2 * _t2 + 0.9375;
  }
  var t2 = t - 2.625 / 2.75;
  return 7.5625 * t2 * t2 + 0.984375;
}
function bezier(x1, y1, x2, y2) {
  'worklet';

  return {
    factory: function factory() {
      'worklet';

      return (0, _Bezier.Bezier)(x1, y1, x2, y2);
    }
  };
}
function bezierFn(x1, y1, x2, y2) {
  'worklet';

  return (0, _Bezier.Bezier)(x1, y1, x2, y2);
}
function in_(easing) {
  'worklet';

  return easing;
}
function out(easing) {
  'worklet';

  return function (t) {
    'worklet';

    return 1 - easing(1 - t);
  };
}
function inOut(easing) {
  'worklet';

  return function (t) {
    'worklet';

    if (t < 0.5) {
      return easing(t * 2) / 2;
    }
    return 1 - easing((1 - t) * 2) / 2;
  };
}
function steps() {
  'worklet';

  var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
  var roundToNextStep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return function (t) {
    'worklet';

    var value = Math.min(Math.max(t, 0), 1) * n;
    if (roundToNextStep) {
      return Math.ceil(value) / n;
    }
    return Math.floor(value) / n;
  };
}
var EasingObject = {
  linear: linear,
  ease: ease,
  quad: quad,
  cubic: cubic,
  poly: poly,
  sin: sin,
  circle: circle,
  exp: exp,
  elastic: elastic,
  back: back,
  bounce: bounce,
  bezier: bezier,
  bezierFn: bezierFn,
  steps: steps,
  in: in_,
  out: out,
  inOut: inOut
};
var Easing = EasingObject;
exports.Easing = Easing;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,