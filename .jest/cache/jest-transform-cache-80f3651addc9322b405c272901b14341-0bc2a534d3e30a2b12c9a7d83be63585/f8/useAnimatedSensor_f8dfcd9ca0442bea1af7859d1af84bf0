c005b580f50c46f341c0e1b9e01f9d37
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAnimatedSensor = useAnimatedSensor;
var _react = require("react");
var _core = require("../core");
var _commonTypes = require("../commonTypes");
var _threads = require("../threads");
function eulerToQuaternion(pitch, roll, yaw) {
  'worklet';

  var c1 = Math.cos(pitch / 2);
  var s1 = Math.sin(pitch / 2);
  var c2 = Math.cos(roll / 2);
  var s2 = Math.sin(roll / 2);
  var c3 = Math.cos(yaw / 2);
  var s3 = Math.sin(yaw / 2);
  return [s1 * c2 * c3 - c1 * s2 * s3, c1 * s2 * c3 + s1 * c2 * s3, c1 * c2 * s3 + s1 * s2 * c3, c1 * c2 * c3 - s1 * s2 * s3];
}
function adjustRotationToInterfaceOrientation(data) {
  'worklet';

  var interfaceOrientation = data.interfaceOrientation,
    pitch = data.pitch,
    roll = data.roll,
    yaw = data.yaw;
  if (interfaceOrientation === 90) {
    data.pitch = roll;
    data.roll = -pitch;
    data.yaw = yaw - Math.PI / 2;
  } else if (interfaceOrientation === 270) {
    data.pitch = -roll;
    data.roll = pitch;
    data.yaw = yaw + Math.PI / 2;
  } else if (interfaceOrientation === 180) {
    data.pitch *= -1;
    data.roll *= -1;
    data.yaw *= -1;
  }
  var q = eulerToQuaternion(data.pitch, data.roll, data.yaw);
  data.qx = q[0];
  data.qy = q[1];
  data.qz = q[2];
  data.qw = q[3];
  return data;
}
function adjustVectorToInterfaceOrientation(data) {
  'worklet';

  var interfaceOrientation = data.interfaceOrientation,
    x = data.x,
    y = data.y;
  if (interfaceOrientation === 90) {
    data.x = -y;
    data.y = x;
  } else if (interfaceOrientation === 270) {
    data.x = y;
    data.y = -x;
  } else if (interfaceOrientation === 180) {
    data.x *= -1;
    data.y *= -1;
  }
  return data;
}
function useAnimatedSensor(sensorType, userConfig) {
  var config = Object.assign({
    interval: 'auto',
    adjustToInterfaceOrientation: true,
    iosReferenceFrame: _commonTypes.IOSReferenceFrame.Auto
  }, userConfig);
  var ref = (0, _react.useRef)({
    sensor: (0, _core.initializeSensor)(sensorType, config),
    unregister: function unregister() {},
    isAvailable: false,
    config: config
  });
  (0, _react.useEffect)(function () {
    var newConfig = Object.assign({}, config, userConfig);
    ref.current.sensor = (0, _core.initializeSensor)(sensorType, newConfig);
    var sensorData = ref.current.sensor;
    var adjustToInterfaceOrientation = ref.current.config.adjustToInterfaceOrientation;
    var id = (0, _core.registerSensor)(sensorType, config, function (data) {
      'worklet';

      if (adjustToInterfaceOrientation) {
        if (sensorType === _commonTypes.SensorType.ROTATION) {
          data = adjustRotationToInterfaceOrientation(data);
        } else {
          data = adjustVectorToInterfaceOrientation(data);
        }
      }
      sensorData.value = data;
      (0, _threads.callMicrotasks)();
    });
    if (id !== -1) {
      ref.current.unregister = function () {
        return (0, _core.unregisterSensor)(id);
      };
      ref.current.isAvailable = true;
    } else {
      ref.current.unregister = function () {};
      ref.current.isAvailable = false;
    }
    return function () {
      ref.current.unregister();
    };
  }, [sensorType, userConfig]);
  return ref.current;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,