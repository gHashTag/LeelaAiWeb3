21747df8f74b4d0769143bfa305d3027
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CurvedTransition = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _animationBuilder = require("../animationBuilder");
var _Easing = require("../../Easing");
var _animation = require("../../animation");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var CurvedTransition = function (_BaseAnimationBuilder) {
  (0, _inherits2.default)(CurvedTransition, _BaseAnimationBuilder);
  var _super = _createSuper(CurvedTransition);
  function CurvedTransition() {
    var _this;
    (0, _classCallCheck2.default)(this, CurvedTransition);
    _this = _super.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "easingXV", _Easing.Easing.in(_Easing.Easing.ease));
    _defineProperty((0, _assertThisInitialized2.default)(_this), "easingYV", _Easing.Easing.out(_Easing.Easing.ease));
    _defineProperty((0, _assertThisInitialized2.default)(_this), "easingWidthV", _Easing.Easing.in(_Easing.Easing.exp));
    _defineProperty((0, _assertThisInitialized2.default)(_this), "easingHeightV", _Easing.Easing.out(_Easing.Easing.exp));
    _defineProperty((0, _assertThisInitialized2.default)(_this), "build", function () {
      var _this$durationV;
      var delayFunction = _this.getDelayFunction();
      var callback = _this.callbackV;
      var delay = _this.getDelay();
      var duration = (_this$durationV = _this.durationV) != null ? _this$durationV : 300;
      var easing = {
        easingX: _this.easingXV,
        easingY: _this.easingYV,
        easingWidth: _this.easingWidthV,
        easingHeight: _this.easingHeightV
      };
      return function (values) {
        'worklet';

        return {
          initialValues: {
            originX: values.currentOriginX,
            originY: values.currentOriginY,
            width: values.currentWidth,
            height: values.currentHeight
          },
          animations: {
            originX: delayFunction(delay, (0, _animation.withTiming)(values.targetOriginX, {
              duration: duration,
              easing: easing.easingX
            })),
            originY: delayFunction(delay, (0, _animation.withTiming)(values.targetOriginY, {
              duration: duration,
              easing: easing.easingY
            })),
            width: delayFunction(delay, (0, _animation.withTiming)(values.targetWidth, {
              duration: duration,
              easing: easing.easingWidth
            })),
            height: delayFunction(delay, (0, _animation.withTiming)(values.targetHeight, {
              duration: duration,
              easing: easing.easingHeight
            }))
          },
          callback: callback
        };
      };
    });
    return _this;
  }
  (0, _createClass2.default)(CurvedTransition, [{
    key: "easingX",
    value: function easingX(easing) {
      this.easingXV = easing;
      return this;
    }
  }, {
    key: "easingY",
    value: function easingY(easing) {
      this.easingYV = easing;
      return this;
    }
  }, {
    key: "easingWidth",
    value: function easingWidth(easing) {
      this.easingWidthV = easing;
      return this;
    }
  }, {
    key: "easingHeight",
    value: function easingHeight(easing) {
      this.easingHeightV = easing;
      return this;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new CurvedTransition();
    }
  }, {
    key: "easingX",
    value: function easingX(easing) {
      var instance = this.createInstance();
      return instance.easingX(easing);
    }
  }, {
    key: "easingY",
    value: function easingY(easing) {
      var instance = this.createInstance();
      return instance.easingY(easing);
    }
  }, {
    key: "easingWidth",
    value: function easingWidth(easing) {
      var instance = this.createInstance();
      return instance.easingWidth(easing);
    }
  }, {
    key: "easingHeight",
    value: function easingHeight(easing) {
      var instance = this.createInstance();
      return instance.easingHeight(easing);
    }
  }]);
  return CurvedTransition;
}(_animationBuilder.BaseAnimationBuilder);
exports.CurvedTransition = CurvedTransition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,