2d1d8a3c007a6ad92d7327e9d666212d
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('react-native/Libraries/Animated/src/components/Animated', function () {
  var _require = require('react-native'),
    View = _require.View;
  return Object.assign({}, jest.requireActual('react-native/Libraries/Animated/src/components/Animated'), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require2 = require("@jest/globals"),
    jest = _require2.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
describe('Dice Component', function () {
  var mockProps = {
    count: 3,
    players: 4,
    disabled: false,
    canGo: true,
    isReported: false,
    updateStep: jest.fn(),
    random: jest.fn()
  };
  it('renders correctly with the provided props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('dice-component')).toBeDefined();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJWaWV3IiwiT2JqZWN0IiwiYXNzaWduIiwiamVzdCIsInJlcXVpcmVBY3R1YWwiLCJjcmVhdGVBbmltYXRlZENvbXBvbmVudCIsImNvbXBvbmVudCIsIl9qc3hSdW50aW1lIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZTIiLCJyZWFjdF8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVhY3RfbmF0aXZlXzEiLCJfMSIsImRlc2NyaWJlIiwibW9ja1Byb3BzIiwiY291bnQiLCJwbGF5ZXJzIiwiZGlzYWJsZWQiLCJjYW5HbyIsImlzUmVwb3J0ZWQiLCJ1cGRhdGVTdGVwIiwiZm4iLCJyYW5kb20iLCJpdCIsIl9yZWYiLCJyZW5kZXIiLCJqc3giLCJEaWNlIiwiZ2V0QnlUZXN0SWQiLCJleHBlY3QiLCJ0b0JlRGVmaW5lZCJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvRGljZS9EaWNlLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHtEaWNlLCBEaWNlUHJvcHN9IGZyb20gJy4vJyAvLyBSZXBsYWNlIHdpdGggdGhlIGFjdHVhbCBwYXRoIHRvIHlvdXIgRGljZSBjb21wb25lbnRcblxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL0FuaW1hdGVkL05hdGl2ZUFuaW1hdGVkSGVscGVyJylcbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbmltYXRlZC9zcmMvY29tcG9uZW50cy9BbmltYXRlZCcsICgpID0+IHtcbiAgY29uc3Qge1ZpZXd9ID0gcmVxdWlyZSgncmVhY3QtbmF0aXZlJylcbiAgcmV0dXJuIHtcbiAgICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoXG4gICAgICAncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbmltYXRlZC9zcmMvY29tcG9uZW50cy9BbmltYXRlZCcsXG4gICAgKSxcbiAgICBjcmVhdGVBbmltYXRlZENvbXBvbmVudDogKGNvbXBvbmVudDogYW55KSA9PiB7XG4gICAgICByZXR1cm4gY29tcG9uZW50XG4gICAgfSxcbiAgfVxufSlcblxuZGVzY3JpYmUoJ0RpY2UgQ29tcG9uZW50JywgKCkgPT4ge1xuICBjb25zdCBtb2NrUHJvcHM6IERpY2VQcm9wcyA9IHtcbiAgICBjb3VudDogMyxcbiAgICBwbGF5ZXJzOiA0LFxuICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICBjYW5HbzogdHJ1ZSxcbiAgICBpc1JlcG9ydGVkOiBmYWxzZSxcbiAgICB1cGRhdGVTdGVwOiBqZXN0LmZuKCksXG4gICAgcmFuZG9tOiBqZXN0LmZuKCksXG4gIH1cblxuICBpdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCB0aGUgcHJvdmlkZWQgcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSAvPilcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpLnRvQmVEZWZpbmVkKClcbiAgfSlcblxuICAvLyAgIGl0KCdjYWxscyB0aGUgcmFuZG9tIGZ1bmN0aW9uIGFuZCB1cGRhdGVTdGVwIG9uIHByZXNzIHdoZW4gbm90IGRpc2FibGVkJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSAvPilcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMucmFuZG9tKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMudXBkYXRlU3RlcCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gIC8vICAgfSlcblxuICAvLyAgIGl0KCdkb2VzIG5vdCBjYWxsIHRoZSByYW5kb20gZnVuY3Rpb24gYW5kIHVwZGF0ZVN0ZXAgb24gcHJlc3Mgd2hlbiBkaXNhYmxlZCcsICgpID0+IHtcbiAgLy8gICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gZGlzYWJsZWQ9e3RydWV9IC8+KVxuICAvLyAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy5yYW5kb20pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy51cGRhdGVTdGVwKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICB9KVxuXG4gIC8vICAgaXQoJ2RvZXMgbm90IGNhbGwgdGhlIHJhbmRvbSBmdW5jdGlvbiBhbmQgdXBkYXRlU3RlcCBvbiBwcmVzcyB3aGVuIGNhbkdvIGlzIGZhbHNlJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSBjYW5Hbz17ZmFsc2V9IC8+KVxuICAvLyAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy5yYW5kb20pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy51cGRhdGVTdGVwKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICB9KVxuXG4gIC8vICAgaXQoJ2RvZXMgbm90IGNhbGwgdGhlIHJhbmRvbSBmdW5jdGlvbiBhbmQgdXBkYXRlU3RlcCBvbiBwcmVzcyB3aGVuIGlzUmVwb3J0ZWQgaXMgdHJ1ZScsICgpID0+IHtcbiAgLy8gICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gaXNSZXBvcnRlZD17dHJ1ZX0gLz4pXG4gIC8vICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnJhbmRvbSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnVwZGF0ZVN0ZXApLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgIH0pXG5cbiAgLy8gQWRkIG1vcmUgdGVzdHMgYmFzZWQgb24geW91ciBjb21wb25lbnQncyBiZWhhdmlvciBhbmQgcmVxdWlyZW1lbnRzXG59KVxuIl0sIm1hcHBpbmdzIjoiOztBQUlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxzREFBc0QsQ0FBQztBQUNqRUQsV0FBQSxHQUFLQyxJQUFJLENBQUMseURBQXlELEVBQUUsWUFBSztFQUN4RSxJQUFBQyxRQUFBLEdBQWVDLE9BQU8sQ0FBQyxjQUFjLENBQUM7SUFBL0JDLElBQUksR0FBQUYsUUFBQSxDQUFKRSxJQUFJO0VBQ1gsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0tDLElBQUksQ0FBQ0MsYUFBYSxDQUNuQix5REFBeUQsQ0FDMUQ7SUFDREMsdUJBQXVCLEVBQUUsU0FBQUEsd0JBQUNDLFNBQWMsRUFBSTtNQUMxQyxPQUFPQSxTQUFTO0lBQ2xCO0VBQUM7QUFFTCxDQUFDLENBQUM7QUFBQSxJQUFBQyxXQUFBLEdBQUFSLE9BQUE7QUFBQSxJQUFBUyxLQUFBO0VBQUFDLFlBQUE7QUFBQSxTQUFBYixZQUFBO0VBQUEsSUFBQWMsU0FBQSxHQUFBWCxPQUFBO0lBQUFJLElBQUEsR0FBQU8sU0FBQSxDQUFBUCxJQUFBO0VBQUFQLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFPLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTs7Ozs7Ozs7O0FBZkYsSUFBQVEsT0FBQSxHQUFBQyxlQUFBLENBQUFiLE9BQUE7QUFDQSxJQUFBYyxjQUFBLEdBQUFkLE9BQUE7QUFDQSxJQUFBZSxFQUFBLEdBQUFmLE9BQUE7QUFlQWdCLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFLO0VBQzlCLElBQU1DLFNBQVMsR0FBYztJQUMzQkMsS0FBSyxFQUFFLENBQUM7SUFDUkMsT0FBTyxFQUFFLENBQUM7SUFDVkMsUUFBUSxFQUFFLEtBQUs7SUFDZkMsS0FBSyxFQUFFLElBQUk7SUFDWEMsVUFBVSxFQUFFLEtBQUs7SUFDakJDLFVBQVUsRUFBRW5CLElBQUksQ0FBQ29CLEVBQUUsRUFBRTtJQUNyQkMsTUFBTSxFQUFFckIsSUFBSSxDQUFDb0IsRUFBRTtHQUNoQjtFQUVERSxFQUFFLENBQUMsMkNBQTJDLEVBQUUsWUFBSztJQUNuRCxJQUFBQyxJQUFBLEdBQXNCLElBQUFiLGNBQUEsQ0FBQWMsTUFBTSxFQUFDLElBQUFwQixXQUFBLENBQUFxQixHQUFBLEVBQUNkLEVBQUEsQ0FBQWUsSUFBSSxFQUFBNUIsTUFBQSxDQUFBQyxNQUFBLEtBQUtjLFNBQVMsQ0FBQyxDQUFHLENBQUM7TUFBOUNjLFdBQVcsR0FBQUosSUFBQSxDQUFYSSxXQUFXO0lBQ2xCQyxNQUFNLENBQUNELFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUNFLFdBQVcsRUFBRTtFQUNyRCxDQUFDLENBQUM7QUErQkosQ0FBQyxDQUFDIn0=