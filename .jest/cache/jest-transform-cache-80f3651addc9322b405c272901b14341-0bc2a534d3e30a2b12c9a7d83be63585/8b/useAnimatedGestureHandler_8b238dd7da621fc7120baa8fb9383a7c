74689939fd13fa1e035b8d1ce59aefa0
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EventType = void 0;
exports.useAnimatedGestureHandler = useAnimatedGestureHandler;
var _Hooks = require("./Hooks");
var EventType = {
  UNDETERMINED: 0,
  FAILED: 1,
  BEGAN: 2,
  CANCELLED: 3,
  ACTIVE: 4,
  END: 5
};
exports.EventType = EventType;
function useAnimatedGestureHandler(handlers, dependencies) {
  var _useHandler = (0, _Hooks.useHandler)(handlers, dependencies),
    context = _useHandler.context,
    doDependenciesDiffer = _useHandler.doDependenciesDiffer,
    useWeb = _useHandler.useWeb;
  var handler = function handler(e) {
    'worklet';

    var event = useWeb ? e.nativeEvent : e;
    if (event.state === EventType.BEGAN && handlers.onStart) {
      handlers.onStart(event, context);
    }
    if (event.state === EventType.ACTIVE && handlers.onActive) {
      handlers.onActive(event, context);
    }
    if (event.oldState === EventType.ACTIVE && event.state === EventType.END && handlers.onEnd) {
      handlers.onEnd(event, context);
    }
    if (event.oldState === EventType.BEGAN && event.state === EventType.FAILED && handlers.onFail) {
      handlers.onFail(event, context);
    }
    if (event.oldState === EventType.ACTIVE && event.state === EventType.CANCELLED && handlers.onCancel) {
      handlers.onCancel(event, context);
    }
    if ((event.oldState === EventType.BEGAN || event.oldState === EventType.ACTIVE) && event.state !== EventType.BEGAN && event.state !== EventType.ACTIVE && handlers.onFinish) {
      handlers.onFinish(event, context, event.state === EventType.CANCELLED || event.state === EventType.FAILED);
    }
  };
  if (useWeb) {
    return handler;
  }
  return (0, _Hooks.useEvent)(handler, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], doDependenciesDiffer);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfSG9va3MiLCJyZXF1aXJlIiwiRXZlbnRUeXBlIiwiVU5ERVRFUk1JTkVEIiwiRkFJTEVEIiwiQkVHQU4iLCJDQU5DRUxMRUQiLCJBQ1RJVkUiLCJFTkQiLCJleHBvcnRzIiwidXNlQW5pbWF0ZWRHZXN0dXJlSGFuZGxlciIsImhhbmRsZXJzIiwiZGVwZW5kZW5jaWVzIiwiX3VzZUhhbmRsZXIiLCJ1c2VIYW5kbGVyIiwiY29udGV4dCIsImRvRGVwZW5kZW5jaWVzRGlmZmVyIiwidXNlV2ViIiwiaGFuZGxlciIsImUiLCJldmVudCIsIm5hdGl2ZUV2ZW50Iiwic3RhdGUiLCJvblN0YXJ0Iiwib25BY3RpdmUiLCJvbGRTdGF0ZSIsIm9uRW5kIiwib25GYWlsIiwib25DYW5jZWwiLCJvbkZpbmlzaCIsInVzZUV2ZW50Il0sInNvdXJjZXMiOlsidXNlQW5pbWF0ZWRHZXN0dXJlSGFuZGxlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IENvbnRleHQsIFdvcmtsZXRGdW5jdGlvbiwgTmF0aXZlRXZlbnQgfSBmcm9tICcuLi9jb21tb25UeXBlcyc7XG5pbXBvcnQgdHlwZSB7IERlcGVuZGVuY3lMaXN0IH0gZnJvbSAnLi9jb21tb25UeXBlcyc7XG5pbXBvcnQgeyB1c2VFdmVudCwgdXNlSGFuZGxlciB9IGZyb20gJy4vSG9va3MnO1xuXG5pbnRlcmZhY2UgSGFuZGxlcjxULCBUQ29udGV4dCBleHRlbmRzIENvbnRleHQ+IGV4dGVuZHMgV29ya2xldEZ1bmN0aW9uIHtcbiAgKGV2ZW50OiBULCBjb250ZXh0OiBUQ29udGV4dCwgaXNDYW5jZWxlZE9yRmFpbGVkPzogYm9vbGVhbik6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VzdHVyZUhhbmRsZXJzPFQsIFRDb250ZXh0IGV4dGVuZHMgQ29udGV4dD4ge1xuICBba2V5OiBzdHJpbmddOiBIYW5kbGVyPFQsIFRDb250ZXh0PiB8IHVuZGVmaW5lZDtcbiAgb25TdGFydD86IEhhbmRsZXI8VCwgVENvbnRleHQ+O1xuICBvbkFjdGl2ZT86IEhhbmRsZXI8VCwgVENvbnRleHQ+O1xuICBvbkVuZD86IEhhbmRsZXI8VCwgVENvbnRleHQ+O1xuICBvbkZhaWw/OiBIYW5kbGVyPFQsIFRDb250ZXh0PjtcbiAgb25DYW5jZWw/OiBIYW5kbGVyPFQsIFRDb250ZXh0PjtcbiAgb25GaW5pc2g/OiBIYW5kbGVyPFQsIFRDb250ZXh0Pjtcbn1cblxuZXhwb3J0IGNvbnN0IEV2ZW50VHlwZSA9IHtcbiAgVU5ERVRFUk1JTkVEOiAwLFxuICBGQUlMRUQ6IDEsXG4gIEJFR0FOOiAyLFxuICBDQU5DRUxMRUQ6IDMsXG4gIEFDVElWRTogNCxcbiAgRU5EOiA1LFxufTtcblxuZXhwb3J0IGludGVyZmFjZSBHZXN0dXJlSGFuZGxlck5hdGl2ZUV2ZW50IHtcbiAgaGFuZGxlclRhZzogbnVtYmVyO1xuICBudW1iZXJPZlBvaW50ZXJzOiBudW1iZXI7XG4gIHN0YXRlOiAodHlwZW9mIEV2ZW50VHlwZSlba2V5b2YgdHlwZW9mIEV2ZW50VHlwZV07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VzdHVyZUhhbmRsZXJFdmVudDxUPiBleHRlbmRzIE5hdGl2ZUV2ZW50PFQ+IHtcbiAgbmF0aXZlRXZlbnQ6IFQ7XG59XG5cbnR5cGUgSW5mZXJBcmd1bWVudDxUPiA9IFQgZXh0ZW5kcyBHZXN0dXJlSGFuZGxlckV2ZW50PGluZmVyIEU+XG4gID8gRSBleHRlbmRzIEdlc3R1cmVIYW5kbGVyTmF0aXZlRXZlbnRcbiAgICA/IEVcbiAgICA6IG5ldmVyXG4gIDogbmV2ZXI7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VBbmltYXRlZEdlc3R1cmVIYW5kbGVyPFxuICBUIGV4dGVuZHMgR2VzdHVyZUhhbmRsZXJFdmVudDxhbnk+LFxuICBUQ29udGV4dCBleHRlbmRzIENvbnRleHQgPSBDb250ZXh0LFxuICBQYXlsb2FkID0gSW5mZXJBcmd1bWVudDxUPlxuPihcbiAgaGFuZGxlcnM6IEdlc3R1cmVIYW5kbGVyczxQYXlsb2FkLCBUQ29udGV4dD4sXG4gIGRlcGVuZGVuY2llcz86IERlcGVuZGVuY3lMaXN0XG4pOiAoZTogVCkgPT4gdm9pZCB7XG4gIGNvbnN0IHsgY29udGV4dCwgZG9EZXBlbmRlbmNpZXNEaWZmZXIsIHVzZVdlYiB9ID0gdXNlSGFuZGxlcjxcbiAgICBQYXlsb2FkLFxuICAgIFRDb250ZXh0XG4gID4oaGFuZGxlcnMsIGRlcGVuZGVuY2llcyk7XG5cbiAgY29uc3QgaGFuZGxlciA9IChlOiBUKSA9PiB7XG4gICAgJ3dvcmtsZXQnO1xuICAgIGNvbnN0IGV2ZW50ID0gdXNlV2ViID8gZS5uYXRpdmVFdmVudCA6IGU7XG5cbiAgICBpZiAoZXZlbnQuc3RhdGUgPT09IEV2ZW50VHlwZS5CRUdBTiAmJiBoYW5kbGVycy5vblN0YXJ0KSB7XG4gICAgICBoYW5kbGVycy5vblN0YXJ0KGV2ZW50LCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKGV2ZW50LnN0YXRlID09PSBFdmVudFR5cGUuQUNUSVZFICYmIGhhbmRsZXJzLm9uQWN0aXZlKSB7XG4gICAgICBoYW5kbGVycy5vbkFjdGl2ZShldmVudCwgY29udGV4dCk7XG4gICAgfVxuICAgIGlmIChcbiAgICAgIGV2ZW50Lm9sZFN0YXRlID09PSBFdmVudFR5cGUuQUNUSVZFICYmXG4gICAgICBldmVudC5zdGF0ZSA9PT0gRXZlbnRUeXBlLkVORCAmJlxuICAgICAgaGFuZGxlcnMub25FbmRcbiAgICApIHtcbiAgICAgIGhhbmRsZXJzLm9uRW5kKGV2ZW50LCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgZXZlbnQub2xkU3RhdGUgPT09IEV2ZW50VHlwZS5CRUdBTiAmJlxuICAgICAgZXZlbnQuc3RhdGUgPT09IEV2ZW50VHlwZS5GQUlMRUQgJiZcbiAgICAgIGhhbmRsZXJzLm9uRmFpbFxuICAgICkge1xuICAgICAgaGFuZGxlcnMub25GYWlsKGV2ZW50LCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgZXZlbnQub2xkU3RhdGUgPT09IEV2ZW50VHlwZS5BQ1RJVkUgJiZcbiAgICAgIGV2ZW50LnN0YXRlID09PSBFdmVudFR5cGUuQ0FOQ0VMTEVEICYmXG4gICAgICBoYW5kbGVycy5vbkNhbmNlbFxuICAgICkge1xuICAgICAgaGFuZGxlcnMub25DYW5jZWwoZXZlbnQsIGNvbnRleHQpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAoZXZlbnQub2xkU3RhdGUgPT09IEV2ZW50VHlwZS5CRUdBTiB8fFxuICAgICAgICBldmVudC5vbGRTdGF0ZSA9PT0gRXZlbnRUeXBlLkFDVElWRSkgJiZcbiAgICAgIGV2ZW50LnN0YXRlICE9PSBFdmVudFR5cGUuQkVHQU4gJiZcbiAgICAgIGV2ZW50LnN0YXRlICE9PSBFdmVudFR5cGUuQUNUSVZFICYmXG4gICAgICBoYW5kbGVycy5vbkZpbmlzaFxuICAgICkge1xuICAgICAgaGFuZGxlcnMub25GaW5pc2goXG4gICAgICAgIGV2ZW50LFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBldmVudC5zdGF0ZSA9PT0gRXZlbnRUeXBlLkNBTkNFTExFRCB8fCBldmVudC5zdGF0ZSA9PT0gRXZlbnRUeXBlLkZBSUxFRFxuICAgICAgKTtcbiAgICB9XG4gIH07XG5cbiAgaWYgKHVzZVdlYikge1xuICAgIHJldHVybiBoYW5kbGVyO1xuICB9XG5cbiAgcmV0dXJuIHVzZUV2ZW50PFQ+KFxuICAgIGhhbmRsZXIsXG4gICAgWydvbkdlc3R1cmVIYW5kbGVyU3RhdGVDaGFuZ2UnLCAnb25HZXN0dXJlSGFuZGxlckV2ZW50J10sXG4gICAgZG9EZXBlbmRlbmNpZXNEaWZmZXJcbiAgKSBhcyB1bmtub3duIGFzIChlOiBUKSA9PiB2b2lkOyAvLyB0aGlzIGlzIG5vdCBjb3JyZWN0IGJ1dCB3ZSB3YW50IHRvIG1ha2UgR0ggdGhpbmsgaXQgcmVjZWl2ZXMgYSBmdW5jdGlvblxufVxuIl0sIm1hcHBpbmdzIjoiOzs7OztBQUVBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQWdCTyxJQUFNQyxTQUFTLEdBQUc7RUFDdkJD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