0fbec0f1bf36b7e13cd6a5a844ab84f3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FlipOutYRight = exports.FlipOutYLeft = exports.FlipOutXUp = exports.FlipOutXDown = exports.FlipOutEasyY = exports.FlipOutEasyX = exports.FlipInYRight = exports.FlipInYLeft = exports.FlipInXUp = exports.FlipInXDown = exports.FlipInEasyY = exports.FlipInEasyX = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _animationBuilder = require("../animationBuilder");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var FlipInXUp = function (_ComplexAnimationBuil) {
  (0, _inherits2.default)(FlipInXUp, _ComplexAnimationBuil);
  var _super = _createSuper(FlipInXUp);
  function FlipInXUp() {
    var _this;
    (0, _classCallCheck2.default)(this, FlipInXUp);
    _this = _super.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "build", function () {
      var delayFunction = _this.getDelayFunction();
      var _this$getAnimationAnd = _this.getAnimationAndConfig(),
        _this$getAnimationAnd2 = (0, _slicedToArray2.default)(_this$getAnimationAnd, 2),
        animation = _this$getAnimationAnd2[0],
        config = _this$getAnimationAnd2[1];
      var delay = _this.getDelay();
      var callback = _this.callbackV;
      var initialValues = _this.initialValues;
      return function (targetValues) {
        'worklet';

        return {
          initialValues: Object.assign({
            transform: [{
              perspective: 500
            }, {
              rotateX: '90deg'
            }, {
              translateY: -targetValues.targetHeight
            }]
          }, initialValues),
          animations: {
            transform: [{
              perspective: 500
            }, {
              rotateX: delayFunction(delay, animation('0deg', config))
            }, {
              translateY: delayFunction(delay, animation(0, config))
            }]
          },
          callback: callback
        };
      };
    });
    return _this;
  }
  (0, _createClass2.default)(FlipInXUp, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new FlipInXUp();
    }
  }]);
  return FlipInXUp;
}(_animationBuilder.ComplexAnimationBuilder);
exports.FlipInXUp = FlipInXUp;
var FlipInYLeft = function (_ComplexAnimationBuil2) {
  (0, _inherits2.default)(FlipInYLeft, _ComplexAnimationBuil2);
  var _super2 = _createSuper(FlipInYLeft);
  function FlipInYLeft() {
    var _this2;
    (0, _classCallCheck2.default)(this, FlipInYLeft);
    _this2 = _super2.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this2), "build", function () {
      var delayFunction = _this2.getDelayFunction();
      var _this2$getAnimationAn = _this2.getAnimationAndConfig(),
        _this2$getAnimationAn2 = (0, _slicedToArray2.default)(_this2$getAnimationAn, 2),
        animation = _this2$getAnimationAn2[0],
        config = _this2$getAnimationAn2[1];
      var delay = _this2.getDelay();
      var callback = _this2.callbackV;
      var initialValues = _this2.initialValues;
      return function (targetValues) {
        'worklet';

        return {
          initialValues: Object.assign({
            transform: [{
              perspective: 500
            }, {
              rotateY: '-90deg'
            }, {
              translateX: -targetValues.targetWidth
            }]
          }, initialValues),
          animations: {
            transform: [{
              perspective: delayFunction(delay, animation(500, config))
            }, {
              rotateY: delayFunction(delay, animation('0deg', config))
            }, {
              translateX: delayFunction(delay, animation(0, config))
            }]
          },
          callback: callback
        };
      };
    });
    return _this2;
  }
  (0, _createClass2.default)(FlipInYLeft, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new FlipInYLeft();
    }
  }]);
  return FlipInYLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.FlipInYLeft = FlipInYLeft;
var FlipInXDown = function (_ComplexAnimationBuil3) {
  (0, _inherits2.default)(FlipInXDown, _ComplexAnimationBuil3);
  var _super3 = _createSuper(FlipInXDown);
  function FlipInXDown() {
    var _this3;
    (0, _classCallCheck2.default)(this, FlipInXDown);
    _this3 = _super3.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this3), "build", function () {
      var delayFunction = _this3.getDelayFunction();
      var _this3$getAnimationAn = _this3.getAnimationAndConfig(),
        _this3$getAnimationAn2 = (0, _slicedToArray2.default)(_this3$getAnimationAn, 2),
        animation = _this3$getAnimationAn2[0],
        config = _this3$getAnimationAn2[1];
      var delay = _this3.getDelay();
      var callback = _this3.callbackV;
      var initialValues = _this3.initialValues;
      return function (targetValues) {
        'worklet';

        return {
          initialValues: Object.assign({
            transform: [{
              perspective: 500
            }, {
              rotateX: '-90deg'
            }, {
              translateY: targetValues.targetHeight
            }]
          }, initialValues),
          animations: {
            transform: [{
              perspective: delayFunction(delay, animation(500, config))
            }, {
              rotateX: delayFunction(delay, animation('0deg', config))
            }, {
              translateY: delayFunction(delay, animation(0, config))
            }]
          },
          callback: callback
        };
      };
    });
    return _this3;
  }
  (0, _createClass2.default)(FlipInXDown, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new FlipInXDown();
    }
  }]);
  return FlipInXDown;
}(_animationBuilder.ComplexAnimationBuilder);
exports.FlipInXDown = FlipInXDown;
var FlipInYRight = function (_ComplexAnimationBuil4) {
  (0, _inherits2.default)(FlipInYRight, _ComplexAnimationBuil4);
  var _super4 = _createSuper(FlipInYRight);
  function FlipInYRight() {
    var _this4;
    (0, _classCallCheck2.default)(this, FlipInYRight);
    _this4 = _super4.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this4), "build", function () {
      var delayFunction = _this4.getDelayFunction();
      var _this4$getAnimationAn = _this4.getAnimationAndConfig(),
        _this4$getAnimationAn2 = (0, _slicedToArray2.default)(_this4$getAnimationAn, 2),
        animation = _this4$getAnimationAn2[0],
        config = _this4$getAnimationAn2[1];
      var delay = _this4.getDelay();
      var callback = _this4.callbackV;
      var initialValues = _this4.initialValues;
      return function (targetValues) {
        'worklet';

        return {
          initialValues: Object.assign({
            transform: [{
              perspective: 500
            }, {
              rotateY: '90deg'
            }, {
              translateX: targetValues.targetWidth
            }]
          }, initialValues),
          animations: {
            transform: [{
              perspective: delayFunction(delay, animation(500, config))
            }, {
              rotateY: delayFunction(delay, animation('0deg', config))
            }, {
              translateX: delayFunction(delay, animation(0, config))
            }]
          },
          callback: callback
        };
      };
    });
    return _this4;
  }
  (0, _createClass2.default)(FlipInYRight, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new FlipInYRight();
    }
  }]);
  return FlipInYRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.FlipInYRight = FlipInYRight;
var FlipInEasyX = function (_ComplexAnimationBuil5) {
  (0, _inherits2.default)(FlipInEasyX, _ComplexAnimationBuil5);
  var _super5 = _createSuper(FlipInEasyX);
  function FlipInEasyX() {
    var _this5;
    (0, _classCallCheck2.default)(this, FlipInEasyX);
    _this5 = _super5.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this5), "build", function () {
      var delayFunction = _this5.getDelayFunction();
      var _this5$getAnimationAn = _this5.getAnimationAndConfig(),
        _this5$getAnimationAn2 = (0, _slicedToArray2.default)(_this5$getAnimationAn, 2),
        animation = _this5$getAnimationAn2[0],
        config = _this5$getAnimationAn2[1];
      var delay = _this5.getDelay();
      var callback = _this5.callbackV;
      var initialValues = _this5.initialValues;
      return function () {
        'worklet';

        return {
          initialValues: Object.assign({
            transform: [{
              perspective: 500
            }, {
              rotateX: '90deg'
            }]
          }, initialValues),
          animations: {
            transform: [{
              perspective: delayFunction(delay, animation(500, config))
            }, {
              rotateX: delayFunction(delay, animation('0deg', config))
            }]
          },
          callback: callback
        };
      };
    });
    return _this5;
  }
  (0, _createClass2.default)(FlipInEasyX, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new FlipInEasyX();
    }
  }]);
  return FlipInEasyX;
}(_animationBuilder.ComplexAnimationBuilder);
exports.FlipInEasyX = FlipInEasyX;
var FlipInEasyY = function (_ComplexAnimationBuil6) {
  (0, _inherits2.default)(FlipInEasyY, _ComplexAnimationBuil6);
  var _super6 = _createSuper(FlipInEasyY);
  function FlipInEasyY() {
    var _this6;
    (0, _classCallCheck2.default)(this, FlipInEasyY);
    _this6 = _super6.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this6), "build", function () {
      var delayFunction = _this6.getDelayFunction();
      var _this6$getAnimationAn = _this6.getAnimationAndConfig(),
        _this6$getAnimationAn2 = (0, _slicedToArray2.default)(_this6$getAnimationAn, 2),
        animation = _this6$getAnimationAn2[0],
        config = _this6$getAnimationAn2[1];
      var delay = _this6.getDelay();
      var callback = _this6.callbackV;
      var initialValues = _this6.initialValues;
      return function () {
        'worklet';

        return {
          initialValues: Object.assign({
            transform: [{
              perspective: 500
            }, {
              rotateY: '90deg'
            }]
          }, initialValues),
          animations: {
            transform: [{
              perspective: delayFunction(delay, animation(500, config))
            }, {
              rotateY: delayFunction(delay, animation('0deg', config))
            }]
          },
          callback: callback
        };
      };
    });
    return _this6;
  }
  (0, _createClass2.default)(FlipInEasyY, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new FlipInEasyY();
    }
  }]);
  return FlipInEasyY;
}(_animationBuilder.ComplexAnimationBuilder);
exports.FlipInEasyY = FlipInEasyY;
var FlipOutXUp = function (_ComplexAnimationBuil7) {
  (0, _inherits2.default)(FlipOutXUp, _ComplexAnimationBuil7);
  var _super7 = _createSuper(FlipOutXUp);
  function FlipOutXUp() {
    var _this7;
    (0, _classCallCheck2.default)(this, FlipOutXUp);
    _this7 = _super7.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this7), "build", function () {
      var delayFunction = _this7.getDelayFunction();
      var _this7$getAnimationAn = _this7.getAnimationAndConfig(),
        _this7$getAnimationAn2 = (0, _slicedToArray2.default)(_this7$getAnimationAn, 2),
        animation = _this7$getAnimationAn2[0],
        config = _this7$getAnimationAn2[1];
      var delay = _this7.getDelay();
      var callback = _this7.callbackV;
      var initialValues = _this7.initialValues;
      return function (targetValues) {
        'worklet';

        return {
          initialValues: Object.assign({
            transform: [{
              perspective: 500
            }, {
              rotateX: '0deg'
            }, {
              translateY: 0
            }]
          }, initialValues),
          animations: {
            transform: [{
              perspective: delayFunction(delay, animation(500, config))
            }, {
              rotateX: delayFunction(delay, animation('90deg', config))
            }, {
              translateY: delayFunction(delay, animation(-targetValues.currentHeight, config))
            }]
          },
          callback: callback
        };
      };
    });
    return _this7;
  }
  (0, _createClass2.default)(FlipOutXUp, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new FlipOutXUp();
    }
  }]);
  return FlipOutXUp;
}(_animationBuilder.ComplexAnimationBuilder);
exports.FlipOutXUp = FlipOutXUp;
var FlipOutYLeft = function (_ComplexAnimationBuil8) {
  (0, _inherits2.default)(FlipOutYLeft, _ComplexAnimationBuil8);
  var _super8 = _createSuper(FlipOutYLeft);
  function FlipOutYLeft() {
    var _this8;
    (0, _classCallCheck2.default)(this, FlipOutYLeft);
    _this8 = _super8.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this8), "build", function () {
      var delayFunction = _this8.getDelayFunction();
      var _this8$getAnimationAn = _this8.getAnimationAndConfig(),
        _this8$getAnimationAn2 = (0, _slicedToArray2.default)(_this8$getAnimationAn, 2),
        animation = _this8$getAnimationAn2[0],
        config = _this8$getAnimationAn2[1];
      var delay = _this8.getDelay();
      var callback = _this8.callbackV;
      var initialValues = _this8.initialValues;
      return function (targetValues) {
        'worklet';

        return {
          initialValues: Object.assign({
            transform: [{
              perspective: 500
            }, {
              rotateY: '0deg'
            }, {
              translateX: 0
            }]
          }, initialValues),
          animations: {
            transform: [{
              perspective: delayFunction(delay, animation(500, config))
            }, {
              rotateY: delayFunction(delay, animation('-90deg', config))
            }, {
              translateX: delayFunction(delay, animation(-targetValues.currentWidth, config))
            }]
          },
          callback: callback
        };
      };
    });
    return _this8;
  }
  (0, _createClass2.default)(FlipOutYLeft, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new FlipOutYLeft();
    }
  }]);
  return FlipOutYLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.FlipOutYLeft = FlipOutYLeft;
var FlipOutXDown = function (_ComplexAnimationBuil9) {
  (0, _inherits2.default)(FlipOutXDown, _ComplexAnimationBuil9);
  var _super9 = _createSuper(FlipOutXDown);
  function FlipOutXDown() {
    var _this9;
    (0, _classCallCheck2.default)(this, FlipOutXDown);
    _this9 = _super9.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this9), "build", function () {
      var delayFunction = _this9.getDelayFunction();
      var _this9$getAnimationAn = _this9.getAnimationAndConfig(),
        _this9$getAnimationAn2 = (0, _slicedToArray2.default)(_this9$getAnimationAn, 2),
        animation = _this9$getAnimationAn2[0],
        config = _this9$getAnimationAn2[1];
      var delay = _this9.getDelay();
      var callback = _this9.callbackV;
      var initialValues = _this9.initialValues;
      return function (targetValues) {
        'worklet';

        return {
          initialValues: Object.assign({
            transform: [{
              perspective: 500
            }, {
              rotateX: '0deg'
            }, {
              translateY: 0
            }]
          }, initialValues),
          animations: {
            transform: [{
              perspective: delayFunction(delay, animation(500, config))
            }, {
              rotateX: delayFunction(delay, animation('-90deg', config))
            }, {
              translateY: delayFunction(delay, animation(targetValues.currentHeight, config))
            }]
          },
          callback: callback
        };
      };
    });
    return _this9;
  }
  (0, _createClass2.default)(FlipOutXDown, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new FlipOutXDown();
    }
  }]);
  return FlipOutXDown;
}(_animationBuilder.ComplexAnimationBuilder);
exports.FlipOutXDown = FlipOutXDown;
var FlipOutYRight = function (_ComplexAnimationBuil10) {
  (0, _inherits2.default)(FlipOutYRight, _ComplexAnimationBuil10);
  var _super10 = _createSuper(FlipOutYRight);
  function FlipOutYRight() {
    var _this10;
    (0, _classCallCheck2.default)(this, FlipOutYRight);
    _this10 = _super10.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this10), "build", function () {
      var delayFunction = _this10.getDelayFunction();
      var _this10$getAnimationA = _this10.getAnimationAndConfig(),
        _this10$getAnimationA2 = (0, _slicedToArray2.default)(_this10$getAnimationA, 2),
        animation = _this10$getAnimationA2[0],
        config = _this10$getAnimationA2[1];
      var delay = _this10.getDelay();
      var callback = _this10.callbackV;
      var initialValues = _this10.initialValues;
      return function (targetValues) {
        'worklet';

        return {
          initialValues: Object.assign({
            transform: [{
              perspective: 500
            }, {
              rotateY: '0deg'
            }, {
              translateX: 0
            }]
          }, initialValues),
          animations: {
            transform: [{
              perspective: delayFunction(delay, animation(500, config))
            }, {
              rotateY: delayFunction(delay, animation('90deg', config))
            }, {
              translateX: delayFunction(delay, animation(targetValues.currentWidth, config))
            }]
          },
          callback: callback
        };
      };
    });
    return _this10;
  }
  (0, _createClass2.default)(FlipOutYRight, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new FlipOutYRight();
    }
  }]);
  return FlipOutYRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.FlipOutYRight = FlipOutYRight;
var FlipOutEasyX = function (_ComplexAnimationBuil11) {
  (0, _inherits2.default)(FlipOutEasyX, _ComplexAnimationBuil11);
  var _super11 = _createSuper(FlipOutEasyX);
  function FlipOutEasyX() {
    var _this11;
    (0, _classCallCheck2.default)(this, FlipOutEasyX);
    _this11 = _super11.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this11), "build", function () {
      var delayFunction = _this11.getDelayFunction();
      var _this11$getAnimationA = _this11.getAnimationAndConfig(),
        _this11$getAnimationA2 = (0, _slicedToArray2.default)(_this11$getAnimationA, 2),
        animation = _this11$getAnimationA2[0],
        config = _this11$getAnimationA2[1];
      var delay = _this11.getDelay();
      var callback = _this11.callbackV;
      var initialValues = _this11.initialValues;
      return function () {
        'worklet';

        return {
          initialValues: Object.assign({
            transform: [{
              perspective: 500
            }, {
              rotateX: '0deg'
            }]
          }, initialValues),
          animations: {
            transform: [{
              perspective: delayFunction(delay, animation(500, config))
            }, {
              rotateX: delayFunction(delay, animation('90deg', config))
            }]
          },
          callback: callback
        };
      };
    });
    return _this11;
  }
  (0, _createClass2.default)(FlipOutEasyX, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new FlipOutEasyX();
    }
  }]);
  return FlipOutEasyX;
}(_animationBuilder.ComplexAnimationBuilder);
exports.FlipOutEasyX = FlipOutEasyX;
var FlipOutEasyY = function (_ComplexAnimationBuil12) {
  (0, _inherits2.default)(FlipOutEasyY, _ComplexAnimationBuil12);
  var _super12 = _createSuper(FlipOutEasyY);
  function FlipOutEasyY() {
    var _this12;
    (0, _classCallCheck2.default)(this, FlipOutEasyY);
    _this12 = _super12.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this12), "build", function () {
      var delayFunction = _this12.getDelayFunction();
      var _this12$getAnimationA = _this12.getAnimationAndConfig(),
        _this12$getAnimationA2 = (0, _slicedToArray2.default)(_this12$getAnimationA, 2),
        animation = _this12$getAnimationA2[0],
        config = _this12$getAnimationA2[1];
      var delay = _this12.getDelay();
      var callback = _this12.callbackV;
      var initialValues = _this12.initialValues;
      return function () {
        'worklet';

        return {
          initialValues: Object.assign({
            transform: [{
              perspective: 500
            }, {
              rotateY: '0deg'
            }]
          }, initialValues),
          animations: {
            transform: [{
              perspective: delayFunction(delay, animation(500, config))
            }, {
              rotateY: delayFunction(delay, animation('90deg', config))
            }]
          },
          callback: callback
        };
      };
    });
    return _this12;
  }
  (0, _createClass2.default)(FlipOutEasyY, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new FlipOutEasyY();
    }
  }]);
  return FlipOutEasyY;
}(_animationBuilder.ComplexAnimationBuilder);
exports.FlipOutEasyY = FlipOutEasyY;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,