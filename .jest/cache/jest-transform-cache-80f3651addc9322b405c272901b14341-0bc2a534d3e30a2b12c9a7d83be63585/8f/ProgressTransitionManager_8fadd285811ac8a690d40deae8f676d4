e55b07054981398d3c5e42e25250c003
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ProgressTransitionManager = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _threads = require("../../threads");
var _core = require("../../core");
var _reactNative = require("react-native");
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var ProgressTransitionManager = function () {
  function ProgressTransitionManager() {
    (0, _classCallCheck2.default)(this, ProgressTransitionManager);
    _defineProperty(this, "_sharedElementCount", 0);
    _defineProperty(this, "_eventHandler", {
      isRegistered: false,
      onTransitionProgress: -1,
      onAppear: -1,
      onDisappear: -1,
      onSwipeDismiss: -1
    });
  }
  (0, _createClass2.default)(ProgressTransitionManager, [{
    key: "addProgressAnimation",
    value: function addProgressAnimation(viewTag, progressAnimation) {
      (0, _threads.runOnUIImmediately)(function () {
        'worklet';

        global.ProgressTransitionRegister.addProgressAnimation(viewTag, progressAnimation);
      })();
      this.registerEventHandlers();
    }
  }, {
    key: "removeProgressAnimation",
    value: function removeProgressAnimation(viewTag) {
      this.unregisterEventHandlers();
      (0, _threads.runOnUIImmediately)(function () {
        'worklet';

        global.ProgressTransitionRegister.removeProgressAnimation(viewTag);
      })();
    }
  }, {
    key: "registerEventHandlers",
    value: function registerEventHandlers() {
      this._sharedElementCount++;
      var eventHandler = this._eventHandler;
      if (!eventHandler.isRegistered) {
        eventHandler.isRegistered = true;
        var eventPrefix = _reactNative.Platform.OS === 'android' ? 'on' : 'top';
        var lastProgressValue = -1;
        eventHandler.onTransitionProgress = (0, _core.registerEventHandler)(eventPrefix + 'TransitionProgress', function (event) {
          'worklet';

          var progress = event.progress;
          if (progress === lastProgressValue) {
            return;
          }
          lastProgressValue = progress;
          global.ProgressTransitionRegister.frame(progress);
        });
        eventHandler.onAppear = (0, _core.registerEventHandler)(eventPrefix + 'Appear', function () {
          'worklet';

          global.ProgressTransitionRegister.onTransitionEnd();
        });
        if (_reactNative.Platform.OS === 'android') {
          eventHandler.onDisappear = (0, _core.registerEventHandler)('onFinishTransitioning', function () {
            'worklet';

            global.ProgressTransitionRegister.onAndroidFinishTransitioning();
          });
        } else if (_reactNative.Platform.OS === 'ios') {
          eventHandler.onDisappear = (0, _core.registerEventHandler)('topDisappear', function () {
            'worklet';

            global.ProgressTransitionRegister.onTransitionEnd(true);
          });
          eventHandler.onSwipeDismiss = (0, _core.registerEventHandler)('topGestureCancel', function () {
            'worklet';

            global.ProgressTransitionRegister.onTransitionEnd();
          });
        }
      }
    }
  }, {
    key: "unregisterEventHandlers",
    value: function unregisterEventHandlers() {
      this._sharedElementCount--;
      if (this._sharedElementCount === 0) {
        var eventHandler = this._eventHandler;
        eventHandler.isRegistered = false;
        if (eventHandler.onTransitionProgress !== -1) {
          (0, _core.unregisterEventHandler)(eventHandler.onTransitionProgress);
          eventHandler.onTransitionProgress = -1;
        }
        if (eventHandler.onAppear !== -1) {
          (0, _core.unregisterEventHandler)(eventHandler.onAppear);
          eventHandler.onAppear = -1;
        }
        if (eventHandler.onDisappear !== -1) {
          (0, _core.unregisterEventHandler)(eventHandler.onDisappear);
          eventHandler.onDisappear = -1;
        }
        if (eventHandler.onSwipeDismiss !== -1) {
          (0, _core.unregisterEventHandler)(eventHandler.onSwipeDismiss);
          eventHandler.onSwipeDismiss = -1;
        }
      }
    }
  }]);
  return ProgressTransitionManager;
}();
exports.ProgressTransitionManager = ProgressTransitionManager;
function createProgressTransitionRegister() {
  'worklet';

  var progressAnimations = new Map();
  var snapshots = new Map();
  var currentTransitions = new Set();
  var toRemove = new Set();
  var progressTransitionManager = {
    addProgressAnimation: function addProgressAnimation(viewTag, progressAnimation) {
      progressAnimations.set(viewTag, progressAnimation);
    },
    removeProgressAnimation: function removeProgressAnimation(viewTag) {
      if (progressAnimations.size > 1) {
        toRemove.add(viewTag);
      } else {
        progressAnimations.delete(viewTag);
      }
    },
    onTransitionStart: function onTransitionStart(viewTag, snapshot) {
      snapshots.set(viewTag, snapshot);
      currentTransitions.add(viewTag);
      progressTransitionManager.frame(0);
    },
    frame: function frame(progress) {
      for (var viewTag of currentTransitions) {
        var progressAnimation = progressAnimations.get(viewTag);
        var snapshot = snapshots.get(viewTag);
        progressAnimation(viewTag, snapshot, progress);
      }
    },
    onAndroidFinishTransitioning: function onAndroidFinishTransitioning() {
      if (toRemove.size > 0) {
        progressTransitionManager.onTransitionEnd();
      }
    },
    onTransitionEnd: function onTransitionEnd() {
      var removeViews = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      for (var viewTag of currentTransitions) {
        _notifyAboutEnd(viewTag, removeViews);
      }
      currentTransitions.clear();
      snapshots.clear();
      if (toRemove.size > 0) {
        for (var _viewTag of toRemove) {
          progressAnimations.delete(_viewTag);
        }
        toRemove.clear();
      }
    }
  };
  return progressTransitionManager;
}
(0, _threads.runOnUIImmediately)(function () {
  'worklet';

  global.ProgressTransitionRegister = createProgressTransitionRegister();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,