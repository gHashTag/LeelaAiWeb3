70d2da19f2d8beafa392ef2bdeaf91f3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configureLayoutAnimations = configureLayoutAnimations;
exports.configureProps = configureProps;
exports.enableLayoutAnimations = enableLayoutAnimations;
exports.getSensorContainer = getSensorContainer;
exports.getViewProp = getViewProp;
exports.initializeSensor = initializeSensor;
exports.isReanimated3 = exports.isConfigured = void 0;
Object.defineProperty(exports, "makeMutable", {
  enumerable: true,
  get: function get() {
    return _mutables.makeMutable;
  }
});
Object.defineProperty(exports, "makeRemote", {
  enumerable: true,
  get: function get() {
    return _mutables.makeRemote;
  }
});
Object.defineProperty(exports, "makeShareable", {
  enumerable: true,
  get: function get() {
    return _shareables.makeShareable;
  }
});
exports.registerEventHandler = registerEventHandler;
exports.registerSensor = registerSensor;
Object.defineProperty(exports, "runOnJS", {
  enumerable: true,
  get: function get() {
    return _threads.runOnJS;
  }
});
Object.defineProperty(exports, "runOnUI", {
  enumerable: true,
  get: function get() {
    return _threads.runOnUI;
  }
});
Object.defineProperty(exports, "startMapper", {
  enumerable: true,
  get: function get() {
    return _mappers.startMapper;
  }
});
Object.defineProperty(exports, "stopMapper", {
  enumerable: true,
  get: function get() {
    return _mappers.stopMapper;
  }
});
exports.subscribeForKeyboardEvents = subscribeForKeyboardEvents;
exports.unregisterEventHandler = unregisterEventHandler;
exports.unregisterSensor = unregisterSensor;
exports.unsubscribeFromKeyboardEvents = unsubscribeFromKeyboardEvents;
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _PlatformChecker = require("./PlatformChecker");
var _shareables = require("./shareables");
var _initializers = require("./initializers");
var _SensorContainer = require("./SensorContainer");
var _mappers = require("./mappers");
var _threads = require("./threads");
var _mutables = require("./mutables");
var isReanimated3 = function isReanimated3() {
  return true;
};
exports.isReanimated3 = isReanimated3;
var isConfigured = isReanimated3;
exports.isConfigured = isConfigured;
global._WORKLET = false;
global._log = function (s) {
  console.log(s);
};
function getViewProp(viewTag, propName) {
  if (global._IS_FABRIC) {
    throw new Error('[react-native-reanimated] `getViewProp` is not supported on Fabric yet');
  }
  return new Promise(function (resolve, reject) {
    return _NativeReanimated.default.getViewProp(viewTag, propName, function (result) {
      if (typeof result === 'string' && result.substr(0, 6) === 'error:') {
        reject(result);
      } else {
        resolve(result);
      }
    });
  });
}
function getSensorContainer() {
  if (!global.__sensorContainer) {
    global.__sensorContainer = new _SensorContainer.SensorContainer();
  }
  return global.__sensorContainer;
}
function registerEventHandler(eventHash, eventHandler) {
  function handleAndFlushAnimationFrame(eventTimestamp, event) {
    'worklet';

    global.__frameTimestamp = eventTimestamp;
    eventHandler(event);
    global.__flushAnimationFrame(eventTimestamp);
    global.__frameTimestamp = undefined;
  }
  return _NativeReanimated.default.registerEventHandler(eventHash, (0, _shareables.makeShareableCloneRecursive)(handleAndFlushAnimationFrame));
}
function unregisterEventHandler(id) {
  return _NativeReanimated.default.unregisterEventHandler(id);
}
function subscribeForKeyboardEvents(eventHandler, options) {
  var _options$isStatusBarT;
  function handleAndFlushAnimationFrame(state, height) {
    'worklet';

    var now = performance.now();
    global.__frameTimestamp = now;
    eventHandler(state, height);
    global.__flushAnimationFrame(now);
    global.__frameTimestamp = undefined;
  }
  return _NativeReanimated.default.subscribeForKeyboardEvents((0, _shareables.makeShareableCloneRecursive)(handleAndFlushAnimationFrame), (_options$isStatusBarT = options.isStatusBarTranslucentAndroid) != null ? _options$isStatusBarT : false);
}
function unsubscribeFromKeyboardEvents(listenerId) {
  return _NativeReanimated.default.unsubscribeFromKeyboardEvents(listenerId);
}
function registerSensor(sensorType, config, eventHandler) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.registerSensor(sensorType, config, (0, _shareables.makeShareableCloneRecursive)(eventHandler));
}
function initializeSensor(sensorType, config) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.initializeSensor(sensorType, config);
}
function unregisterSensor(sensorId) {
  var sensorContainer = getSensorContainer();
  return sensorContainer.unregisterSensor(sensorId);
}
if (!(0, _PlatformChecker.isWeb)()) {
  (0, _initializers.initializeUIRuntime)();
}
var featuresConfig = {
  enableLayoutAnimations: false,
  setByUser: false
};
function enableLayoutAnimations(flag) {
  var isCallByUser = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  if (isCallByUser) {
    featuresConfig = {
      enableLayoutAnimations: flag,
      setByUser: true
    };
    _NativeReanimated.default.enableLayoutAnimations(flag);
  } else if (!featuresConfig.setByUser && featuresConfig.enableLayoutAnimations !== flag) {
    featuresConfig.enableLayoutAnimations = flag;
    _NativeReanimated.default.enableLayoutAnimations(flag);
  }
}
function configureLayoutAnimations(viewTag, type, config) {
  var sharedTransitionTag = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  _NativeReanimated.default.configureLayoutAnimation(viewTag, type, sharedTransitionTag, (0, _shareables.makeShareableCloneRecursive)(config));
}
function configureProps(uiProps, nativeProps) {
  if (!(0, _PlatformChecker.nativeShouldBeMock)()) {
    _NativeReanimated.default.configureProps(uiProps, nativeProps);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,