ea7bd95eacdb86a9a26cd31db488d2a5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PinwheelOut = exports.PinwheelIn = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _animationBuilder = require("../animationBuilder");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var PinwheelIn = function (_ComplexAnimationBuil) {
  (0, _inherits2.default)(PinwheelIn, _ComplexAnimationBuil);
  var _super = _createSuper(PinwheelIn);
  function PinwheelIn() {
    var _this;
    (0, _classCallCheck2.default)(this, PinwheelIn);
    _this = _super.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "build", function () {
      var delayFunction = _this.getDelayFunction();
      var _this$getAnimationAnd = _this.getAnimationAndConfig(),
        _this$getAnimationAnd2 = (0, _slicedToArray2.default)(_this$getAnimationAnd, 2),
        animation = _this$getAnimationAnd2[0],
        config = _this$getAnimationAnd2[1];
      var delay = _this.getDelay();
      var callback = _this.callbackV;
      var initialValues = _this.initialValues;
      return function () {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, animation(1, config)),
            transform: [{
              scale: delayFunction(delay, animation(1, config))
            }, {
              rotate: delayFunction(delay, animation('0', config))
            }]
          },
          initialValues: Object.assign({
            opacity: 0,
            transform: [{
              scale: 0
            }, {
              rotate: '5'
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this;
  }
  (0, _createClass2.default)(PinwheelIn, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new PinwheelIn();
    }
  }]);
  return PinwheelIn;
}(_animationBuilder.ComplexAnimationBuilder);
exports.PinwheelIn = PinwheelIn;
var PinwheelOut = function (_ComplexAnimationBuil2) {
  (0, _inherits2.default)(PinwheelOut, _ComplexAnimationBuil2);
  var _super2 = _createSuper(PinwheelOut);
  function PinwheelOut() {
    var _this2;
    (0, _classCallCheck2.default)(this, PinwheelOut);
    _this2 = _super2.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this2), "build", function () {
      var delayFunction = _this2.getDelayFunction();
      var _this2$getAnimationAn = _this2.getAnimationAndConfig(),
        _this2$getAnimationAn2 = (0, _slicedToArray2.default)(_this2$getAnimationAn, 2),
        animation = _this2$getAnimationAn2[0],
        config = _this2$getAnimationAn2[1];
      var delay = _this2.getDelay();
      var callback = _this2.callbackV;
      var initialValues = _this2.initialValues;
      return function () {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, animation(0, config)),
            transform: [{
              scale: delayFunction(delay, animation(0, config))
            }, {
              rotate: delayFunction(delay, animation('5', config))
            }]
          },
          initialValues: Object.assign({
            opacity: 1,
            transform: [{
              scale: 1
            }, {
              rotate: '0'
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this2;
  }
  (0, _createClass2.default)(PinwheelOut, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new PinwheelOut();
    }
  }]);
  return PinwheelOut;
}(_animationBuilder.ComplexAnimationBuilder);
exports.PinwheelOut = PinwheelOut;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,