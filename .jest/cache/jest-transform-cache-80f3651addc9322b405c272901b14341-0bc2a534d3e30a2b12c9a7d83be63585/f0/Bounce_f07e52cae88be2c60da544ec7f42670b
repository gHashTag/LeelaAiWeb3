50fc94d2cae2f9ab97ecfbe7392c0e65
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BounceOutUp = exports.BounceOutRight = exports.BounceOutLeft = exports.BounceOutDown = exports.BounceOut = exports.BounceInUp = exports.BounceInRight = exports.BounceInLeft = exports.BounceInDown = exports.BounceIn = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _animation = require("../../animation");
var _animationBuilder = require("../animationBuilder");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var BounceIn = function (_ComplexAnimationBuil) {
  (0, _inherits2.default)(BounceIn, _ComplexAnimationBuil);
  var _super = _createSuper(BounceIn);
  function BounceIn() {
    var _this;
    (0, _classCallCheck2.default)(this, BounceIn);
    _this = _super.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "build", function () {
      var delayFunction = _this.getDelayFunction();
      var delay = _this.getDelay();
      var duration = _this.getDuration();
      var callback = _this.callbackV;
      var initialValues = _this.initialValues;
      return function () {
        'worklet';

        return {
          animations: {
            transform: [{
              scale: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(1.2, {
                duration: duration * 0.55
              }), (0, _animation.withTiming)(0.9, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(1.1, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(1, {
                duration: duration * 0.15
              })))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              scale: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this;
  }
  (0, _createClass2.default)(BounceIn, [{
    key: "getDuration",
    value: function getDuration() {
      var _this$durationV;
      return (_this$durationV = this.durationV) != null ? _this$durationV : 600;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new BounceIn();
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return 600;
    }
  }]);
  return BounceIn;
}(_animationBuilder.ComplexAnimationBuilder);
exports.BounceIn = BounceIn;
var BounceInDown = function (_ComplexAnimationBuil2) {
  (0, _inherits2.default)(BounceInDown, _ComplexAnimationBuil2);
  var _super2 = _createSuper(BounceInDown);
  function BounceInDown() {
    var _this2;
    (0, _classCallCheck2.default)(this, BounceInDown);
    _this2 = _super2.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this2), "build", function () {
      var delayFunction = _this2.getDelayFunction();
      var delay = _this2.getDelay();
      var duration = _this2.getDuration();
      var callback = _this2.callbackV;
      var initialValues = _this2.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateY: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(-20, {
                duration: duration * 0.55
              }), (0, _animation.withTiming)(10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(-10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(0, {
                duration: duration * 0.15
              })))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateY: values.windowHeight
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this2;
  }
  (0, _createClass2.default)(BounceInDown, [{
    key: "getDuration",
    value: function getDuration() {
      var _this$durationV2;
      return (_this$durationV2 = this.durationV) != null ? _this$durationV2 : 600;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new BounceInDown();
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return 600;
    }
  }]);
  return BounceInDown;
}(_animationBuilder.ComplexAnimationBuilder);
exports.BounceInDown = BounceInDown;
var BounceInUp = function (_ComplexAnimationBuil3) {
  (0, _inherits2.default)(BounceInUp, _ComplexAnimationBuil3);
  var _super3 = _createSuper(BounceInUp);
  function BounceInUp() {
    var _this3;
    (0, _classCallCheck2.default)(this, BounceInUp);
    _this3 = _super3.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this3), "build", function () {
      var delayFunction = _this3.getDelayFunction();
      var delay = _this3.getDelay();
      var duration = _this3.getDuration();
      var callback = _this3.callbackV;
      var initialValues = _this3.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateY: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(20, {
                duration: duration * 0.55
              }), (0, _animation.withTiming)(-10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(0, {
                duration: duration * 0.15
              })))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateY: -values.windowHeight
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this3;
  }
  (0, _createClass2.default)(BounceInUp, [{
    key: "getDuration",
    value: function getDuration() {
      var _this$durationV3;
      return (_this$durationV3 = this.durationV) != null ? _this$durationV3 : 600;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new BounceInUp();
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return 600;
    }
  }]);
  return BounceInUp;
}(_animationBuilder.ComplexAnimationBuilder);
exports.BounceInUp = BounceInUp;
var BounceInLeft = function (_ComplexAnimationBuil4) {
  (0, _inherits2.default)(BounceInLeft, _ComplexAnimationBuil4);
  var _super4 = _createSuper(BounceInLeft);
  function BounceInLeft() {
    var _this4;
    (0, _classCallCheck2.default)(this, BounceInLeft);
    _this4 = _super4.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this4), "build", function () {
      var delayFunction = _this4.getDelayFunction();
      var delay = _this4.getDelay();
      var duration = _this4.getDuration();
      var callback = _this4.callbackV;
      var initialValues = _this4.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateX: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(20, {
                duration: duration * 0.55
              }), (0, _animation.withTiming)(-10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(0, {
                duration: duration * 0.15
              })))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateX: -values.windowWidth
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this4;
  }
  (0, _createClass2.default)(BounceInLeft, [{
    key: "getDuration",
    value: function getDuration() {
      var _this$durationV4;
      return (_this$durationV4 = this.durationV) != null ? _this$durationV4 : 600;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new BounceInLeft();
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return 600;
    }
  }]);
  return BounceInLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.BounceInLeft = BounceInLeft;
var BounceInRight = function (_ComplexAnimationBuil5) {
  (0, _inherits2.default)(BounceInRight, _ComplexAnimationBuil5);
  var _super5 = _createSuper(BounceInRight);
  function BounceInRight() {
    var _this5;
    (0, _classCallCheck2.default)(this, BounceInRight);
    _this5 = _super5.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this5), "build", function () {
      var delayFunction = _this5.getDelayFunction();
      var delay = _this5.getDelay();
      var duration = _this5.getDuration();
      var callback = _this5.callbackV;
      var initialValues = _this5.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateX: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(-20, {
                duration: duration * 0.55
              }), (0, _animation.withTiming)(10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(-10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(0, {
                duration: duration * 0.15
              })))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateX: values.windowWidth
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this5;
  }
  (0, _createClass2.default)(BounceInRight, [{
    key: "getDuration",
    value: function getDuration() {
      var _this$durationV5;
      return (_this$durationV5 = this.durationV) != null ? _this$durationV5 : 600;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new BounceInRight();
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return 600;
    }
  }]);
  return BounceInRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.BounceInRight = BounceInRight;
var BounceOut = function (_ComplexAnimationBuil6) {
  (0, _inherits2.default)(BounceOut, _ComplexAnimationBuil6);
  var _super6 = _createSuper(BounceOut);
  function BounceOut() {
    var _this6;
    (0, _classCallCheck2.default)(this, BounceOut);
    _this6 = _super6.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this6), "build", function () {
      var delayFunction = _this6.getDelayFunction();
      var delay = _this6.getDelay();
      var duration = _this6.getDuration();
      var callback = _this6.callbackV;
      var initialValues = _this6.initialValues;
      return function () {
        'worklet';

        return {
          animations: {
            transform: [{
              scale: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(1.1, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(0.9, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(1.2, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(0, {
                duration: duration * 0.55
              })))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              scale: 1
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this6;
  }
  (0, _createClass2.default)(BounceOut, [{
    key: "getDuration",
    value: function getDuration() {
      var _this$durationV6;
      return (_this$durationV6 = this.durationV) != null ? _this$durationV6 : 600;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new BounceOut();
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return 600;
    }
  }]);
  return BounceOut;
}(_animationBuilder.ComplexAnimationBuilder);
exports.BounceOut = BounceOut;
var BounceOutDown = function (_ComplexAnimationBuil7) {
  (0, _inherits2.default)(BounceOutDown, _ComplexAnimationBuil7);
  var _super7 = _createSuper(BounceOutDown);
  function BounceOutDown() {
    var _this7;
    (0, _classCallCheck2.default)(this, BounceOutDown);
    _this7 = _super7.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this7), "build", function () {
      var delayFunction = _this7.getDelayFunction();
      var delay = _this7.getDelay();
      var duration = _this7.getDuration();
      var callback = _this7.callbackV;
      var initialValues = _this7.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateY: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(-10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(-20, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(values.windowHeight, {
                duration: duration * 0.55
              })))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateY: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this7;
  }
  (0, _createClass2.default)(BounceOutDown, [{
    key: "getDuration",
    value: function getDuration() {
      var _this$durationV7;
      return (_this$durationV7 = this.durationV) != null ? _this$durationV7 : 600;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new BounceOutDown();
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return 600;
    }
  }]);
  return BounceOutDown;
}(_animationBuilder.ComplexAnimationBuilder);
exports.BounceOutDown = BounceOutDown;
var BounceOutUp = function (_ComplexAnimationBuil8) {
  (0, _inherits2.default)(BounceOutUp, _ComplexAnimationBuil8);
  var _super8 = _createSuper(BounceOutUp);
  function BounceOutUp() {
    var _this8;
    (0, _classCallCheck2.default)(this, BounceOutUp);
    _this8 = _super8.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this8), "build", function () {
      var delayFunction = _this8.getDelayFunction();
      var delay = _this8.getDelay();
      var duration = _this8.getDuration();
      var callback = _this8.callbackV;
      var initialValues = _this8.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateY: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(-10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(20, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(-values.windowHeight, {
                duration: duration * 0.55
              })))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateY: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this8;
  }
  (0, _createClass2.default)(BounceOutUp, [{
    key: "getDuration",
    value: function getDuration() {
      var _this$durationV8;
      return (_this$durationV8 = this.durationV) != null ? _this$durationV8 : 600;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new BounceOutUp();
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return 600;
    }
  }]);
  return BounceOutUp;
}(_animationBuilder.ComplexAnimationBuilder);
exports.BounceOutUp = BounceOutUp;
var BounceOutLeft = function (_ComplexAnimationBuil9) {
  (0, _inherits2.default)(BounceOutLeft, _ComplexAnimationBuil9);
  var _super9 = _createSuper(BounceOutLeft);
  function BounceOutLeft() {
    var _this9;
    (0, _classCallCheck2.default)(this, BounceOutLeft);
    _this9 = _super9.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this9), "build", function () {
      var delayFunction = _this9.getDelayFunction();
      var delay = _this9.getDelay();
      var duration = _this9.getDuration();
      var callback = _this9.callbackV;
      var initialValues = _this9.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateX: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(-10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(20, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(-values.windowWidth, {
                duration: duration * 0.55
              })))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateX: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this9;
  }
  (0, _createClass2.default)(BounceOutLeft, [{
    key: "getDuration",
    value: function getDuration() {
      var _this$durationV9;
      return (_this$durationV9 = this.durationV) != null ? _this$durationV9 : 600;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new BounceOutLeft();
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return 600;
    }
  }]);
  return BounceOutLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.BounceOutLeft = BounceOutLeft;
var BounceOutRight = function (_ComplexAnimationBuil10) {
  (0, _inherits2.default)(BounceOutRight, _ComplexAnimationBuil10);
  var _super10 = _createSuper(BounceOutRight);
  function BounceOutRight() {
    var _this10;
    (0, _classCallCheck2.default)(this, BounceOutRight);
    _this10 = _super10.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this10), "build", function () {
      var delayFunction = _this10.getDelayFunction();
      var delay = _this10.getDelay();
      var duration = _this10.getDuration();
      var callback = _this10.callbackV;
      var initialValues = _this10.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            transform: [{
              translateX: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(-10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(10, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(-20, {
                duration: duration * 0.15
              }), (0, _animation.withTiming)(values.windowWidth, {
                duration: duration * 0.55
              })))
            }]
          },
          initialValues: Object.assign({
            transform: [{
              translateX: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this10;
  }
  (0, _createClass2.default)(BounceOutRight, [{
    key: "getDuration",
    value: function getDuration() {
      var _this$durationV10;
      return (_this$durationV10 = this.durationV) != null ? _this$durationV10 : 600;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new BounceOutRight();
    }
  }, {
    key: "getDuration",
    value: function getDuration() {
      return 600;
    }
  }]);
  return BounceOutRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.BounceOutRight = BounceOutRight;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,