7034f927612eb23d5ae75a37a1b23b71
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.callMicrotasks = void 0;
exports.runOnJS = runOnJS;
exports.runOnUI = runOnUI;
exports.runOnUIImmediately = runOnUIImmediately;
exports.setupMicrotasks = setupMicrotasks;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _PlatformChecker = require("./PlatformChecker");
var _shareables = require("./shareables");
var IS_JEST = (0, _PlatformChecker.isJest)();
var IS_NATIVE = !(0, _PlatformChecker.shouldBeUseWeb)();
var _runOnUIQueue = [];
function setupMicrotasks() {
  'worklet';

  var microtasksQueue = [];
  var isExecutingMicrotasksQueue = false;
  global.queueMicrotask = function (callback) {
    microtasksQueue.push(callback);
  };
  global.__callMicrotasks = function () {
    if (isExecutingMicrotasksQueue) {
      return;
    }
    try {
      isExecutingMicrotasksQueue = true;
      for (var index = 0; index < microtasksQueue.length; index += 1) {
        microtasksQueue[index]();
      }
      microtasksQueue = [];
      global._maybeFlushUIUpdatesQueue();
    } finally {
      isExecutingMicrotasksQueue = false;
    }
  };
}
function callMicrotasksOnUIThread() {
  'worklet';

  global.__callMicrotasks();
}
var callMicrotasks = IS_NATIVE ? callMicrotasksOnUIThread : function () {};
exports.callMicrotasks = callMicrotasks;
function runOnUI(worklet) {
  'worklet';

  if (__DEV__ && IS_NATIVE && _WORKLET) {
    throw new Error('runOnUI() cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.');
  }
  if (__DEV__ && IS_NATIVE && worklet.__workletHash === undefined) {
    throw new Error('runOnUI() can only be used on worklets');
  }
  return function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (IS_JEST) {
      _NativeReanimated.default.scheduleOnUI((0, _shareables.makeShareableCloneRecursive)(function () {
        'worklet';

        worklet.apply(void 0, args);
      }));
      return;
    }
    if (__DEV__) {
      (0, _shareables.makeShareableCloneRecursive)(worklet);
      (0, _shareables.makeShareableCloneRecursive)(args);
    }
    _runOnUIQueue.push([worklet, args]);
    if (_runOnUIQueue.length === 1) {
      queueMicrotask(function () {
        var queue = _runOnUIQueue;
        _runOnUIQueue = [];
        _NativeReanimated.default.scheduleOnUI((0, _shareables.makeShareableCloneRecursive)(function () {
          'worklet';

          queue.forEach(function (_ref) {
            var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
              worklet = _ref2[0],
              args = _ref2[1];
            worklet.apply(void 0, (0, _toConsumableArray2.default)(args));
          });
          callMicrotasks();
        }));
      });
    }
  };
}
function runOnUIImmediately(worklet) {
  'worklet';

  if (__DEV__ && IS_NATIVE && _WORKLET) {
    throw new Error('runOnUIImmediately() cannot be called on the UI runtime. Please call the function synchronously or use `queueMicrotask` or `requestAnimationFrame` instead.');
  }
  if (__DEV__ && IS_NATIVE && worklet.__workletHash === undefined) {
    throw new Error('runOnUIImmediately() can only be used on worklets');
  }
  return function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    _NativeReanimated.default.scheduleOnUI((0, _shareables.makeShareableCloneRecursive)(function () {
      'worklet';

      worklet.apply(void 0, args);
    }));
  };
}
if (__DEV__ && IS_NATIVE) {
  var f = function f() {
    'worklet';
  };
  if (f.__workletHash === undefined) {
    throw new Error('Failed to create a worklet. Did you forget to add Reanimated Babel plugin in babel.config.js? See installation docs at https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/installation#babel-plugin.');
  }
}
function runWorkletOnJS(worklet) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }
  worklet.apply(void 0, args);
}
function runOnJS(fun) {
  'worklet';

  if (!IS_NATIVE || !_WORKLET) {
    return function () {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return queueMicrotask(args.length ? function () {
        return fun.apply(void 0, args);
      } : fun);
    };
  }
  if (fun.__workletHash) {
    return function () {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      return runOnJS(runWorkletOnJS).apply(void 0, [fun].concat(args));
    };
  }
  if (fun.__remoteFunction) {
    fun = fun.__remoteFunction;
  }
  return function () {
    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }
    _scheduleOnJS(fun, args.length > 0 ? (0, _shareables.makeShareableCloneOnUIRecursive)(args) : undefined);
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlUmVhbmltYXRlZCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1BsYXRmb3JtQ2hlY2tlciIsIl9zaGFyZWFibGVzIiwiSVNfSkVTVCIsImlzSmVzdCIsIklTX05BVElWRSIsInNob3VsZEJlVXNlV2ViIiwiX3J1bk9uVUlRdWV1ZSIsInNldHVwTWljcm90YXNrcyIsIm1pY3JvdGFza3NRdWV1ZSIsImlzRXhlY3V0aW5nTWljcm90YXNrc1F1ZXVlIiwiZ2xvYmFsIiwicXVldWVNaWNyb3Rhc2siLCJjYWxsYmFjayIsInB1c2giLCJfX2NhbGxNaWNyb3Rhc2tzIiwiaW5kZXgiLCJsZW5ndGgiLCJfbWF5YmVGbHVzaFVJVXBkYXRlc1F1ZXVlIiwiY2FsbE1pY3JvdGFza3NPblVJVGhyZWFkIiwiY2FsbE1pY3JvdGFza3MiLCJleHBvcnRzIiwicnVuT25VSSIsIndvcmtsZXQiLCJfX0RFVl9fIiwiX1dPUktMRVQiLCJFcnJvciIsIl9fd29ya2xldEhhc2giLCJ1bmRlZmluZWQiLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsIk5hdGl2ZVJlYW5pbWF0ZWRNb2R1bGUiLCJzY2hlZHVsZU9uVUkiLCJtYWtlU2hhcmVhYmxlQ2xvbmVSZWN1cnNpdmUiLCJhcHBseSIsInF1ZXVlIiwiZm9yRWFjaCIsIl9yZWYiLCJfcmVmMiIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJfdG9Db25zdW1hYmxlQXJyYXkyIiwicnVuT25VSUltbWVkaWF0ZWx5IiwiX2xlbjIiLCJfa2V5MiIsImYiLCJydW5Xb3JrbGV0T25KUyIsIl9sZW4zIiwiX2tleTMiLCJydW5PbkpTIiwiZnVuIiwiX2xlbjQiLCJfa2V5NCIsIl9sZW41IiwiX2tleTUiLCJjb25jYXQiLCJfX3JlbW90ZUZ1bmN0aW9uIiwiX2xlbjYiLCJfa2V5NiIsIl9zY2hlZHVsZU9uSlMiLCJtYWtlU2hhcmVhYmxlQ2xvbmVPblVJUmVjdXJzaXZlIl0sInNvdXJjZXMiOlsidGhyZWFkcy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTmF0aXZlUmVhbmltYXRlZE1vZHVsZSBmcm9tICcuL05hdGl2ZVJlYW5pbWF0ZWQnO1xuaW1wb3J0IHsgaXNKZXN0LCBzaG91bGRCZVVzZVdlYiB9IGZyb20gJy4vUGxhdGZvcm1DaGVja2VyJztcbmltcG9ydCB0eXBlIHsgQ29tcGxleFdvcmtsZXRGdW5jdGlvbiB9IGZyb20gJy4vY29tbW9uVHlwZXMnO1xuaW1wb3J0IHtcbiAgbWFrZVNoYXJlYWJsZUNsb25lT25VSVJlY3Vyc2l2ZSxcbiAgbWFrZVNoYXJlYWJsZUNsb25lUmVjdXJzaXZlLFxufSBmcm9tICcuL3NoYXJlYWJsZXMnO1xuXG5jb25zdCBJU19KRVNUID0gaXNKZXN0KCk7XG5jb25zdCBJU19OQVRJVkUgPSAhc2hvdWxkQmVVc2VXZWIoKTtcblxubGV0IF9ydW5PblVJUXVldWU6IEFycmF5PFtDb21wbGV4V29ya2xldEZ1bmN0aW9uPGFueVtdLCBhbnk+LCBhbnlbXV0+ID0gW107XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cE1pY3JvdGFza3MoKSB7XG4gICd3b3JrbGV0JztcblxuICBsZXQgbWljcm90YXNrc1F1ZXVlOiBBcnJheTwoKSA9PiB2b2lkPiA9IFtdO1xuICBsZXQgaXNFeGVjdXRpbmdNaWNyb3Rhc2tzUXVldWUgPSBmYWxzZTtcbiAgZ2xvYmFsLnF1ZXVlTWljcm90YXNrID0gKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSA9PiB7XG4gICAgbWljcm90YXNrc1F1ZXVlLnB1c2goY2FsbGJhY2spO1xuICB9O1xuXG4gIGdsb2JhbC5fX2NhbGxNaWNyb3Rhc2tzID0gKCkgPT4ge1xuICAgIGlmIChpc0V4ZWN1dGluZ01pY3JvdGFza3NRdWV1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgaXNFeGVjdXRpbmdNaWNyb3Rhc2tzUXVldWUgPSB0cnVlO1xuICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG1pY3JvdGFza3NRdWV1ZS5sZW5ndGg7IGluZGV4ICs9IDEpIHtcbiAgICAgICAgLy8gd2UgdXNlIGNsYXNzaWMgJ2ZvcicgbG9vcCBiZWNhdXNlIHRoZSBzaXplIG9mIHRoZSBjdXJyZW50VGFza3MgYXJyYXkgbWF5IGNoYW5nZSB3aGlsZSBleGVjdXRpbmcgc29tZSBvZiB0aGUgY2FsbGJhY2tzIGR1ZSB0byBxdWV1ZU1pY3JvdGFzayBjYWxsc1xuICAgICAgICBtaWNyb3Rhc2tzUXVldWVbaW5kZXhdKCk7XG4gICAgICB9XG4gICAgICBtaWNyb3Rhc2tzUXVldWUgPSBbXTtcbiAgICAgIGdsb2JhbC5fbWF5YmVGbHVzaFVJVXBkYXRlc1F1ZXVlKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGlzRXhlY3V0aW5nTWljcm90YXNrc1F1ZXVlID0gZmFsc2U7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBjYWxsTWljcm90YXNrc09uVUlUaHJlYWQoKSB7XG4gICd3b3JrbGV0JztcbiAgZ2xvYmFsLl9fY2FsbE1pY3JvdGFza3MoKTtcbn1cblxuZXhwb3J0IGNvbnN0IGNhbGxNaWNyb3Rhc2tzID0gSVNfTkFUSVZFXG4gID8gY2FsbE1pY3JvdGFza3NPblVJVGhyZWFkXG4gIDogKCkgPT4ge1xuICAgICAgLy8gb24gd2ViIGZsdXNoaW5nIGlzIGEgbm9vcCBhcyBpbW1lZGlhdGVzIGFyZSBoYW5kbGVkIGJ5IHRoZSBicm93c2VyXG4gICAgfTtcblxuLyoqXG4gKiBTY2hlZHVsZSBhIHdvcmtsZXQgdG8gZXhlY3V0ZSBvbiB0aGUgVUkgcnVudGltZS4gVGhpcyBtZXRob2QgZG9lcyBub3Qgc2NoZWR1bGUgdGhlIHdvcmsgaW1tZWRpYXRlbHkgYnV0IGluc3RlYWRcbiAqIHdhaXRzIGZvciBvdGhlciB3b3JrbGV0cyB0byBiZSBzY2hlZHVsZWQgd2l0aGluIHRoZSBzYW1lIEpTIGxvb3AuIEl0IHVzZXMgcXVldWVNaWNyb3Rhc2sgdG8gc2NoZWR1bGUgYWxsIHRoZSB3b3JrbGV0c1xuICogYXQgb25jZSBtYWtpbmcgc3VyZSB0aGV5IHdpbGwgcnVuIHdpdGhpbiB0aGUgc2FtZSBmcmFtZSBib3VuZGFyaWVzIG9uIHRoZSBVSSB0aHJlYWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBydW5PblVJPEEgZXh0ZW5kcyBhbnlbXSwgUj4oXG4gIHdvcmtsZXQ6IENvbXBsZXhXb3JrbGV0RnVuY3Rpb248QSwgUj5cbik6ICguLi5hcmdzOiBBKSA9PiB2b2lkIHtcbiAgJ3dvcmtsZXQnO1xuICBpZiAoX19ERVZfXyAmJiBJU19OQVRJVkUgJiYgX1dPUktMRVQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAncnVuT25VSSgpIGNhbm5vdCBiZSBjYWxsZWQgb24gdGhlIFVJIHJ1bnRpbWUuIFBsZWFzZSBjYWxsIHRoZSBmdW5jdGlvbiBzeW5jaHJvbm91c2x5IG9yIHVzZSBgcXVldWVNaWNyb3Rhc2tgIG9yIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIGluc3RlYWQuJ1xuICAgICk7XG4gIH1cbiAgaWYgKF9fREVWX18gJiYgSVNfTkFUSVZFICYmIHdvcmtsZXQuX193b3JrbGV0SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdydW5PblVJKCkgY2FuIG9ubHkgYmUgdXNlZCBvbiB3b3JrbGV0cycpO1xuICB9XG4gIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgIGlmIChJU19KRVNUKSB7XG4gICAgICAvLyBNb2NraW5nIHRpbWUgaW4gSmVzdCBpcyB0cmlja3kgYXMgYm90aCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgYW5kIHF1ZXVlTWljcm90YXNrXG4gICAgICAvLyBjYWxsYmFja3MgcnVuIG9uIHRoZSBzYW1lIHF1ZXVlIGFuZCBjYW4gYmUgaW50ZXJsZWF2ZWQuIFRoZXJlIGlzIG5vIHdheVxuICAgICAgLy8gdG8gZmx1c2ggcGFydGljdWxhciBxdWV1ZSBpbiBKZXN0IGFuZCB0aGUgb25seSBjb250cm9sIG92ZXIgbW9ja2VkIHRpbWVyc1xuICAgICAgLy8gaXMgYnkgdXNpbmcgamVzdC5hZHZhbmNlVGltZXJzQnlUaW1lKCkgbWV0aG9kIHdoaWNoIGFkdmFuY2VzIGFsbCB0eXBlc1xuICAgICAgLy8gb2YgdGltZXJzIGluY2x1ZGluZyBpbW1lZGlhdGUgYW5kIGFuaW1hdGlvbiBjYWxsYmFja3MuIElkZWFsbHkgd2UnZCBsaWtlXG4gICAgICAvLyB0byBoYXZlIHNvbWUgd2F5IGhlcmUgdG8gc2NoZWR1bGUgd29yayBhbG9uZyB3aXRoIFJlYWN0IHVwZGF0ZXMsIGJ1dFxuICAgICAgLy8gdGhhdCdzIG5vdCBwb3NzaWJsZSwgYW5kIGhlbmNlIGluIEplc3QgZW52aXJvbm1lbnQgaW5zdGVhZCBvZiB1c2luZyBzY2hlZHVsaW5nXG4gICAgICAvLyBtZWNoYW5pc20gd2UganVzdCBzY2hlZHVsZSB0aGUgd29yayBvbW1pdGluZyB0aGUgcXVldWUuIFRoaXMgaXMgb2sgZm9yIHRoZVxuICAgICAgLy8gdXNlcyB0aGF0IHdlIGN1cnJlbnRseSBoYXZlIGJ1dCBtYXkgbm90IGJlIG9rIGZvciBmdXR1cmUgdGVzdHMgdGhhdCB3ZSB3cml0ZS5cbiAgICAgIE5hdGl2ZVJlYW5pbWF0ZWRNb2R1bGUuc2NoZWR1bGVPblVJKFxuICAgICAgICBtYWtlU2hhcmVhYmxlQ2xvbmVSZWN1cnNpdmUoKCkgPT4ge1xuICAgICAgICAgICd3b3JrbGV0JztcbiAgICAgICAgICB3b3JrbGV0KC4uLmFyZ3MpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIC8vIGluIERFViBtb2RlIHdlIGNhbGwgc2hhcmVhYmxlIGNvbnZlcnNpb24gaGVyZSBiZWNhdXNlIGluIGNhc2UgdGhlIG9iamVjdFxuICAgICAgLy8gY2FuJ3QgYmUgY29udmVydGVkLCB3ZSB3aWxsIGdldCBhIG1lYW5pbmdmdWwgc3RhY2stdHJhY2UgYXMgb3Bwb3NlZCB0byB0aGVcbiAgICAgIC8vIHNpdHVhdGlvbiB3aGVuIGNvbnZlcnNpb24gaXMgb25seSBkb25lIHZpYSBtaWNyb3Rhc2sgcXVldWUuIFRoaXMgZG9lcyBub3RcbiAgICAgIC8vIG1ha2UgdGhlIGFwcCBwYXJ0aWN1bGFyaWx5IGxlc3MgZWZmaWNpZW50IGFzIGNvbnZlcnRlZCBvYmplY3RzIGFyZSBjYWNoZWRcbiAgICAgIC8vIGFuZCBmb3IgYSBnaXZlbiB3b3JrbGV0IHRoZSBjb252ZXJzaW9uIG9ubHkgaGFwcGVucyBvbmNlLlxuICAgICAgbWFrZVNoYXJlYWJsZUNsb25lUmVjdXJzaXZlKHdvcmtsZXQpO1xuICAgICAgbWFrZVNoYXJlYWJsZUNsb25lUmVjdXJzaXZlKGFyZ3MpO1xuICAgIH1cbiAgICBfcnVuT25VSVF1ZXVlLnB1c2goW3dvcmtsZXQsIGFyZ3NdKTtcbiAgICBpZiAoX3J1bk9uVUlRdWV1ZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICAgICAgY29uc3QgcXVldWUgPSBfcnVuT25VSVF1ZXVlO1xuICAgICAgICBfcnVuT25VSVF1ZXVlID0gW107XG4gICAgICAgIE5hdGl2ZVJlYW5pbWF0ZWRNb2R1bGUuc2NoZWR1bGVPblVJKFxuICAgICAgICAgIG1ha2VTaGFyZWFibGVDbG9uZVJlY3Vyc2l2ZSgoKSA9PiB7XG4gICAgICAgICAgICAnd29ya2xldCc7XG4gICAgICAgICAgICBxdWV1ZS5mb3JFYWNoKChbd29ya2xldCwgYXJnc10pID0+IHtcbiAgICAgICAgICAgICAgd29ya2xldCguLi5hcmdzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgY2FsbE1pY3JvdGFza3MoKTtcbiAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG4vKipcbiAqIFNjaGVkdWxlIGEgd29ya2xldCB0byBleGVjdXRlIG9uIHRoZSBVSSBydW50aW1lIHNraXBwaW5nIGJhdGNoaW5nIG1lY2hhbmlzbS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bk9uVUlJbW1lZGlhdGVseTxBIGV4dGVuZHMgYW55W10sIFI+KFxuICB3b3JrbGV0OiBDb21wbGV4V29ya2xldEZ1bmN0aW9uPEEsIFI+XG4pOiAoLi4uYXJnczogQSkgPT4gdm9pZCB7XG4gICd3b3JrbGV0JztcbiAgaWYgKF9fREVWX18gJiYgSVNfTkFUSVZFICYmIF9XT1JLTEVUKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ3J1bk9uVUlJbW1lZGlhdGVseSgpIGNhbm5vdCBiZSBjYWxsZWQgb24gdGhlIFVJIHJ1bnRpbWUuIFBsZWFzZSBjYWxsIHRoZSBmdW5jdGlvbiBzeW5jaHJvbm91c2x5IG9yIHVzZSBgcXVldWVNaWNyb3Rhc2tgIG9yIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIGluc3RlYWQuJ1xuICAgICk7XG4gIH1cbiAgaWYgKF9fREVWX18gJiYgSVNfTkFUSVZFICYmIHdvcmtsZXQuX193b3JrbGV0SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdydW5PblVJSW1tZWRpYXRlbHkoKSBjYW4gb25seSBiZSB1c2VkIG9uIHdvcmtsZXRzJyk7XG4gIH1cbiAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgTmF0aXZlUmVhbmltYXRlZE1vZHVsZS5zY2hlZHVsZU9uVUkoXG4gICAgICBtYWtlU2hhcmVhYmxlQ2xvbmVSZWN1cnNpdmUoKCkgPT4ge1xuICAgICAgICAnd29ya2xldCc7XG4gICAgICAgIHdvcmtsZXQoLi4uYXJncyk7XG4gICAgICB9KVxuICAgICk7XG4gIH07XG59XG5cbmlmIChfX0RFVl9fICYmIElTX05BVElWRSkge1xuICBjb25zdCBmID0gKCkgPT4ge1xuICAgICd3b3JrbGV0JztcbiAgfTtcbiAgLy8gQHRzLWlnbm9yZSBwbHVnaW5cbiAgaWYgKGYuX193b3JrbGV0SGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0ZhaWxlZCB0byBjcmVhdGUgYSB3b3JrbGV0LiBEaWQgeW91IGZvcmdldCB0byBhZGQgUmVhbmltYXRlZCBCYWJlbCBwbHVnaW4gaW4gYmFiZWwuY29uZmlnLmpzPyBTZWUgaW5zdGFsbGF0aW9uIGRvY3MgYXQgaHR0cHM6Ly9kb2NzLnN3bWFuc2lvbi5jb20vcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQvZG9jcy9mdW5kYW1lbnRhbHMvaW5zdGFsbGF0aW9uI2JhYmVsLXBsdWdpbi4nXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBydW5Xb3JrbGV0T25KUzxBIGV4dGVuZHMgYW55W10sIFI+KFxuICB3b3JrbGV0OiBDb21wbGV4V29ya2xldEZ1bmN0aW9uPEEsIFI+LFxuICAuLi5hcmdzOiBBXG4pOiB2b2lkIHtcbiAgLy8gcmVtb3RlIGZ1bmN0aW9uIHRoYXQgY2FsbHMgYSB3b3JrbGV0IHN5bmNocm9ub3VzbHkgb24gdGhlIEpTIHJ1bnRpbWVcbiAgd29ya2xldCguLi5hcmdzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJ1bk9uSlM8QSBleHRlbmRzIGFueVtdLCBSPihcbiAgZnVuOiBDb21wbGV4V29ya2xldEZ1bmN0aW9uPEEsIFI+XG4pOiAoLi4uYXJnczogQSkgPT4gdm9pZCB7XG4gICd3b3JrbGV0JztcbiAgaWYgKCFJU19OQVRJVkUgfHwgIV9XT1JLTEVUKSB7XG4gICAgLy8gaWYgd2UgYXJlIGFscmVhZHkgb24gdGhlIEpTIHRocmVhZCwgd2UganVzdCBzY2hlZHVsZSB0aGUgd29ya2xldCBvbiB0aGUgSlMgcXVldWVcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHF1ZXVlTWljcm90YXNrKGFyZ3MubGVuZ3RoID8gKCkgPT4gZnVuKC4uLmFyZ3MpIDogZnVuKTtcbiAgfVxuICBpZiAoZnVuLl9fd29ya2xldEhhc2gpIHtcbiAgICAvLyBpZiBgZnVuYCBpcyBhIHdvcmtsZXQsIHdlIHNjaGVkdWxlIGEgY2FsbCBvZiBhIHJlbW90ZSBmdW5jdGlvbiBgcnVuV29ya2xldE9uSlNgXG4gICAgLy8gYW5kIHBhc3MgdGhlIHdvcmtsZXQgYXMgYSBmaXJzdCBhcmd1bWVudCBmb2xsb3dlZCBieSBvcmlnaW5hbCBhcmd1bWVudHNcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IHJ1bk9uSlMocnVuV29ya2xldE9uSlM8QSwgUj4pKGZ1biwgLi4uYXJncyk7XG4gIH1cbiAgaWYgKGZ1bi5fX3JlbW90ZUZ1bmN0aW9uKSB7XG4gICAgLy8gaW4gZGV2ZWxvcG1lbnQgbW9kZSB0aGUgZnVuY3Rpb24gcHJvdmlkZWQgYXMgYGZ1bmAgdGhyb3dzIGFuIGVycm9yIG1lc3NhZ2VcbiAgICAvLyBzdWNoIHRoYXQgd2hlbiBzb21lb25lIGFjY2lkZW50YWxseSBjYWxscyBpdCBkaXJlY3RseSBvbiB0aGUgVUkgcnVudGltZSwgdGhleVxuICAgIC8vIHNlZSB0aGF0IHRoZXkgc2hvdWxkIHVzZSBgcnVuT25KU2AgaW5zdGVhZC4gVG8gZmFjaWxpdGF0ZSB0aGF0IHdlIHB1dCB0aGVcbiAgICAvLyByZWZlcmVuY2UgdG8gdGhlIG9yaWdpbmFsIHJlbW90ZSBmdW5jdGlvbiBpbiB0aGUgYF9fcmVtb3RlRnVuY3Rpb25gIHByb3BlcnR5LlxuICAgIGZ1biA9IGZ1bi5fX3JlbW90ZUZ1bmN0aW9uO1xuICB9XG4gIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgIF9zY2hlZHVsZU9uSlMoXG4gICAgICBmdW4sXG4gICAgICBhcmdzLmxlbmd0aCA+IDBcbiAgICAgICAgPyAobWFrZVNoYXJlYWJsZUNsb25lT25VSVJlY3Vyc2l2ZShhcmdzKSBhcyB1bmtub3duIGFzIHVua25vd25bXSlcbiAgICAgICAgOiB1bmRlZmluZWRcbiAgICApO1xuICB9O1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBLElBQUFBLGlCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxnQkFBQSxHQUFBRCxPQUFBO0FBRUEsSUFBQUUsV0FBQSxHQUFBRixPQUFBO0FBS0EsSUFBTUcsT0FBTyxHQUFHLElBQUFDLHVCQUFNLEdBQUU7QUFDeEIsSUFBTUMsU0FBUyxHQUFHLENBQUMsSUFBQUMsK0JBQWMs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