{"version":3,"names":["_react","require","_useSharedValue","_fabricUtils","_shareables","_reactNative","getComponentOrScrollableRef","component","global","_IS_FABRIC","getNativeScrollRef","getScrollableNode","getTagValueFunction","getShadowNodeWrapperFromRef","findNodeHandle","useAnimatedRef","tag","useSharedValue","ref","useRef","current","fun","value","remoteRef","makeShareableCloneRecursive","__init","registerShareableMapping"],"sources":["useAnimatedRef.ts"],"sourcesContent":["import type { Component } from 'react';\nimport { useRef } from 'react';\nimport { useSharedValue } from './useSharedValue';\nimport type { AnimatedRef, RefObjectFunction } from './commonTypes';\nimport type { ShadowNodeWrapper } from '../commonTypes';\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport {\n  makeShareableCloneRecursive,\n  registerShareableMapping,\n} from '../shareables';\nimport { findNodeHandle } from 'react-native';\n\ninterface ComponentRef extends Component {\n  getNativeScrollRef?: () => ComponentRef;\n  getScrollableNode?: () => ComponentRef;\n}\n\nfunction getComponentOrScrollableRef(component: ComponentRef): ComponentRef {\n  if (global._IS_FABRIC && component.getNativeScrollRef) {\n    return component.getNativeScrollRef();\n  } else if (!global._IS_FABRIC && component.getScrollableNode) {\n    return component.getScrollableNode();\n  }\n  return component;\n}\n\nconst getTagValueFunction = global._IS_FABRIC\n  ? getShadowNodeWrapperFromRef\n  : findNodeHandle;\n\nexport function useAnimatedRef<T extends ComponentRef>(): AnimatedRef<T> {\n  const tag = useSharedValue<number | ShadowNodeWrapper | null>(-1);\n  const ref = useRef<RefObjectFunction<T>>();\n\n  if (!ref.current) {\n    const fun: RefObjectFunction<T> = <RefObjectFunction<T>>((component) => {\n      // enters when ref is set by attaching to a component\n      if (component) {\n        tag.value = getTagValueFunction(getComponentOrScrollableRef(component));\n        fun.current = component;\n      }\n      return tag.value;\n    });\n\n    fun.current = null;\n\n    const remoteRef = makeShareableCloneRecursive({\n      __init: () => {\n        'worklet';\n        return () => tag.value;\n      },\n    });\n    registerShareableMapping(fun, remoteRef);\n    ref.current = fun;\n  }\n\n  return ref.current;\n}\n"],"mappings":";;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,eAAA,GAAAD,OAAA;AAGA,IAAAE,YAAA,GAAAF,OAAA;AACA,IAAAG,WAAA,GAAAH,OAAA;AAIA,IAAAI,YAAA,GAAAJ,OAAA;AAOA,SAASK,2BAA2BA,CAACC,SAAuB,EAAgB;EAC1E,IAAIC,MAAM,CAACC,UAAU,IAAIF,SAAS,CAACG,kBAAkB,EAAE;IACrD,OAAOH,SAAS,CAACG,kBAAkB,EAAE;EACvC,CAAC,MAAM,IAAI,CAACF,MAAM,CAACC,UAAU,IAAIF,SAAS,CAACI,iBAAiB,EAAE;IAC5D,OAAOJ,SAAS,CAACI,iBAAiB,EAAE;EACtC;EACA,OAAOJ,SAAS;AAClB;AAEA,IAAMK,mBAAmB,GAAGJ,MAAM,CAACC,UAAU,GACzCI,wCAA2B,GAC3BC,2BAAc;AAEX,SAASC,cAAcA,CAAA,EAA2C;EACvE,IAAMC,GAAG,GAAG,IAAAC,8BAAc,EAAoC,CAAC,CAAC,CAAC;EACjE,IAAMC,GAAG,GAAG,IAAAC,aAAM,GAAwB;EAE1C,IAAI,CAACD,GAAG,CAACE,OAAO,EAAE;IAChB,IAAMC,GAAyB,GAA2B,SAApDA,GAAyBA,CAA2Bd,SAAS,EAAK;MAEtE,IAAIA,SAAS,EAAE;QACbS,GAAG,CAACM,KAAK,GAAGV,mBAAmB,CAACN,2BAA2B,CAACC,SAAS,CAAC,CAAC;QACvEc,GAAG,CAACD,OAAO,GAAGb,SAAS;MACzB;MACA,OAAOS,GAAG,CAACM,KAAK;IAClB,CAAE;IAEFD,GAAG,CAACD,OAAO,GAAG,IAAI;IAElB,IAAMG,SAAS,GAAG,IAAAC,uCAA2B,EAAC;MAC5CC,MAAM,EAAE,SAAAA,OAAA,EAAM;QACZ,SAAS;;QACT,OAAO;UAAA,OAAMT,GAAG,CAACM,KAAK;QAAA;MACxB;IACF,CAAC,CAAC;IACF,IAAAI,oCAAwB,EAACL,GAAG,EAAEE,SAAS,CAAC;IACxCL,GAAG,CAACE,OAAO,GAAGC,GAAG;EACnB;EAEA,OAAOH,GAAG,CAACE,OAAO;AACpB"}