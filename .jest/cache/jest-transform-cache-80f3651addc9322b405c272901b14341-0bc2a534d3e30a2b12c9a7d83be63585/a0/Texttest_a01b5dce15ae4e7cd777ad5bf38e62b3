a558b466d63182510d5850febc2e9b47
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
var react_1 = __importDefault(require("react"));
describe('Text Component', function () {
  it('renders correctly with default props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title"
      })),
      getByText = _ref.getByText;
    expect(getByText('Test Title')).toBeTruthy();
  });
  it('applies the correct style based on the "h" prop', function () {
    var styles = ['h0', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7', 'h8', 'h9', 'h10', 'h11', 'h12'];
    styles.forEach(function (style) {
      var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
          title: "Test Title",
          h: style
        })),
        getByTestId = _ref2.getByTestId;
      var receivedStyle = getByTestId('text-component').props.style;
      expect(receivedStyle).toEqual(expect.objectContaining(_1.textStyles[style]));
    });
  });
  it('applies the oneColor prop correctly', function () {
    var customTextStyle = {
      fontWeight: 'bold',
      fontStyle: 'italic'
    };
    var oneColor = 'blue';
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title",
        oneColor: oneColor,
        textStyle: customTextStyle
      })),
      getByTestId = _ref3.getByTestId;
    var textComponent = getByTestId('text-component');
    console.log('Received Style:', textComponent.props.style);
    expect(textComponent.props.style[0]).toMatchObject({
      color: 'blue'
    });
  });
  it('applies the textStyle prop correctly', function () {
    var customTextStyle = {
      fontWeight: 'bold',
      fontStyle: 'italic'
    };
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title",
        textStyle: customTextStyle
      })),
      getByTestId = _ref4.getByTestId;
    var textComponent = getByTestId('text-component');
    console.log('Received Style:', textComponent.props.style);
    expect(textComponent.props.style[1]).toMatchObject(customTextStyle);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF9uYXRpdmVfMSIsInJlcXVpcmUiLCJfMSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJkZXNjcmliZSIsIml0IiwiX3JlZiIsInJlbmRlciIsIl9qc3hSdW50aW1lIiwianN4IiwiVGV4dCIsInRpdGxlIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsInN0eWxlcyIsImZvckVhY2giLCJzdHlsZSIsIl9yZWYyIiwiaCIsImdldEJ5VGVzdElkIiwicmVjZWl2ZWRTdHlsZSIsInByb3BzIiwidG9FcXVhbCIsIm9iamVjdENvbnRhaW5pbmciLCJ0ZXh0U3R5bGVzIiwiY3VzdG9tVGV4dFN0eWxlIiwiZm9udFdlaWdodCIsImZvbnRTdHlsZSIsIm9uZUNvbG9yIiwiX3JlZjMiLCJ0ZXh0U3R5bGUiLCJ0ZXh0Q29tcG9uZW50IiwiY29uc29sZSIsImxvZyIsInRvTWF0Y2hPYmplY3QiLCJjb2xvciIsIl9yZWY0Il0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9UZXh0L1RleHQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtyZW5kZXJ9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHtUZXh0LCBoVCwgdGV4dFN0eWxlc30gZnJvbSAnLi8nIC8vIFJlcGxhY2Ugd2l0aCB5b3VyIGFjdHVhbCBmaWxlIHBhdGhcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7VGV4dFN0eWxlfSBmcm9tICdyZWFjdC1uYXRpdmUnXG5cbmRlc2NyaWJlKCdUZXh0IENvbXBvbmVudCcsICgpID0+IHtcbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggZGVmYXVsdCBwcm9wcycsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXh0fSA9IHJlbmRlcig8VGV4dCB0aXRsZT1cIlRlc3QgVGl0bGVcIiAvPilcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdUZXN0IFRpdGxlJykpLnRvQmVUcnV0aHkoKVxuICB9KVxuXG4gIGl0KCdhcHBsaWVzIHRoZSBjb3JyZWN0IHN0eWxlIGJhc2VkIG9uIHRoZSBcImhcIiBwcm9wJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0eWxlczogaFRbXSA9IFtcbiAgICAgICdoMCcsXG4gICAgICAnaDEnLFxuICAgICAgJ2gyJyxcbiAgICAgICdoMycsXG4gICAgICAnaDQnLFxuICAgICAgJ2g1JyxcbiAgICAgICdoNicsXG4gICAgICAnaDcnLFxuICAgICAgJ2g4JyxcbiAgICAgICdoOScsXG4gICAgICAnaDEwJyxcbiAgICAgICdoMTEnLFxuICAgICAgJ2gxMicsXG4gICAgXVxuICAgIHN0eWxlcy5mb3JFYWNoKHN0eWxlID0+IHtcbiAgICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPFRleHQgdGl0bGU9XCJUZXN0IFRpdGxlXCIgaD17c3R5bGV9IC8+KVxuICAgICAgY29uc3QgcmVjZWl2ZWRTdHlsZSA9IGdldEJ5VGVzdElkKCd0ZXh0LWNvbXBvbmVudCcpLnByb3BzLnN0eWxlXG4gICAgICBleHBlY3QocmVjZWl2ZWRTdHlsZSkudG9FcXVhbChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh0ZXh0U3R5bGVzW3N0eWxlXSkpXG4gICAgfSlcbiAgfSlcblxuICBpdCgnYXBwbGllcyB0aGUgb25lQ29sb3IgcHJvcCBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3QgY3VzdG9tVGV4dFN0eWxlOiBUZXh0U3R5bGUgPSB7Zm9udFdlaWdodDogJ2JvbGQnLCBmb250U3R5bGU6ICdpdGFsaWMnfVxuICAgIGNvbnN0IG9uZUNvbG9yID0gJ2JsdWUnXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcihcbiAgICAgIDxUZXh0XG4gICAgICAgIHRpdGxlPVwiVGVzdCBUaXRsZVwiXG4gICAgICAgIG9uZUNvbG9yPXtvbmVDb2xvcn1cbiAgICAgICAgdGV4dFN0eWxlPXtjdXN0b21UZXh0U3R5bGV9XG4gICAgICAvPixcbiAgICApXG4gICAgY29uc3QgdGV4dENvbXBvbmVudCA9IGdldEJ5VGVzdElkKCd0ZXh0LWNvbXBvbmVudCcpXG4gICAgY29uc29sZS5sb2coJ1JlY2VpdmVkIFN0eWxlOicsIHRleHRDb21wb25lbnQucHJvcHMuc3R5bGUpXG4gICAgZXhwZWN0KHRleHRDb21wb25lbnQucHJvcHMuc3R5bGVbMF0pLnRvTWF0Y2hPYmplY3Qoe1xuICAgICAgY29sb3I6ICdibHVlJyxcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdhcHBsaWVzIHRoZSB0ZXh0U3R5bGUgcHJvcCBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3QgY3VzdG9tVGV4dFN0eWxlOiBUZXh0U3R5bGUgPSB7Zm9udFdlaWdodDogJ2JvbGQnLCBmb250U3R5bGU6ICdpdGFsaWMnfVxuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoXG4gICAgICA8VGV4dCB0aXRsZT1cIlRlc3QgVGl0bGVcIiB0ZXh0U3R5bGU9e2N1c3RvbVRleHRTdHlsZX0gLz4sXG4gICAgKVxuICAgIGNvbnN0IHRleHRDb21wb25lbnQgPSBnZXRCeVRlc3RJZCgndGV4dC1jb21wb25lbnQnKVxuICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCBTdHlsZTonLCB0ZXh0Q29tcG9uZW50LnByb3BzLnN0eWxlKVxuICAgIGV4cGVjdCh0ZXh0Q29tcG9uZW50LnByb3BzLnN0eWxlWzFdKS50b01hdGNoT2JqZWN0KGN1c3RvbVRleHRTdHlsZSlcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxjQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxFQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUgsT0FBQTtBQUdBSSxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBSztFQUM5QkMsRUFBRSxDQUFDLHNDQUFzQyxFQUFFLFlBQUs7SUFDOUMsSUFBQUMsSUFBQSxHQUFvQixJQUFB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