33a52409484b7b7b9aa60cefc8fe76d5
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkCppVersion = checkCppVersion;
exports.matchVersion = matchVersion;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _jsVersion = require("./jsVersion");
function checkCppVersion() {
  var cppVersion = global._REANIMATED_VERSION_CPP;
  if (cppVersion === undefined) {
    throw new Error(`[Reanimated] Couldn't determine the version of the native part of Reanimated. Did you forget to re-build the app after upgrading react-native-reanimated? If you use Expo Go, you must use the exact version which is bundled into Expo SDK.`);
  }
  var ok = matchVersion(_jsVersion.jsVersion, cppVersion);
  if (!ok) {
    throw new Error(`[Reanimated] Mismatch between JavaScript part (${_jsVersion.jsVersion}) and native part of Reanimated (${cppVersion}). Did you forget to re-build the app after upgrading react-native-reanimated? If you use Expo Go, you must downgrade to ${cppVersion} which is bundled into Expo SDK.`);
  }
}
function matchVersion(version1, version2) {
  if (version1.match(/^\d+\.\d+\.\d+$/) && version2.match(/^\d+\.\d+\.\d+$/)) {
    var _version1$split = version1.split('.'),
      _version1$split2 = (0, _slicedToArray2.default)(_version1$split, 2),
      major1 = _version1$split2[0],
      minor1 = _version1$split2[1];
    var _version2$split = version2.split('.'),
      _version2$split2 = (0, _slicedToArray2.default)(_version2$split, 2),
      major2 = _version2$split2[0],
      minor2 = _version2$split2[1];
    return major1 === major2 && minor1 === minor2;
  } else {
    return version1 === version2;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfanNWZXJzaW9uIiwicmVxdWlyZSIsImNoZWNrQ3BwVmVyc2lvbiIsImNwcFZlcnNpb24iLCJnbG9iYWwiLCJfUkVBTklNQVRFRF9WRVJTSU9OX0NQUCIsInVuZGVmaW5lZCIsIkVycm9yIiwib2siLCJtYXRjaFZlcnNpb24iLCJqc1ZlcnNpb24iLCJ2ZXJzaW9uMSIsInZlcnNpb24yIiwibWF0Y2giLCJfdmVyc2lvbjEkc3BsaXQiLCJzcGxpdCIsIl92ZXJzaW9uMSRzcGxpdDIiLCJfc2xpY2VkVG9BcnJheTIiLCJkZWZhdWx0IiwibWFqb3IxIiwibWlub3IxIiwiX3ZlcnNpb24yJHNwbGl0IiwiX3ZlcnNpb24yJHNwbGl0MiIsIm1ham9yMiIsIm1pbm9yMiJdLCJzb3VyY2VzIjpbImNoZWNrQ3BwVmVyc2lvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBqc1ZlcnNpb24gfSBmcm9tICcuL2pzVmVyc2lvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0NwcFZlcnNpb24oKSB7XG4gIGNvbnN0IGNwcFZlcnNpb24gPSBnbG9iYWwuX1JFQU5JTUFURURfVkVSU0lPTl9DUFA7XG4gIGlmIChjcHBWZXJzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgW1JlYW5pbWF0ZWRdIENvdWxkbid0IGRldGVybWluZSB0aGUgdmVyc2lvbiBvZiB0aGUgbmF0aXZlIHBhcnQgb2YgUmVhbmltYXRlZC4gRGlkIHlvdSBmb3JnZXQgdG8gcmUtYnVpbGQgdGhlIGFwcCBhZnRlciB1cGdyYWRpbmcgcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQ/IElmIHlvdSB1c2UgRXhwbyBHbywgeW91IG11c3QgdXNlIHRoZSBleGFjdCB2ZXJzaW9uIHdoaWNoIGlzIGJ1bmRsZWQgaW50byBFeHBvIFNESy5gXG4gICAgKTtcbiAgfVxuICBjb25zdCBvayA9IG1hdGNoVmVyc2lvbihqc1ZlcnNpb24sIGNwcFZlcnNpb24pO1xuICBpZiAoIW9rKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYFtSZWFuaW1hdGVkXSBNaXNtYXRjaCBiZXR3ZWVuIEphdmFTY3JpcHQgcGFydCAoJHtqc1ZlcnNpb259KSBhbmQgbmF0aXZlIHBhcnQgb2YgUmVhbmltYXRlZCAoJHtjcHBWZXJzaW9ufSkuIERpZCB5b3UgZm9yZ2V0IHRvIHJlLWJ1aWxkIHRoZSBhcHAgYWZ0ZXIgdXBncmFkaW5nIHJlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkPyBJZiB5b3UgdXNlIEV4cG8gR28sIHlvdSBtdXN0IGRvd25ncmFkZSB0byAke2NwcFZlcnNpb259IHdoaWNoIGlzIGJ1bmRsZWQgaW50byBFeHBvIFNESy5gXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hWZXJzaW9uKHZlcnNpb24xOiBzdHJpbmcsIHZlcnNpb24yOiBzdHJpbmcpIHtcbiAgaWYgKHZlcnNpb24xLm1hdGNoKC9eXFxkK1xcLlxcZCtcXC5cXGQrJC8pICYmIHZlcnNpb24yLm1hdGNoKC9eXFxkK1xcLlxcZCtcXC5cXGQrJC8pKSB7XG4gICAgLy8geC55LnosIGNvbXBhcmUgb25seSBtYWpvciBhbmQgbWlub3IsIHNraXAgcGF0Y2hcbiAgICBjb25zdCBbbWFqb3IxLCBtaW5vcjFdID0gdmVyc2lvbjEuc3BsaXQoJy4nKTtcbiAgICBjb25zdCBbbWFqb3IyLCBtaW5vcjJdID0gdmVyc2lvbjIuc3BsaXQoJy4nKTtcbiAgICByZXR1cm4gbWFqb3IxID09PSBtYWpvcjIgJiYgbWlub3IxID09PSBtaW5vcjI7XG4gIH0gZWxzZSB7XG4gICAgLy8gYWxwaGEsIGJldGEgb3IgcmMsIGNvbXBhcmUgZXZlcnl0aGluZ1xuICAgIHJldHVybiB2ZXJzaW9uMSA9PT0gdmVyc2lvbjI7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFVBQUEsR0FBQUMsT0FBQTtBQUVPLFNBQVNDLGVBQWVBLENBQUEsRUFBRztFQUNoQyxJQUFNQyxVQUFVLEdBQUdDLE1BQU0sQ0FBQ0MsdUJBQXVCO0VBQ2pELElBQUlGLFVBQVUsS0FBS0csU0FBUyxFQUFFO0lBQzVCLE1BQU0sSUFBSUMsS0FBSyxDQUNaLDhPQUE2TyxDQUMvTztFQUNIO0VBQ0EsSUFBTUMsRUFBRSxHQUFHQyxZQUFZLENBQUNDLG9CQUFTLEVBQUVQLFVBQVUsQ0FBQztFQUM5QyxJQUFJLENBQUNLLEVBQUUsRUFBRTtJQUNQLE1BQU0sSUFBSUQsS0FBSyxDQUNaLGtEQUFpREcsb0JBQVUsb0NBQW1DUCxVQUFXLDRIQUEySEEsVUFBVyxrQ0FBaUMsQ0FDbFI7RUFDSDtBQUNGO0FBRU8sU0FBU00sWUFBWUEsQ0FBQ0UsUUFBZ0IsRUFBRUMsUUFBZ0IsRUFBRTtFQUMvRCxJQUFJRCxRQUFRLENBQUNFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJRCxRQUFRLENBQUNDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO0lBRTFFLElBQUFDLGVBQUEsR0FBeUJILFFBQVEsQ0FBQ0ksS0FBSyxDQUFDLEdBQUcsQ0FBQztNQUFBQyxnQkFBQSxPQUFBQyxlQUFBLENBQUFDLE9BQUEsRUFBQUosZUFBQTtNQUFyQ0ssTUFBTSxHQUFBSCxnQkFBQTtNQUFFSSxNQUFNLEdBQUFKLGdCQUFBO0lBQ3JCLElBQUFLLGVBQUEsR0FBeUJULFFBQVEsQ0FBQ0csS0FBSyxDQUFDLEdBQUcsQ0FBQztNQUFBTyxnQkFBQSxPQUFBTCxlQUFBLENBQUFDLE9BQUEsRUFBQUcsZUFBQTtNQUFyQ0UsTUFBTSxHQUFBRCxnQkFBQTtNQUFFRSxNQUFNLEdBQUFGLGdCQUFBO0lBQ3JCLE9BQU9ILE1BQU0sS0FBS0ksTUFBTSxJQUFJSCxNQUFNLEtBQUtJLE1BQU07RUFDL0MsQ0FBQyxNQUFNO0lBRUwsT0FBT2IsUUFBUSxLQUFLQyxRQUFRO0VBQzlCO0FBQ0YifQ==