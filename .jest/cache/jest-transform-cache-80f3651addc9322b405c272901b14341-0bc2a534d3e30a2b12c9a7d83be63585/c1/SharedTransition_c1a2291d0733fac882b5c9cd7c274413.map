{"version":3,"names":["_animation","require","_commonTypes","_core","_ProgressTransitionManager","supportedProps","SharedTransition","_classCallCheck2","default","_defineProperty","undefined","_createClass2","key","value","custom","customAnimationFactory","_customAnimationFactory","progressAnimation","progressAnimationCallback","_customProgressAnimation","viewTag","values","progress","newStyles","_notifyAboutProgress","duration","_transitionDuration","defaultTransitionType","transitionType","_defaultTransitionType","registerTransition","sharedTransitionTag","transitionAnimation","getTransitionAnimation","getProgressAnimation","SharedTransitionType","ANIMATION","PROGRESS_ANIMATION","layoutAnimationType","LayoutAnimationType","SHARED_ELEMENT_TRANSITION","SHARED_ELEMENT_TRANSITION_PROGRESS","configureLayoutAnimations","_progressTransitionManager","addProgressAnimation","unregisterTransition","removeProgressAnimation","buildAnimation","_progressAnimation","buildProgressAnimation","animationFactory","transitionDuration","animations","initialValues","includes","Error","propName","matrix","targetTransformMatrix","transformMatrix","withTiming","keyToTargetValue","charAt","toUpperCase","slice","currentTransformMatrix","keyToCurrentValue","propertyName","currentMatrix","targetMatrix","newMatrix","Array","i","PropertyName","currentValue","targetValue","exports","ProgressTransitionManager"],"sources":["SharedTransition.ts"],"sourcesContent":["import { withTiming } from '../../animation';\nimport type {\n  SharedTransitionAnimationsFunction,\n  SharedTransitionAnimationsValues,\n  CustomProgressAnimation,\n  ProgressAnimation,\n} from '../animationBuilder/commonTypes';\nimport {\n  LayoutAnimationType,\n  SharedTransitionType,\n} from '../animationBuilder/commonTypes';\nimport type { StyleProps } from '../../commonTypes';\nimport { configureLayoutAnimations } from '../../core';\nimport { ProgressTransitionManager } from './ProgressTransitionManager';\n\nconst supportedProps = [\n  'width',\n  'height',\n  'originX',\n  'originY',\n  'transform',\n  'borderRadius',\n];\n\ntype AnimationFactory = (\n  values: SharedTransitionAnimationsValues\n) => StyleProps;\n\nexport class SharedTransition {\n  private _customAnimationFactory: AnimationFactory | null = null;\n  private _animation: SharedTransitionAnimationsFunction | null = null;\n  private _transitionDuration = 500;\n  private _customProgressAnimation?: ProgressAnimation = undefined;\n  private _progressAnimation?: ProgressAnimation = undefined;\n  private _defaultTransitionType?: SharedTransitionType = undefined;\n  private static _progressTransitionManager = new ProgressTransitionManager();\n\n  public custom(customAnimationFactory: AnimationFactory): SharedTransition {\n    this._customAnimationFactory = customAnimationFactory;\n    return this;\n  }\n\n  public progressAnimation(\n    progressAnimationCallback: CustomProgressAnimation\n  ): SharedTransition {\n    this._customProgressAnimation = (viewTag, values, progress) => {\n      'worklet';\n      const newStyles = progressAnimationCallback(values, progress);\n      _notifyAboutProgress(viewTag, newStyles, true);\n    };\n    return this;\n  }\n\n  public duration(duration: number): SharedTransition {\n    this._transitionDuration = duration;\n    return this;\n  }\n\n  public defaultTransitionType(\n    transitionType: SharedTransitionType\n  ): SharedTransition {\n    this._defaultTransitionType = transitionType;\n    return this;\n  }\n\n  public registerTransition(\n    viewTag: number,\n    sharedTransitionTag: string\n  ): void {\n    const transitionAnimation = this.getTransitionAnimation();\n    const progressAnimation = this.getProgressAnimation();\n    if (!this._defaultTransitionType) {\n      if (this._customAnimationFactory && !this._customProgressAnimation) {\n        this._defaultTransitionType = SharedTransitionType.ANIMATION;\n      } else {\n        this._defaultTransitionType = SharedTransitionType.PROGRESS_ANIMATION;\n      }\n    }\n    const layoutAnimationType =\n      this._defaultTransitionType === SharedTransitionType.ANIMATION\n        ? LayoutAnimationType.SHARED_ELEMENT_TRANSITION\n        : LayoutAnimationType.SHARED_ELEMENT_TRANSITION_PROGRESS;\n    configureLayoutAnimations(\n      viewTag,\n      layoutAnimationType,\n      transitionAnimation,\n      sharedTransitionTag\n    );\n    SharedTransition._progressTransitionManager.addProgressAnimation(\n      viewTag,\n      progressAnimation\n    );\n  }\n\n  public unregisterTransition(viewTag: number): void {\n    SharedTransition._progressTransitionManager.removeProgressAnimation(\n      viewTag\n    );\n  }\n\n  private getTransitionAnimation(): SharedTransitionAnimationsFunction {\n    if (!this._animation) {\n      this.buildAnimation();\n    }\n    return this._animation!;\n  }\n\n  private getProgressAnimation(): ProgressAnimation {\n    if (!this._progressAnimation) {\n      this.buildProgressAnimation();\n    }\n    return this._progressAnimation!;\n  }\n\n  private buildAnimation() {\n    const animationFactory = this._customAnimationFactory;\n    const transitionDuration = this._transitionDuration;\n    this._animation = (values: SharedTransitionAnimationsValues) => {\n      'worklet';\n      let animations: {\n        [key: string]: any;\n      } = {};\n      const initialValues: {\n        [key: string]: any;\n      } = {};\n\n      if (animationFactory) {\n        animations = animationFactory(values);\n        for (const key in animations) {\n          if (!supportedProps.includes(key)) {\n            throw Error(`The prop '${key}' is not supported yet.`);\n          }\n        }\n      } else {\n        for (const propName of supportedProps) {\n          if (propName === 'transform') {\n            const matrix = values.targetTransformMatrix;\n            animations.transformMatrix = withTiming(matrix, {\n              duration: transitionDuration,\n            });\n          } else {\n            const keyToTargetValue =\n              'target' + propName.charAt(0).toUpperCase() + propName.slice(1);\n            animations[propName] = withTiming(values[keyToTargetValue], {\n              duration: transitionDuration,\n            });\n          }\n        }\n      }\n\n      for (const propName in animations) {\n        if (propName === 'transform') {\n          initialValues.transformMatrix = values.currentTransformMatrix;\n        } else {\n          const keyToCurrentValue =\n            'current' + propName.charAt(0).toUpperCase() + propName.slice(1);\n          initialValues[propName] = values[keyToCurrentValue];\n        }\n      }\n\n      return { initialValues, animations };\n    };\n  }\n\n  private buildProgressAnimation() {\n    if (this._customProgressAnimation) {\n      this._progressAnimation = this._customProgressAnimation;\n      return;\n    }\n    this._progressAnimation = (viewTag, values, progress) => {\n      'worklet';\n      const newStyles: { [key: string]: number | number[] } = {};\n      for (const propertyName of supportedProps) {\n        if (propertyName === 'transform') {\n          // this is not the perfect solution, but at this moment it just interpolates the whole\n          // matrix instead of interpolating scale, translate, rotate, etc. separately\n          const currentMatrix = values.currentTransformMatrix as number[];\n          const targetMatrix = values.targetTransformMatrix as number[];\n          const newMatrix = new Array(9);\n          for (let i = 0; i < 9; i++) {\n            newMatrix[i] =\n              progress * (targetMatrix[i] - currentMatrix[i]) +\n              currentMatrix[i];\n          }\n          newStyles.transformMatrix = newMatrix;\n        } else {\n          // PropertyName == propertyName with capitalized fist letter, (width -> Width)\n          const PropertyName =\n            propertyName.charAt(0).toUpperCase() + propertyName.slice(1);\n          const currentValue = values['current' + PropertyName] as number;\n          const targetValue = values['target' + PropertyName] as number;\n          newStyles[propertyName] =\n            progress * (targetValue - currentValue) + currentValue;\n        }\n      }\n      _notifyAboutProgress(viewTag, newStyles, true);\n    };\n  }\n\n  // static builder methods\n\n  public static custom(\n    customAnimationFactory: AnimationFactory\n  ): SharedTransition {\n    return new SharedTransition().custom(customAnimationFactory);\n  }\n\n  public static duration(duration: number): SharedTransition {\n    return new SharedTransition().duration(duration);\n  }\n\n  public static progressAnimation(\n    progressAnimationCallback: CustomProgressAnimation\n  ): SharedTransition {\n    return new SharedTransition().progressAnimation(progressAnimationCallback);\n  }\n\n  public static defaultTransitionType(\n    transitionType: SharedTransitionType\n  ): SharedTransition {\n    return new SharedTransition().defaultTransitionType(transitionType);\n  }\n}\n"],"mappings":"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"}