{"version":3,"names":["react_native_1","require","_1","react_1","__importDefault","describe","it","customTextStyle","fontWeight","fontStyle","oneColor","_ref","render","_jsxRuntime","jsx","Text","title","textStyle","getByTestId","textComponent","console","log","props","style","expectedStyle","color","expect","toEqual"],"sources":["/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx"],"sourcesContent":["import {render} from '@testing-library/react-native'\nimport {Text, hT, textStyles} from './' // Replace with your actual file path\nimport React from 'react'\nimport {TextStyle} from 'react-native'\n\ndescribe('Text Component', () => {\n  //   it('renders correctly with default props', () => {\n  //     const {getByText} = render(<Text title=\"Test Title\" />)\n  //     expect(getByText('Test Title')).toBeTruthy()\n  //   })\n\n  //   it('applies the correct style based on the \"h\" prop', () => {\n  //     const styles: hT[] = [\n  //       'h0',\n  //       'h1',\n  //       'h2',\n  //       'h3',\n  //       'h4',\n  //       'h5',\n  //       'h6',\n  //       'h7',\n  //       'h8',\n  //       'h9',\n  //       'h10',\n  //       'h11',\n  //       'h12',\n  //     ]\n  //     styles.forEach(style => {\n  //       const {getByTestId} = render(<Text title=\"Test Title\" h={style} />)\n  //       const receivedStyle = getByTestId('text-component').props.style\n  //       expect(receivedStyle).toEqual(expect.objectContaining(textStyles[style]))\n  //     })\n  //   })\n\n  it('applies the oneColor prop correctly', () => {\n    const customTextStyle: TextStyle = {fontWeight: 'bold', fontStyle: 'italic'}\n    const oneColor = 'blue'\n    const {getByTestId} = render(\n      <Text\n        title=\"Test Title\"\n        oneColor={oneColor}\n        textStyle={customTextStyle}\n      />,\n    )\n    const textComponent = getByTestId('text-component')\n    console.log('Received Style:', textComponent.props.style)\n    const expectedStyle = [customTextStyle, {color: 'blue'}]\n    expect(textComponent.props.style).toEqual(expectedStyle)\n  })\n})\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,cAAA,GAAAC,OAAA;AACA,IAAAC,EAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAC,eAAA,CAAAH,OAAA;AAGAI,QAAQ,CAAC,gBAAgB,EAAE,YAAK;EA6B9BC,EAAE,CAAC,qCAAqC,EAAE,YAAK;IAC7C,IAAMC,eAAe,GAAc;MAACC,UAAU,EAAE,MAAM;MAAEC,SAAS,EAAE;IAAQ,CAAC;IAC5E,IAAMC,QAAQ,GAAG,MAAM;IACvB,IAAAC,IAAA,GAAsB,IAAAX,cAAA,CAAAY,MAAM,EAC1B,IAAAC,WAAA,CAAAC,GAAA,EAACZ,EAAA,CAAAa,IAAI;QACHC,KAAK,EAAC,YAAY;QAClBN,QAAQ,EAAEA,QAAS;QACnBO,SAAS,EAAEV;MAAgB,EAC3B,CACH;MANMW,WAAW,GAAAP,IAAA,CAAXO,WAAW;IAOlB,IAAMC,aAAa,GAAGD,WAAW,CAAC,gBAAgB,CAAC;IACnDE,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,aAAa,CAACG,KAAK,CAACC,KAAK,CAAC;IACzD,IAAMC,aAAa,GAAG,CAACjB,eAAe,EAAE;MAACkB,KAAK,EAAE;IAAM,CAAC,CAAC;IACxDC,MAAM,CAACP,aAAa,CAACG,KAAK,CAACC,KAAK,CAAC,CAACI,OAAO,CAACH,aAAa,CAAC;EAC1D,CAAC,CAAC;AACJ,CAAC,CAAC"}