e2c2126f7cdcfa33ebe190859fac6d93
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LinearTransition = exports.Layout = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _animationBuilder = require("../animationBuilder");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var LinearTransition = function (_ComplexAnimationBuil) {
  (0, _inherits2.default)(LinearTransition, _ComplexAnimationBuil);
  var _super = _createSuper(LinearTransition);
  function LinearTransition() {
    var _this;
    (0, _classCallCheck2.default)(this, LinearTransition);
    _this = _super.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "build", function () {
      var delayFunction = _this.getDelayFunction();
      var _this$getAnimationAnd = _this.getAnimationAndConfig(),
        _this$getAnimationAnd2 = (0, _slicedToArray2.default)(_this$getAnimationAnd, 2),
        animation = _this$getAnimationAnd2[0],
        config = _this$getAnimationAnd2[1];
      var callback = _this.callbackV;
      var delay = _this.getDelay();
      return function (values) {
        'worklet';

        return {
          initialValues: {
            originX: values.currentOriginX,
            originY: values.currentOriginY,
            width: values.currentWidth,
            height: values.currentHeight
          },
          animations: {
            originX: delayFunction(delay, animation(values.targetOriginX, config)),
            originY: delayFunction(delay, animation(values.targetOriginY, config)),
            width: delayFunction(delay, animation(values.targetWidth, config)),
            height: delayFunction(delay, animation(values.targetHeight, config))
          },
          callback: callback
        };
      };
    });
    return _this;
  }
  (0, _createClass2.default)(LinearTransition, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new LinearTransition();
    }
  }]);
  return LinearTransition;
}(_animationBuilder.ComplexAnimationBuilder);
exports.LinearTransition = LinearTransition;
var Layout = LinearTransition;
exports.Layout = Layout;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfYW5pbWF0aW9uQnVpbGRlciIsInJlcXVpcmUiLCJfY3JlYXRlU3VwZXIiLCJEZXJpdmVkIiwiaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCIsIl9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJfY3JlYXRlU3VwZXJJbnRlcm5hbCIsIlN1cGVyIiwiX2dldFByb3RvdHlwZU9mMiIsImRlZmF1bHQiLCJyZXN1bHQiLCJOZXdUYXJnZXQiLCJjb25zdHJ1Y3RvciIsIlJlZmxlY3QiLCJjb25zdHJ1Y3QiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiIsInNoYW0iLCJQcm94eSIsIkJvb2xlYW4iLCJwcm90b3R5cGUiLCJ2YWx1ZU9mIiwiY2FsbCIsImUiLCJMaW5lYXJUcmFuc2l0aW9uIiwiX0NvbXBsZXhBbmltYXRpb25CdWlsIiwiX2luaGVyaXRzMiIsIl9zdXBlciIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrMiIsIl9kZWZpbmVQcm9wZXJ0eSIsIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQyIiwiZGVsYXlGdW5jdGlvbiIsImdldERlbGF5RnVuY3Rpb24iLCJfdGhpcyRnZXRBbmltYXRpb25BbmQiLCJnZXRBbmltYXRpb25BbmRDb25maWciLCJfdGhpcyRnZXRBbmltYXRpb25BbmQyIiwiX3NsaWNlZFRvQXJyYXkyIiwiYW5pbWF0aW9uIiwiY29uZmlnIiwiY2FsbGJhY2siLCJjYWxsYmFja1YiLCJkZWxheSIsImdldERlbGF5IiwidmFsdWVzIiwiaW5pdGlhbFZhbHVlcyIsIm9yaWdpblgiLCJjdXJyZW50T3JpZ2luWCIsIm9yaWdpblkiLCJjdXJyZW50T3JpZ2luWSIsIndpZHRoIiwiY3VycmVudFdpZHRoIiwiaGVpZ2h0IiwiY3VycmVudEhlaWdodCIsImFuaW1hdGlvbnMiLCJ0YXJnZXRPcmlnaW5YIiwidGFyZ2V0T3JpZ2luWSIsInRhcmdldFdpZHRoIiwidGFyZ2V0SGVpZ2h0IiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwiY3JlYXRlSW5zdGFuY2UiLCJDb21wbGV4QW5pbWF0aW9uQnVpbGRlciIsImV4cG9ydHMiLCJMYXlvdXQiXSwic291cmNlcyI6WyJMaW5lYXJUcmFuc2l0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQmFzZUFuaW1hdGlvbkJ1aWxkZXIgfSBmcm9tICcuLi9hbmltYXRpb25CdWlsZGVyJztcbmltcG9ydCB7IENvbXBsZXhBbmltYXRpb25CdWlsZGVyIH0gZnJvbSAnLi4vYW5pbWF0aW9uQnVpbGRlcic7XG5pbXBvcnQgdHlwZSB7XG4gIElMYXlvdXRBbmltYXRpb25CdWlsZGVyLFxuICBMYXlvdXRBbmltYXRpb25GdW5jdGlvbixcbn0gZnJvbSAnLi4vYW5pbWF0aW9uQnVpbGRlci9jb21tb25UeXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBMaW5lYXJUcmFuc2l0aW9uXG4gIGV4dGVuZHMgQ29tcGxleEFuaW1hdGlvbkJ1aWxkZXJcbiAgaW1wbGVtZW50cyBJTGF5b3V0QW5pbWF0aW9uQnVpbGRlclxue1xuICBzdGF0aWMgY3JlYXRlSW5zdGFuY2U8VCBleHRlbmRzIHR5cGVvZiBCYXNlQW5pbWF0aW9uQnVpbGRlcj4oXG4gICAgdGhpczogVFxuICApOiBJbnN0YW5jZVR5cGU8VD4ge1xuICAgIHJldHVybiBuZXcgTGluZWFyVHJhbnNpdGlvbigpIGFzIEluc3RhbmNlVHlwZTxUPjtcbiAgfVxuXG4gIGJ1aWxkID0gKCk6IExheW91dEFuaW1hdGlvbkZ1bmN0aW9uID0+IHtcbiAgICBjb25zdCBkZWxheUZ1bmN0aW9uID0gdGhpcy5nZXREZWxheUZ1bmN0aW9uKCk7XG4gICAgY29uc3QgW2FuaW1hdGlvbiwgY29uZmlnXSA9IHRoaXMuZ2V0QW5pbWF0aW9uQW5kQ29uZmlnKCk7XG4gICAgY29uc3QgY2FsbGJhY2sgPSB0aGlzLmNhbGxiYWNrVjtcbiAgICBjb25zdCBkZWxheSA9IHRoaXMuZ2V0RGVsYXkoKTtcblxuICAgIHJldHVybiAodmFsdWVzKSA9PiB7XG4gICAgICAnd29ya2xldCc7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbml0aWFsVmFsdWVzOiB7XG4gICAgICAgICAgb3JpZ2luWDogdmFsdWVzLmN1cnJlbnRPcmlnaW5YLFxuICAgICAgICAgIG9yaWdpblk6IHZhbHVlcy5jdXJyZW50T3JpZ2luWSxcbiAgICAgICAgICB3aWR0aDogdmFsdWVzLmN1cnJlbnRXaWR0aCxcbiAgICAgICAgICBoZWlnaHQ6IHZhbHVlcy5jdXJyZW50SGVpZ2h0LFxuICAgICAgICB9LFxuICAgICAgICBhbmltYXRpb25zOiB7XG4gICAgICAgICAgb3JpZ2luWDogZGVsYXlGdW5jdGlvbihcbiAgICAgICAgICAgIGRlbGF5LFxuICAgICAgICAgICAgYW5pbWF0aW9uKHZhbHVlcy50YXJnZXRPcmlnaW5YLCBjb25maWcpXG4gICAgICAgICAgKSxcbiAgICAgICAgICBvcmlnaW5ZOiBkZWxheUZ1bmN0aW9uKFxuICAgICAgICAgICAgZGVsYXksXG4gICAgICAgICAgICBhbmltYXRpb24odmFsdWVzLnRhcmdldE9yaWdpblksIGNvbmZpZylcbiAgICAgICAgICApLFxuICAgICAgICAgIHdpZHRoOiBkZWxheUZ1bmN0aW9uKGRlbGF5LCBhbmltYXRpb24odmFsdWVzLnRhcmdldFdpZHRoLCBjb25maWcpKSxcbiAgICAgICAgICBoZWlnaHQ6IGRlbGF5RnVuY3Rpb24oZGVsYXksIGFuaW1hdGlvbih2YWx1ZXMudGFyZ2V0SGVpZ2h0LCBjb25maWcpKSxcbiAgICAgICAgfSxcbiAgICAgICAgY2FsbGJhY2s6IGNhbGxiYWNrLFxuICAgICAgfTtcbiAgICB9O1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgTGF5b3V0ID0gTGluZWFyVHJhbnNpdGlvbjtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQ0EsSUFBQUEsaUJBQUEsR0FBQUMsT0FBQTtBQUE2RCxTQUFBQyxhQUFBQyxPQUFBLFFBQUFDLHlCQUFBLEdBQUFDLHlCQUFBLG9CQUFBQyxxQkFBQSxR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