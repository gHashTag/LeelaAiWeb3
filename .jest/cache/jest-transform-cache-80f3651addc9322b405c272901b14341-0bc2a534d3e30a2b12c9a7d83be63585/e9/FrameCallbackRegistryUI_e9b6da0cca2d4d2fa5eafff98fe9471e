ed1abc05dff0f56b26c9ebcb94120390
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.prepareUIRegistry = void 0;
var _threads = require("../threads");
var prepareUIRegistry = (0, _threads.runOnUIImmediately)(function () {
  'worklet';

  var frameCallbackRegistry = {
    frameCallbackRegistry: new Map(),
    activeFrameCallbacks: new Set(),
    previousFrameTimestamp: null,
    nextCallId: 0,
    runCallbacks: function runCallbacks(callId) {
      var _this = this;
      var loop = function loop(timestamp) {
        if (callId !== _this.nextCallId) {
          return;
        }
        if (_this.previousFrameTimestamp === null) {
          _this.previousFrameTimestamp = timestamp;
        }
        var delta = timestamp - _this.previousFrameTimestamp;
        _this.activeFrameCallbacks.forEach(function (callbackId) {
          var callbackDetails = _this.frameCallbackRegistry.get(callbackId);
          var startTime = callbackDetails.startTime;
          if (startTime === null) {
            callbackDetails.startTime = timestamp;
            callbackDetails.callback({
              timestamp: timestamp,
              timeSincePreviousFrame: null,
              timeSinceFirstFrame: 0
            });
          } else {
            callbackDetails.callback({
              timestamp: timestamp,
              timeSincePreviousFrame: delta,
              timeSinceFirstFrame: timestamp - startTime
            });
          }
        });
        if (_this.activeFrameCallbacks.size > 0) {
          _this.previousFrameTimestamp = timestamp;
          requestAnimationFrame(loop);
        } else {
          _this.previousFrameTimestamp = null;
        }
      };
      if (this.activeFrameCallbacks.size === 1 && callId === this.nextCallId) {
        requestAnimationFrame(loop);
      }
    },
    registerFrameCallback: function registerFrameCallback(callback, callbackId) {
      this.frameCallbackRegistry.set(callbackId, {
        callback: callback,
        startTime: null
      });
    },
    unregisterFrameCallback: function unregisterFrameCallback(callbackId) {
      this.manageStateFrameCallback(callbackId, false);
      this.frameCallbackRegistry.delete(callbackId);
    },
    manageStateFrameCallback: function manageStateFrameCallback(callbackId, state) {
      if (callbackId === -1) {
        return;
      }
      if (state) {
        this.activeFrameCallbacks.add(callbackId);
        this.runCallbacks(this.nextCallId);
      } else {
        var callback = this.frameCallbackRegistry.get(callbackId);
        callback.startTime = null;
        this.activeFrameCallbacks.delete(callbackId);
        if (this.activeFrameCallbacks.size === 0) {
          this.nextCallId += 1;
        }
      }
    }
  };
  global._frameCallbackRegistry = frameCallbackRegistry;
});
exports.prepareUIRegistry = prepareUIRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,