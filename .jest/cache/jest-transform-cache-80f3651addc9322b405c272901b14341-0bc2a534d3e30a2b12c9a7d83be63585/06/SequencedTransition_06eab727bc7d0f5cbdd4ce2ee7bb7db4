4654a3402cd312ce61d5549949bce55f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SequencedTransition = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _animation = require("../../animation");
var _animationBuilder = require("../animationBuilder");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var SequencedTransition = function (_BaseAnimationBuilder) {
  (0, _inherits2.default)(SequencedTransition, _BaseAnimationBuilder);
  var _super = _createSuper(SequencedTransition);
  function SequencedTransition() {
    var _this;
    (0, _classCallCheck2.default)(this, SequencedTransition);
    _this = _super.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "reversed", false);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "build", function () {
      var _this$durationV;
      var delayFunction = _this.getDelayFunction();
      var callback = _this.callbackV;
      var delay = _this.getDelay();
      var sequenceDuration = ((_this$durationV = _this.durationV) != null ? _this$durationV : 500) / 2;
      var config = {
        duration: sequenceDuration
      };
      var reverse = _this.reversed;
      return function (values) {
        'worklet';

        return {
          initialValues: {
            originX: values.currentOriginX,
            originY: values.currentOriginY,
            width: values.currentWidth,
            height: values.currentHeight
          },
          animations: {
            originX: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(reverse ? values.currentOriginX : values.targetOriginX, config), (0, _animation.withTiming)(values.targetOriginX, config))),
            originY: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(reverse ? values.targetOriginY : values.currentOriginY, config), (0, _animation.withTiming)(values.targetOriginY, config))),
            width: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(reverse ? values.currentWidth : values.targetWidth, config), (0, _animation.withTiming)(values.targetWidth, config))),
            height: delayFunction(delay, (0, _animation.withSequence)((0, _animation.withTiming)(reverse ? values.targetHeight : values.currentHeight, config), (0, _animation.withTiming)(values.targetHeight, config)))
          },
          callback: callback
        };
      };
    });
    return _this;
  }
  (0, _createClass2.default)(SequencedTransition, [{
    key: "reverse",
    value: function reverse() {
      this.reversed = !this.reversed;
      return this;
    }
  }], [{
    key: "createInstance",
    value: function createInstance() {
      return new SequencedTransition();
    }
  }, {
    key: "reverse",
    value: function reverse() {
      var instance = SequencedTransition.createInstance();
      return instance.reverse();
    }
  }]);
  return SequencedTransition;
}(_animationBuilder.BaseAnimationBuilder);
exports.SequencedTransition = SequencedTransition;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,