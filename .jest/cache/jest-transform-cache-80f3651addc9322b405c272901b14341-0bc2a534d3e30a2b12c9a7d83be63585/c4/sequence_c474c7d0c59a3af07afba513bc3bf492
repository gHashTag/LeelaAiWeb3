afd89fd30ba58dd1d8ae221a66c84956
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withSequence = void 0;
var _util = require("./util");
var withSequence = function withSequence() {
  'worklet';

  for (var _len = arguments.length, _animations = new Array(_len), _key = 0; _key < _len; _key++) {
    _animations[_key] = arguments[_key];
  }
  return (0, _util.defineAnimation)(_animations[0], function () {
    'worklet';

    var animations = _animations.map(function (a) {
      var result = typeof a === 'function' ? a() : a;
      result.finished = false;
      return result;
    });
    var firstAnimation = animations[0];
    var callback = function callback(finished) {
      if (finished) {
        return;
      }
      animations.forEach(function (animation) {
        if (typeof animation.callback === 'function' && !animation.finished) {
          animation.callback(finished);
        }
      });
    };
    function sequence(animation, now) {
      var currentAnim = animations[animation.animationIndex];
      var finished = currentAnim.onFrame(currentAnim, now);
      animation.current = currentAnim.current;
      if (finished) {
        if (currentAnim.callback) {
          currentAnim.callback(true);
        }
        currentAnim.finished = true;
        animation.animationIndex += 1;
        if (animation.animationIndex < animations.length) {
          var nextAnim = animations[animation.animationIndex];
          nextAnim.onStart(nextAnim, currentAnim.current, now, currentAnim);
          return false;
        }
        return true;
      }
      return false;
    }
    function onStart(animation, value, now, previousAnimation) {
      animation.animationIndex = 0;
      if (previousAnimation === undefined) {
        previousAnimation = animations[animations.length - 1];
      }
      firstAnimation.onStart(firstAnimation, value, now, previousAnimation);
    }
    return {
      isHigherOrder: true,
      onFrame: sequence,
      onStart: onStart,
      animationIndex: 0,
      current: firstAnimation.current,
      callback: callback
    };
  });
};
exports.withSequence = withSequence;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdXRpbCIsInJlcXVpcmUiLCJ3aXRoU2VxdWVuY2UiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiX2FuaW1hdGlvbnMiLCJBcnJheSIsIl9rZXkiLCJkZWZpbmVBbmltYXRpb24iLCJhbmltYXRpb25zIiwibWFwIiwiYSIsInJlc3VsdCIsImZpbmlzaGVkIiwiZmlyc3RBbmltYXRpb24iLCJjYWxsYmFjayIsImZvckVhY2giLCJhbmltYXRpb24iLCJzZXF1ZW5jZSIsIm5vdyIsImN1cnJlbnRBbmltIiwiYW5pbWF0aW9uSW5kZXgiLCJvbkZyYW1lIiwiY3VycmVudCIsIm5leHRBbmltIiwib25TdGFydCIsInZhbHVlIiwicHJldmlvdXNBbmltYXRpb24iLCJ1bmRlZmluZWQiLCJpc0hpZ2hlck9yZGVyIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbInNlcXVlbmNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRlZmluZUFuaW1hdGlvbiB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgdHlwZSB7IE5leHRBbmltYXRpb24sIFNlcXVlbmNlQW5pbWF0aW9uIH0gZnJvbSAnLi9jb21tb25UeXBlcyc7XG5pbXBvcnQgdHlwZSB7XG4gIEFuaW1hdGlvbixcbiAgQW5pbWF0YWJsZVZhbHVlLFxuICBBbmltYXRpb25PYmplY3QsXG4gIFRpbWVzdGFtcCxcbn0gZnJvbSAnLi4vY29tbW9uVHlwZXMnO1xuXG4vLyBUT0RPIFRZUEVTQ1JJUFQgVGhpcyBpcyBhIHRlbXBvcmFyeSB0eXBlIHRvIGdldCByaWQgb2YgLmQudHMgZmlsZS5cbnR5cGUgd2l0aFNlcXVlbmNlVHlwZSA9IDxUIGV4dGVuZHMgQW5pbWF0YWJsZVZhbHVlPiguLi5hbmltYXRpb25zOiBUW10pID0+IFQ7XG5cbmV4cG9ydCBjb25zdCB3aXRoU2VxdWVuY2UgPSBmdW5jdGlvbiAoXG4gIC4uLl9hbmltYXRpb25zOiBOZXh0QW5pbWF0aW9uPEFuaW1hdGlvbk9iamVjdD5bXVxuKTogQW5pbWF0aW9uPFNlcXVlbmNlQW5pbWF0aW9uPiB7XG4gICd3b3JrbGV0JztcbiAgcmV0dXJuIGRlZmluZUFuaW1hdGlvbjxTZXF1ZW5jZUFuaW1hdGlvbj4oXG4gICAgX2FuaW1hdGlvbnNbMF0gYXMgU2VxdWVuY2VBbmltYXRpb24sXG4gICAgKCkgPT4ge1xuICAgICAgJ3dvcmtsZXQnO1xuICAgICAgY29uc3QgYW5pbWF0aW9ucyA9IF9hbmltYXRpb25zLm1hcCgoYSkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJyA/IGEoKSA6IGE7XG4gICAgICAgIHJlc3VsdC5maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfSk7XG4gICAgICBjb25zdCBmaXJzdEFuaW1hdGlvbiA9IGFuaW1hdGlvbnNbMF07XG5cbiAgICAgIGNvbnN0IGNhbGxiYWNrID0gKGZpbmlzaGVkOiBib29sZWFuKTogdm9pZCA9PiB7XG4gICAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICAgIC8vIHdlIHdhbnQgdG8gY2FsbCB0aGUgY2FsbGJhY2sgYWZ0ZXIgZXZlcnkgc2luZ2xlIGFuaW1hdGlvblxuICAgICAgICAgIC8vIG5vdCBhZnRlciBhbGwgb2YgdGhlbVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzIGlzIGdvaW5nIHRvIGJlIGNhbGxlZCBvbmx5IGlmIHNlcXVlbmNlIGhhcyBiZWVuIGNhbmNlbGxlZFxuICAgICAgICBhbmltYXRpb25zLmZvckVhY2goKGFuaW1hdGlvbikgPT4ge1xuICAgICAgICAgIGlmICh0eXBlb2YgYW5pbWF0aW9uLmNhbGxiYWNrID09PSAnZnVuY3Rpb24nICYmICFhbmltYXRpb24uZmluaXNoZWQpIHtcbiAgICAgICAgICAgIGFuaW1hdGlvbi5jYWxsYmFjayhmaW5pc2hlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIHNlcXVlbmNlKGFuaW1hdGlvbjogU2VxdWVuY2VBbmltYXRpb24sIG5vdzogVGltZXN0YW1wKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRBbmltID0gYW5pbWF0aW9uc1thbmltYXRpb24uYW5pbWF0aW9uSW5kZXhdO1xuICAgICAgICBjb25zdCBmaW5pc2hlZCA9IGN1cnJlbnRBbmltLm9uRnJhbWUoY3VycmVudEFuaW0sIG5vdyk7XG4gICAgICAgIGFuaW1hdGlvbi5jdXJyZW50ID0gY3VycmVudEFuaW0uY3VycmVudDtcbiAgICAgICAgaWYgKGZpbmlzaGVkKSB7XG4gICAgICAgICAgLy8gd2Ugd2FudCB0byBjYWxsIHRoZSBjYWxsYmFjayBhZnRlciBldmVyeSBzaW5nbGUgYW5pbWF0aW9uXG4gICAgICAgICAgaWYgKGN1cnJlbnRBbmltLmNhbGxiYWNrKSB7XG4gICAgICAgICAgICBjdXJyZW50QW5pbS5jYWxsYmFjayh0cnVlIC8qIGZpbmlzaGVkICovKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudEFuaW0uZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICAgIGFuaW1hdGlvbi5hbmltYXRpb25JbmRleCArPSAxO1xuICAgICAgICAgIGlmIChhbmltYXRpb24uYW5pbWF0aW9uSW5kZXggPCBhbmltYXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgbmV4dEFuaW0gPSBhbmltYXRpb25zW2FuaW1hdGlvbi5hbmltYXRpb25JbmRleF07XG4gICAgICAgICAgICBuZXh0QW5pbS5vblN0YXJ0KG5leHRBbmltLCBjdXJyZW50QW5pbS5jdXJyZW50LCBub3csIGN1cnJlbnRBbmltKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBvblN0YXJ0KFxuICAgICAgICBhbmltYXRpb246IFNlcXVlbmNlQW5pbWF0aW9uLFxuICAgICAgICB2YWx1ZTogQW5pbWF0YWJsZVZhbHVlLFxuICAgICAgICBub3c6IFRpbWVzdGFtcCxcbiAgICAgICAgcHJldmlvdXNBbmltYXRpb246IFNlcXVlbmNlQW5pbWF0aW9uXG4gICAgICApOiB2b2lkIHtcbiAgICAgICAgYW5pbWF0aW9uLmFuaW1hdGlvbkluZGV4ID0gMDtcbiAgICAgICAgaWYgKHByZXZpb3VzQW5pbWF0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwcmV2aW91c0FuaW1hdGlvbiA9IGFuaW1hdGlvbnNbXG4gICAgICAgICAgICBhbmltYXRpb25zLmxlbmd0aCAtIDFcbiAgICAgICAgICBdIGFzIFNlcXVlbmNlQW5pbWF0aW9uO1xuICAgICAgICB9XG4gICAgICAgIGZpcnN0QW5pbWF0aW9uLm9uU3RhcnQoZmlyc3RBbmltYXRpb24sIHZhbHVlLCBub3csIHByZXZpb3VzQW5pbWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgaXNIaWdoZXJPcmRlcjogdHJ1ZSxcbiAgICAgICAgb25GcmFtZTogc2VxdWVuY2UsXG4gICAgICAgIG9uU3RhcnQsXG4gICAgICAgIGFuaW1hdGlvbkluZGV4OiAwLFxuICAgICAgICBjdXJyZW50OiBmaXJzdEFuaW1hdGlvbi5jdXJyZW50LFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgIH0gYXMgU2VxdWVuY2VBbmltYXRpb247XG4gICAgfVxuICApO1xufSBhcyB3aXRoU2VxdWVuY2VUeXBlO1xuIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsSUFBQUEsS0FBQSxHQUFBQyxPQUFBO0FBWU8sSUFBTUMsWUFBWSxHQUFHLFNBQWZBLFlBQVlBLENBQUEsRUFFTztFQUM5QixTQUFTOztFQUFDLFNBQUFDLElBQUEsR0FBQUMsU0FBQSxDQUFBQyxNQUFBLEVBRlBDLFdBQVcsT0FBQUMsS0FBQSxDQUFBSixJQUFBLEdBQUFLLElBQUEsTUFBQUEsSUFBQSxHQUFBTCxJQUFB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