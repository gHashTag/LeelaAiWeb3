3b658b881c00ae9a56071389857547f8
var _styleAnimation = require("../animation/styleAnimation");
var _mutables = require("../mutables");
var _animationBuilder = require("./animationBuilder");
var _threads = require("../threads");
var TAG_OFFSET = 1e9;
function startObservingProgress(tag, sharedValue, animationType) {
  'worklet';

  var isSharedTransition = animationType === _animationBuilder.LayoutAnimationType.SHARED_ELEMENT_TRANSITION;
  sharedValue.addListener(tag + TAG_OFFSET, function () {
    _notifyAboutProgress(tag, sharedValue.value, isSharedTransition);
  });
}
function stopObservingProgress(tag, sharedValue, removeView) {
  'worklet';

  sharedValue.removeListener(tag + TAG_OFFSET);
  _notifyAboutEnd(tag, removeView);
}
function createLayoutAnimationManager() {
  'worklet';

  var enteringAnimationForTag = new Map();
  var mutableValuesForTag = new Map();
  return {
    start: function start(tag, type, yogaValues, config) {
      if (type === _animationBuilder.LayoutAnimationType.SHARED_ELEMENT_TRANSITION_PROGRESS) {
        global.ProgressTransitionRegister.onTransitionStart(tag, yogaValues);
        return;
      }
      var style = config(yogaValues);
      var currentAnimation = style.animations;
      if (type === _animationBuilder.LayoutAnimationType.ENTERING) {
        enteringAnimationForTag.set(tag, currentAnimation);
      } else if (type === _animationBuilder.LayoutAnimationType.LAYOUT) {
        var enteringAnimation = enteringAnimationForTag.get(tag);
        if (enteringAnimation) {
          currentAnimation = Object.assign({}, enteringAnimation, style.animations);
        }
      }
      var value = mutableValuesForTag.get(tag);
      if (value === undefined) {
        value = (0, _mutables.makeUIMutable)(style.initialValues);
        mutableValuesForTag.set(tag, value);
      } else {
        stopObservingProgress(tag, value, false);
        value._value = style.initialValues;
      }
      var animation = (0, _styleAnimation.withStyleAnimation)(currentAnimation);
      animation.callback = function (finished) {
        if (finished) {
          enteringAnimationForTag.delete(tag);
          mutableValuesForTag.delete(tag);
          var shouldRemoveView = type === _animationBuilder.LayoutAnimationType.EXITING;
          stopObservingProgress(tag, value, shouldRemoveView);
        }
        style.callback && style.callback(finished === undefined ? false : finished);
      };
      startObservingProgress(tag, value, type);
      value.value = animation;
    },
    stop: function stop(tag) {
      var value = mutableValuesForTag.get(tag);
      if (!value) {
        return;
      }
      stopObservingProgress(tag, value, true);
    }
  };
}
(0, _threads.runOnUIImmediately)(function () {
  'worklet';

  global.LayoutAnimationsManager = createLayoutAnimationManager();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,