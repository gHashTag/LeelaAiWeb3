f06fa9ddf45df2eaeb700722727939a1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeReanimated = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _reactNative = require("react-native");
var _checkCppVersion = require("../platform-specific/checkCppVersion");
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var NativeReanimated = function () {
  function NativeReanimated() {
    (0, _classCallCheck2.default)(this, NativeReanimated);
    _defineProperty(this, "native", true);
    _defineProperty(this, "InnerNativeModule", void 0);
    if (global.__reanimatedModuleProxy === undefined) {
      var ReanimatedModule = _reactNative.NativeModules.ReanimatedModule;
      ReanimatedModule === null || ReanimatedModule === void 0 ? void 0 : ReanimatedModule.installTurboModule();
    }
    if (global.__reanimatedModuleProxy === undefined) {
      throw new Error(`[Reanimated] The native part of Reanimated doesn't seem to be initialized. This could be caused by\n\
- not rebuilding the app after installing or upgrading Reanimated\n\
- trying to run Reanimated on an unsupported platform\n\
- running in a brownfield app without manually initializing the native library`);
    }
    (0, _checkCppVersion.checkCppVersion)();
    this.InnerNativeModule = global.__reanimatedModuleProxy;
  }
  (0, _createClass2.default)(NativeReanimated, [{
    key: "installCoreFunctions",
    value: function installCoreFunctions(callGuard, valueUnpacker) {
      return this.InnerNativeModule.installCoreFunctions(callGuard, valueUnpacker);
    }
  }, {
    key: "makeShareableClone",
    value: function makeShareableClone(value, shouldPersistRemote) {
      return this.InnerNativeModule.makeShareableClone(value, shouldPersistRemote);
    }
  }, {
    key: "makeSynchronizedDataHolder",
    value: function makeSynchronizedDataHolder(valueRef) {
      return this.InnerNativeModule.makeSynchronizedDataHolder(valueRef);
    }
  }, {
    key: "getDataSynchronously",
    value: function getDataSynchronously(ref) {
      return this.InnerNativeModule.getDataSynchronously(ref);
    }
  }, {
    key: "scheduleOnUI",
    value: function scheduleOnUI(shareable) {
      return this.InnerNativeModule.scheduleOnUI(shareable);
    }
  }, {
    key: "registerSensor",
    value: function registerSensor(sensorType, interval, iosReferenceFrame, handler) {
      return this.InnerNativeModule.registerSensor(sensorType, interval, iosReferenceFrame, handler);
    }
  }, {
    key: "unregisterSensor",
    value: function unregisterSensor(sensorId) {
      return this.InnerNativeModule.unregisterSensor(sensorId);
    }
  }, {
    key: "registerEventHandler",
    value: function registerEventHandler(eventHash, eventHandler) {
      return this.InnerNativeModule.registerEventHandler(eventHash, eventHandler);
    }
  }, {
    key: "unregisterEventHandler",
    value: function unregisterEventHandler(id) {
      return this.InnerNativeModule.unregisterEventHandler(id);
    }
  }, {
    key: "getViewProp",
    value: function getViewProp(viewTag, propName, callback) {
      return this.InnerNativeModule.getViewProp(viewTag, propName, callback);
    }
  }, {
    key: "configureLayoutAnimation",
    value: function configureLayoutAnimation(viewTag, type, sharedTransitionTag, config) {
      this.InnerNativeModule.configureLayoutAnimation(viewTag, type, sharedTransitionTag, config);
    }
  }, {
    key: "enableLayoutAnimations",
    value: function enableLayoutAnimations(flag) {
      this.InnerNativeModule.enableLayoutAnimations(flag);
    }
  }, {
    key: "configureProps",
    value: function configureProps(uiProps, nativeProps) {
      this.InnerNativeModule.configureProps(uiProps, nativeProps);
    }
  }, {
    key: "subscribeForKeyboardEvents",
    value: function subscribeForKeyboardEvents(handler, isStatusBarTranslucent) {
      return this.InnerNativeModule.subscribeForKeyboardEvents(handler, isStatusBarTranslucent);
    }
  }, {
    key: "unsubscribeFromKeyboardEvents",
    value: function unsubscribeFromKeyboardEvents(listenerId) {
      this.InnerNativeModule.unsubscribeFromKeyboardEvents(listenerId);
    }
  }]);
  return NativeReanimated;
}();
exports.NativeReanimated = NativeReanimated;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiX2NoZWNrQ3BwVmVyc2lvbiIsIk5hdGl2ZVJlYW5pbWF0ZWQiLCJfY2xhc3NDYWxsQ2hlY2syIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdsb2JhbCIsIl9fcmVhbmltYXRlZE1vZHVsZVByb3h5IiwidW5kZWZpbmVkIiwiUmVhbmltYXRlZE1vZHVsZSIsIk5hdGl2ZU1vZHVsZXMiLCJpbnN0YWxsVHVyYm9Nb2R1bGUiLCJFcnJvciIsImNoZWNrQ3BwVmVyc2lvbiIsIklubmVyTmF0aXZlTW9kdWxlIiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwiaW5zdGFsbENvcmVGdW5jdGlvbnMiLCJjYWxsR3VhcmQiLCJ2YWx1ZVVucGFja2VyIiwibWFrZVNoYXJlYWJsZUNsb25lIiwic2hvdWxkUGVyc2lzdFJlbW90ZSIsIm1ha2VTeW5jaHJvbml6ZWREYXRhSG9sZGVyIiwidmFsdWVSZWYiLCJnZXREYXRhU3luY2hyb25vdXNseSIsInJlZiIsInNjaGVkdWxlT25VSSIsInNoYXJlYWJsZSIsInJlZ2lzdGVyU2Vuc29yIiwic2Vuc29yVHlwZSIsImludGVydmFsIiwiaW9zUmVmZXJlbmNlRnJhbWUiLCJoYW5kbGVyIiwidW5yZWdpc3RlclNlbnNvciIsInNlbnNvcklkIiwicmVnaXN0ZXJFdmVudEhhbmRsZXIiLCJldmVudEhhc2giLCJldmVudEhhbmRsZXIiLCJ1bnJlZ2lzdGVyRXZlbnRIYW5kbGVyIiwiaWQiLCJnZXRWaWV3UHJvcCIsInZpZXdUYWciLCJwcm9wTmFtZSIsImNhbGxiYWNrIiwiY29uZmlndXJlTGF5b3V0QW5pbWF0aW9uIiwidHlwZSIsInNoYXJlZFRyYW5zaXRpb25UYWciLCJjb25maWciLCJlbmFibGVMYXlvdXRBbmltYXRpb25zIiwiZmxhZyIsImNvbmZpZ3VyZVByb3BzIiwidWlQcm9wcyIsIm5hdGl2ZVByb3BzIiwic3Vic2NyaWJlRm9yS2V5Ym9hcmRFdmVudHMiLCJpc1N0YXR1c0JhclRyYW5zbHVjZW50IiwidW5zdWJzY3JpYmVGcm9tS2V5Ym9hcmRFdmVudHMiLCJsaXN0ZW5lcklkIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIk5hdGl2ZVJlYW5pbWF0ZWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmF0aXZlTW9kdWxlcyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgdHlwZSB7XG4gIFNoYXJlYWJsZVJlZixcbiAgU2hhcmVhYmxlU3luY0RhdGFIb2xkZXJSZWYsXG4gIFZhbHVlM0QsXG4gIFZhbHVlUm90YXRpb24sXG59IGZyb20gJy4uL2NvbW1vblR5cGVzJztcbmltcG9ydCB0eXBlIHtcbiAgTGF5b3V0QW5pbWF0aW9uRnVuY3Rpb24sXG4gIExheW91dEFuaW1hdGlvblR5cGUsXG59IGZyb20gJy4uL2xheW91dFJlYW5pbWF0aW9uJztcbmltcG9ydCB7IGNoZWNrQ3BwVmVyc2lvbiB9IGZyb20gJy4uL3BsYXRmb3JtLXNwZWNpZmljL2NoZWNrQ3BwVmVyc2lvbic7XG5cbi8vIHRoaXMgaXMgdGhlIHR5cGUgb2YgYF9fcmVhbmltYXRlZE1vZHVsZVByb3h5YCB3aGljaCBpcyBpbmplY3RlZCB1c2luZyBKU0lcbmV4cG9ydCBpbnRlcmZhY2UgTmF0aXZlUmVhbmltYXRlZE1vZHVsZSB7XG4gIGluc3RhbGxDb3JlRnVuY3Rpb25zKFxuICAgIGNhbGxHdWFyZDogPFQgZXh0ZW5kcyBBcnJheTx1bmtub3duPiwgVT4oXG4gICAgICBmbjogKC4uLmFyZ3M6IFQpID0+IFUsXG4gICAgICAuLi5hcmdzOiBUXG4gICAgKSA9PiB2b2lkLFxuICAgIHZhbHVlVW5wYWNrZXI6IDxUPih2YWx1ZTogVCkgPT4gVFxuICApOiB2b2lkO1xuICBtYWtlU2hhcmVhYmxlQ2xvbmU8VD4oXG4gICAgdmFsdWU6IFQsXG4gICAgc2hvdWxkUGVyc2lzdFJlbW90ZTogYm9vbGVhblxuICApOiBTaGFyZWFibGVSZWY8VD47XG4gIG1ha2VTeW5jaHJvbml6ZWREYXRhSG9sZGVyPFQ+KFxuICAgIHZhbHVlUmVmOiBTaGFyZWFibGVSZWY8VD5cbiAgKTogU2hhcmVhYmxlU3luY0RhdGFIb2xkZXJSZWY8VD47XG4gIGdldERhdGFTeW5jaHJvbm91c2x5PFQ+KHJlZjogU2hhcmVhYmxlU3luY0RhdGFIb2xkZXJSZWY8VD4pOiBUO1xuICBzY2hlZHVsZU9uVUk8VD4oc2hhcmVhYmxlOiBTaGFyZWFibGVSZWY8VD4pOiB2b2lkO1xuICByZWdpc3RlckV2ZW50SGFuZGxlcjxUPihcbiAgICBldmVudEhhc2g6IHN0cmluZyxcbiAgICBldmVudEhhbmRsZXI6IFNoYXJlYWJsZVJlZjxUPlxuICApOiBudW1iZXI7XG4gIHVucmVnaXN0ZXJFdmVudEhhbmRsZXIoaWQ6IG51bWJlcik6IHZvaWQ7XG4gIGdldFZpZXdQcm9wPFQ+KFxuICAgIHZpZXdUYWc6IHN0cmluZyxcbiAgICBwcm9wTmFtZTogc3RyaW5nLFxuICAgIGNhbGxiYWNrPzogKHJlc3VsdDogVCkgPT4gdm9pZFxuICApOiBQcm9taXNlPFQ+O1xuICBlbmFibGVMYXlvdXRBbmltYXRpb25zKGZsYWc6IGJvb2xlYW4pOiB2b2lkO1xuICByZWdpc3RlclNlbnNvcihcbiAgICBzZW5zb3JUeXBlOiBudW1iZXIsXG4gICAgaW50ZXJ2YWw6IG51bWJlcixcbiAgICBpb3NSZWZlcmVuY2VGcmFtZTogbnVtYmVyLFxuICAgIGhhbmRsZXI6IFNoYXJlYWJsZVJlZjwoZGF0YTogVmFsdWUzRCB8IFZhbHVlUm90YXRpb24pID0+IHZvaWQ+XG4gICk6IG51bWJlcjtcbiAgdW5yZWdpc3RlclNlbnNvcihzZW5zb3JJZDogbnVtYmVyKTogdm9pZDtcbiAgY29uZmlndXJlUHJvcHModWlQcm9wczogc3RyaW5nW10sIG5hdGl2ZVByb3BzOiBzdHJpbmdbXSk6IHZvaWQ7XG4gIHN1YnNjcmliZUZvcktleWJvYXJkRXZlbnRzKFxuICAgIGhhbmRsZXI6IFNoYXJlYWJsZVJlZjxudW1iZXI+LFxuICAgIGlzU3RhdHVzQmFyVHJhbnNsdWNlbnQ6IGJvb2xlYW5cbiAgKTogbnVtYmVyO1xuICB1bnN1YnNjcmliZUZyb21LZXlib2FyZEV2ZW50cyhsaXN0ZW5lcklkOiBudW1iZXIpOiB2b2lkO1xuICBjb25maWd1cmVMYXlvdXRBbmltYXRpb24oXG4gICAgdmlld1RhZzogbnVtYmVyLFxuICAgIHR5cGU6IExheW91dEFuaW1hdGlvblR5cGUsXG4gICAgc2hhcmVkVHJhbnNpdGlvblRhZzogc3RyaW5nLFxuICAgIGNvbmZpZzogU2hhcmVhYmxlUmVmPEtleWZyYW1lIHwgTGF5b3V0QW5pbWF0aW9uRnVuY3Rpb24+XG4gICk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBOYXRpdmVSZWFuaW1hdGVkIHtcbiAgbmF0aXZlID0gdHJ1ZTtcbiAgcHJpdmF0ZSBJbm5lck5hdGl2ZU1vZHVsZTogTmF0aXZlUmVhbmltYXRlZE1vZHVsZTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBpZiAoZ2xvYmFsLl9fcmVhbmltYXRlZE1vZHVsZVByb3h5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHsgUmVhbmltYXRlZE1vZHVsZSB9ID0gTmF0aXZlTW9kdWxlcztcbiAgICAgIFJlYW5pbWF0ZWRNb2R1bGU/Lmluc3RhbGxUdXJib01vZHVsZSgpO1xuICAgIH1cbiAgICBpZiAoZ2xvYmFsLl9fcmVhbmltYXRlZE1vZHVsZVByb3h5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFtSZWFuaW1hdGVkXSBUaGUgbmF0aXZlIHBhcnQgb2YgUmVhbmltYXRlZCBkb2Vzbid0IHNlZW0gdG8gYmUgaW5pdGlhbGl6ZWQuIFRoaXMgY291bGQgYmUgY2F1c2VkIGJ5XFxuXFxcbi0gbm90IHJlYnVpbGRpbmcgdGhlIGFwcCBhZnRlciBpbnN0YWxsaW5nIG9yIHVwZ3JhZGluZyBSZWFuaW1hdGVkXFxuXFxcbi0gdHJ5aW5nIHRvIHJ1biBSZWFuaW1hdGVkIG9uIGFuIHVuc3VwcG9ydGVkIHBsYXRmb3JtXFxuXFxcbi0gcnVubmluZyBpbiBhIGJyb3duZmllbGQgYXBwIHdpdGhvdXQgbWFudWFsbHkgaW5pdGlhbGl6aW5nIHRoZSBuYXRpdmUgbGlicmFyeWBcbiAgICAgICk7XG4gICAgfVxuICAgIGNoZWNrQ3BwVmVyc2lvbigpO1xuICAgIHRoaXMuSW5uZXJOYXRpdmVNb2R1bGUgPSBnbG9iYWwuX19yZWFuaW1hdGVkTW9kdWxlUHJveHk7XG4gIH1cblxuICBpbnN0YWxsQ29yZUZ1bmN0aW9ucyhcbiAgICBjYWxsR3VhcmQ6IDxUIGV4dGVuZHMgQXJyYXk8dW5rbm93bj4sIFU+KFxuICAgICAgZm46ICguLi5hcmdzOiBUKSA9PiBVLFxuICAgICAgLi4uYXJnczogVFxuICAgICkgPT4gdm9pZCxcbiAgICB2YWx1ZVVucGFja2VyOiA8VD4odmFsdWU6IFQpID0+IFRcbiAgKSB7XG4gICAgcmV0dXJuIHRoaXMuSW5uZXJOYXRpdmVNb2R1bGUuaW5zdGFsbENvcmVGdW5jdGlvbnMoXG4gICAgICBjYWxsR3VhcmQsXG4gICAgICB2YWx1ZVVucGFja2VyXG4gICAgKTtcbiAgfVxuXG4gIG1ha2VTaGFyZWFibGVDbG9uZTxUPih2YWx1ZTogVCwgc2hvdWxkUGVyc2lzdFJlbW90ZTogYm9vbGVhbikge1xuICAgIHJldHVybiB0aGlzLklubmVyTmF0aXZlTW9kdWxlLm1ha2VTaGFyZWFibGVDbG9uZShcbiAgICAgIHZhbHVlLFxuICAgICAgc2hvdWxkUGVyc2lzdFJlbW90ZVxuICAgICk7XG4gIH1cblxuICBtYWtlU3luY2hyb25pemVkRGF0YUhvbGRlcjxUPih2YWx1ZVJlZjogU2hhcmVhYmxlUmVmPFQ+KSB7XG4gICAgcmV0dXJuIHRoaXMuSW5uZXJOYXRpdmVNb2R1bGUubWFrZVN5bmNocm9uaXplZERhdGFIb2xkZXIodmFsdWVSZWYpO1xuICB9XG5cbiAgZ2V0RGF0YVN5bmNocm9ub3VzbHk8VD4ocmVmOiBTaGFyZWFibGVTeW5jRGF0YUhvbGRlclJlZjxUPikge1xuICAgIHJldHVybiB0aGlzLklubmVyTmF0aXZlTW9kdWxlLmdldERhdGFTeW5jaHJvbm91c2x5KHJlZik7XG4gIH1cblxuICBzY2hlZHVsZU9uVUk8VD4oc2hhcmVhYmxlOiBTaGFyZWFibGVSZWY8VD4pIHtcbiAgICByZXR1cm4gdGhpcy5Jbm5lck5hdGl2ZU1vZHVsZS5zY2hlZHVsZU9uVUkoc2hhcmVhYmxlKTtcbiAgfVxuXG4gIHJlZ2lzdGVyU2Vuc29yKFxuICAgIHNlbnNvclR5cGU6IG51bWJlcixcbiAgICBpbnRlcnZhbDogbnVtYmVyLFxuICAgIGlvc1JlZmVyZW5jZUZyYW1lOiBudW1iZXIsXG4gICAgaGFuZGxlcjogU2hhcmVhYmxlUmVmPChkYXRhOiBWYWx1ZTNEIHwgVmFsdWVSb3RhdGlvbikgPT4gdm9pZD5cbiAgKSB7XG4gICAgcmV0dXJuIHRoaXMuSW5uZXJOYXRpdmVNb2R1bGUucmVnaXN0ZXJTZW5zb3IoXG4gICAgICBzZW5zb3JUeXBlLFxuICAgICAgaW50ZXJ2YWwsXG4gICAgICBpb3NSZWZlcmVuY2VGcmFtZSxcbiAgICAgIGhhbmRsZXJcbiAgICApO1xuICB9XG5cbiAgdW5yZWdpc3RlclNlbnNvcihzZW5zb3JJZDogbnVtYmVyKSB7XG4gICAgcmV0dXJuIHRoaXMuSW5uZXJOYXRpdmVNb2R1bGUudW5yZWdpc3RlclNlbnNvcihzZW5zb3JJZCk7XG4gIH1cblxuICByZWdpc3RlckV2ZW50SGFuZGxlcjxUPihldmVudEhhc2g6IHN0cmluZywgZXZlbnRIYW5kbGVyOiBTaGFyZWFibGVSZWY8VD4pIHtcbiAgICByZXR1cm4gdGhpcy5Jbm5lck5hdGl2ZU1vZHVsZS5yZWdpc3RlckV2ZW50SGFuZGxlcihldmVudEhhc2gsIGV2ZW50SGFuZGxlcik7XG4gIH1cblxuICB1bnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGlkOiBudW1iZXIpIHtcbiAgICByZXR1cm4gdGhpcy5Jbm5lck5hdGl2ZU1vZHVsZS51bnJlZ2lzdGVyRXZlbnRIYW5kbGVyKGlkKTtcbiAgfVxuXG4gIGdldFZpZXdQcm9wPFQ+KFxuICAgIHZpZXdUYWc6IHN0cmluZyxcbiAgICBwcm9wTmFtZTogc3RyaW5nLFxuICAgIGNhbGxiYWNrPzogKHJlc3VsdDogVCkgPT4gdm9pZFxuICApIHtcbiAgICByZXR1cm4gdGhpcy5Jbm5lck5hdGl2ZU1vZHVsZS5nZXRWaWV3UHJvcCh2aWV3VGFnLCBwcm9wTmFtZSwgY2FsbGJhY2spO1xuICB9XG5cbiAgY29uZmlndXJlTGF5b3V0QW5pbWF0aW9uKFxuICAgIHZpZXdUYWc6IG51bWJlcixcbiAgICB0eXBlOiBMYXlvdXRBbmltYXRpb25UeXBlLFxuICAgIHNoYXJlZFRyYW5zaXRpb25UYWc6IHN0cmluZyxcbiAgICBjb25maWc6IFNoYXJlYWJsZVJlZjxLZXlmcmFtZSB8IExheW91dEFuaW1hdGlvbkZ1bmN0aW9uPlxuICApIHtcbiAgICB0aGlzLklubmVyTmF0aXZlTW9kdWxlLmNvbmZpZ3VyZUxheW91dEFuaW1hdGlvbihcbiAgICAgIHZpZXdUYWcsXG4gICAgICB0eXBlLFxuICAgICAgc2hhcmVkVHJhbnNpdGlvblRhZyxcbiAgICAgIGNvbmZpZ1xuICAgICk7XG4gIH1cblxuICBlbmFibGVMYXlvdXRBbmltYXRpb25zKGZsYWc6IGJvb2xlYW4pIHtcbiAgICB0aGlzLklubmVyTmF0aXZlTW9kdWxlLmVuYWJsZUxheW91dEFuaW1hdGlvbnMoZmxhZyk7XG4gIH1cblxuICBjb25maWd1cmVQcm9wcyh1aVByb3BzOiBzdHJpbmdbXSwgbmF0aXZlUHJvcHM6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5Jbm5lck5hdGl2ZU1vZHVsZS5jb25maWd1cmVQcm9wcyh1aVByb3BzLCBuYXRpdmVQcm9wcyk7XG4gIH1cblxuICBzdWJzY3JpYmVGb3JLZXlib2FyZEV2ZW50cyhcbiAgICBoYW5kbGVyOiBTaGFyZWFibGVSZWY8bnVtYmVyPixcbiAgICBpc1N0YXR1c0JhclRyYW5zbHVjZW50OiBib29sZWFuXG4gICkge1xuICAgIHJldHVybiB0aGlzLklubmVyTmF0aXZlTW9kdWxlLnN1YnNjcmliZUZvcktleWJvYXJkRXZlbnRzKFxuICAgICAgaGFuZGxlcixcbiAgICAgIGlzU3RhdHVzQmFyVHJhbnNsdWNlbnRcbiAgICApO1xuICB9XG5cbiAgdW5zdWJzY3JpYmVGcm9tS2V5Ym9hcmRFdmVudHMobGlzdGVuZXJJZDogbnVtYmVyKSB7XG4gICAgdGhpcy5Jbm5lck5hdGl2ZU1vZHVsZS51bnN1YnNjcmliZUZyb21LZXlib2FyZEV2ZW50cyhsaXN0ZW5lcklkKTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBQUEsWUFBQSxHQUFBQyxPQUFBO0FBV0EsSUFBQUMsZ0JBQUEsR0FBQUQsT0FBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFvRGFFLGdCQUFnQjtFQUkzQixTQUFBQSxpQkFBQSxFQUFjO0lBQUEsSUFBQUMsZ0JBQUEsQ0FBQUMsT0FBQSxRQUFBRixnQkFBQTtJQUFBRyxlQUFBLGlCQUhMLElBQUk7SUFBQUEsZUFBQTtJQUlYLElBQUlDLE1BQU0sQ0FBQ0MsdUJBQXVCLEtBQUtDLFNBQVMsRUFBRTtNQUNoRCxJQUFRQyxnQkFBQSxHQUFxQkMsMEJBQWEsQ0FBbENELGdCQUFBO01BQ1JBLGdCQUFnQixhQUFoQkEsZ0JBQWdCLHVCQUFoQkEsZ0JBQWdCLENBQUVFLGtCQUFrQixFQUFFO0lBQ3hDO0lBQ0EsSUFBSUwsTUFBTSxDQUFDQyx1QkFBdUIsS0FBS0MsU0FBUyxFQUFFO01BQ2hELE1BQU0sSUFBSUksS0FBSyxDQUNaO0FBQ1Q7QUFDQTtBQUNBLCtFQUErRSxDQUN4RTtJQUNIO0lBQ0EsSUFBQUMsZ0NBQWUsR0FBRTtJQUNqQixJQUFJLENBQUNDLGlCQUFpQixHQUFHUixNQUFNLENBQUNDLHVCQUF1QjtFQUN6RDtFQUFBLElBQUFRLGFBQUEsQ0FBQVgsT0FBQSxFQUFBRixnQkFBQTtJQUFBYyxHQUFBO0lBQUFDLEtBQUEsRUFFQSxTQUFBQyxxQkFDRUMsU0FHUyxFQUNUQyxhQUFpQyxFQUNqQztNQUNBLE9BQU8sSUFBSSxDQUFDTixpQkFBaUIsQ0FBQ0ksb0JBQW9CLENBQ2hEQyxTQUFTLEVBQ1RDLGFBQWEsQ0FD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