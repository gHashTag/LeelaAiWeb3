ac2aeb3ad85984351d1aedae7e50f2df
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Extrapolation = void 0;
exports.interpolate = interpolate;
var Extrapolation = function (Extrapolation) {
  Extrapolation["IDENTITY"] = "identity";
  Extrapolation["CLAMP"] = "clamp";
  Extrapolation["EXTEND"] = "extend";
  return Extrapolation;
}({});
exports.Extrapolation = Extrapolation;
function getVal(type, coef, val, leftEdgeOutput, rightEdgeOutput, x) {
  'worklet';

  switch (type) {
    case Extrapolation.IDENTITY:
      return x;
    case Extrapolation.CLAMP:
      if (coef * val < coef * leftEdgeOutput) {
        return leftEdgeOutput;
      }
      return rightEdgeOutput;
    case Extrapolation.EXTEND:
    default:
      return val;
  }
}
function isExtrapolate(value) {
  'worklet';

  return value === Extrapolation.EXTEND || value === Extrapolation.CLAMP || value === Extrapolation.IDENTITY;
}
function validateType(type) {
  'worklet';
  var extrapolationConfig = {
    extrapolateLeft: Extrapolation.EXTEND,
    extrapolateRight: Extrapolation.EXTEND
  };
  if (!type) {
    return extrapolationConfig;
  }
  if (typeof type === 'string') {
    if (!isExtrapolate(type)) {
      throw new Error(`Reanimated: not supported value for "interpolate" \nSupported values: ["extend", "clamp", "identity", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\n Valid example:
        interpolate(value, [inputRange], [outputRange], "clamp")`);
    }
    extrapolationConfig.extrapolateLeft = type;
    extrapolationConfig.extrapolateRight = type;
    return extrapolationConfig;
  }
  if (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft) || type.extrapolateRight && !isExtrapolate(type.extrapolateRight)) {
    throw new Error(`Reanimated: not supported value for "interpolate" \nSupported values: ["extend", "clamp", "identity", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]\n Valid example:
      interpolate(value, [inputRange], [outputRange], {
        extrapolateLeft: Extrapolation.CLAMP,
        extrapolateRight: Extrapolation.IDENTITY
      }})`);
  }
  Object.assign(extrapolationConfig, type);
  return extrapolationConfig;
}
function internalInterpolate(x, narrowedInput, extrapolationConfig) {
  'worklet';

  var leftEdgeInput = narrowedInput.leftEdgeInput,
    rightEdgeInput = narrowedInput.rightEdgeInput,
    leftEdgeOutput = narrowedInput.leftEdgeOutput,
    rightEdgeOutput = narrowedInput.rightEdgeOutput;
  if (rightEdgeInput - leftEdgeInput === 0) return leftEdgeOutput;
  var progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);
  var val = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);
  var coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;
  if (coef * val < coef * leftEdgeOutput) {
    return getVal(extrapolationConfig.extrapolateLeft, coef, val, leftEdgeOutput, rightEdgeOutput, x);
  } else if (coef * val > coef * rightEdgeOutput) {
    return getVal(extrapolationConfig.extrapolateRight, coef, val, leftEdgeOutput, rightEdgeOutput, x);
  }
  return val;
}
function interpolate(x, input, output, type) {
  'worklet';

  if (input.length < 2 || output.length < 2) {
    throw Error('Interpolation input and output should contain at least two values.');
  }
  var extrapolationConfig = validateType(type);
  var length = input.length;
  var narrowedInput = {
    leftEdgeInput: input[0],
    rightEdgeInput: input[1],
    leftEdgeOutput: output[0],
    rightEdgeOutput: output[1]
  };
  if (length > 2) {
    if (x > input[length - 1]) {
      narrowedInput.leftEdgeInput = input[length - 2];
      narrowedInput.rightEdgeInput = input[length - 1];
      narrowedInput.leftEdgeOutput = output[length - 2];
      narrowedInput.rightEdgeOutput = output[length - 1];
    } else {
      for (var i = 1; i < length; ++i) {
        if (x <= input[i]) {
          narrowedInput.leftEdgeInput = input[i - 1];
          narrowedInput.rightEdgeInput = input[i];
          narrowedInput.leftEdgeOutput = output[i - 1];
          narrowedInput.rightEdgeOutput = output[i];
          break;
        }
      }
    }
  }
  return internalInterpolate(x, narrowedInput, extrapolationConfig);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,