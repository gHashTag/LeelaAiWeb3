5965081ef9046a26661ebbf3b1e36fd1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SlideOutUp = exports.SlideOutRight = exports.SlideOutLeft = exports.SlideOutDown = exports.SlideInUp = exports.SlideInRight = exports.SlideInLeft = exports.SlideInDown = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _animationBuilder = require("../animationBuilder");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var SlideInRight = function (_ComplexAnimationBuil) {
  (0, _inherits2.default)(SlideInRight, _ComplexAnimationBuil);
  var _super = _createSuper(SlideInRight);
  function SlideInRight() {
    var _this;
    (0, _classCallCheck2.default)(this, SlideInRight);
    _this = _super.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "build", function () {
      var delayFunction = _this.getDelayFunction();
      var _this$getAnimationAnd = _this.getAnimationAndConfig(),
        _this$getAnimationAnd2 = (0, _slicedToArray2.default)(_this$getAnimationAnd, 2),
        animation = _this$getAnimationAnd2[0],
        config = _this$getAnimationAnd2[1];
      var delay = _this.getDelay();
      var callback = _this.callbackV;
      var initialValues = _this.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            originX: delayFunction(delay, animation(values.targetOriginX, config))
          },
          initialValues: Object.assign({
            originX: values.targetOriginX + values.windowWidth
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this;
  }
  (0, _createClass2.default)(SlideInRight, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new SlideInRight();
    }
  }]);
  return SlideInRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.SlideInRight = SlideInRight;
var SlideInLeft = function (_ComplexAnimationBuil2) {
  (0, _inherits2.default)(SlideInLeft, _ComplexAnimationBuil2);
  var _super2 = _createSuper(SlideInLeft);
  function SlideInLeft() {
    var _this2;
    (0, _classCallCheck2.default)(this, SlideInLeft);
    _this2 = _super2.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this2), "build", function () {
      var delayFunction = _this2.getDelayFunction();
      var _this2$getAnimationAn = _this2.getAnimationAndConfig(),
        _this2$getAnimationAn2 = (0, _slicedToArray2.default)(_this2$getAnimationAn, 2),
        animation = _this2$getAnimationAn2[0],
        config = _this2$getAnimationAn2[1];
      var delay = _this2.getDelay();
      var callback = _this2.callbackV;
      var initialValues = _this2.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            originX: delayFunction(delay, animation(values.targetOriginX, config))
          },
          initialValues: Object.assign({
            originX: values.targetOriginX - values.windowWidth
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this2;
  }
  (0, _createClass2.default)(SlideInLeft, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new SlideInLeft();
    }
  }]);
  return SlideInLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.SlideInLeft = SlideInLeft;
var SlideOutRight = function (_ComplexAnimationBuil3) {
  (0, _inherits2.default)(SlideOutRight, _ComplexAnimationBuil3);
  var _super3 = _createSuper(SlideOutRight);
  function SlideOutRight() {
    var _this3;
    (0, _classCallCheck2.default)(this, SlideOutRight);
    _this3 = _super3.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this3), "build", function () {
      var delayFunction = _this3.getDelayFunction();
      var _this3$getAnimationAn = _this3.getAnimationAndConfig(),
        _this3$getAnimationAn2 = (0, _slicedToArray2.default)(_this3$getAnimationAn, 2),
        animation = _this3$getAnimationAn2[0],
        config = _this3$getAnimationAn2[1];
      var delay = _this3.getDelay();
      var callback = _this3.callbackV;
      var initialValues = _this3.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            originX: delayFunction(delay, animation(Math.max(values.currentOriginX + values.windowWidth, values.windowWidth), config))
          },
          initialValues: Object.assign({
            originX: values.currentOriginX
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this3;
  }
  (0, _createClass2.default)(SlideOutRight, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new SlideOutRight();
    }
  }]);
  return SlideOutRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.SlideOutRight = SlideOutRight;
var SlideOutLeft = function (_ComplexAnimationBuil4) {
  (0, _inherits2.default)(SlideOutLeft, _ComplexAnimationBuil4);
  var _super4 = _createSuper(SlideOutLeft);
  function SlideOutLeft() {
    var _this4;
    (0, _classCallCheck2.default)(this, SlideOutLeft);
    _this4 = _super4.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this4), "build", function () {
      var delayFunction = _this4.getDelayFunction();
      var _this4$getAnimationAn = _this4.getAnimationAndConfig(),
        _this4$getAnimationAn2 = (0, _slicedToArray2.default)(_this4$getAnimationAn, 2),
        animation = _this4$getAnimationAn2[0],
        config = _this4$getAnimationAn2[1];
      var delay = _this4.getDelay();
      var callback = _this4.callbackV;
      var initialValues = _this4.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            originX: delayFunction(delay, animation(Math.min(values.currentOriginX - values.windowWidth, -values.windowWidth), config))
          },
          initialValues: Object.assign({
            originX: values.currentOriginX
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this4;
  }
  (0, _createClass2.default)(SlideOutLeft, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new SlideOutLeft();
    }
  }]);
  return SlideOutLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.SlideOutLeft = SlideOutLeft;
var SlideInUp = function (_ComplexAnimationBuil5) {
  (0, _inherits2.default)(SlideInUp, _ComplexAnimationBuil5);
  var _super5 = _createSuper(SlideInUp);
  function SlideInUp() {
    var _this5;
    (0, _classCallCheck2.default)(this, SlideInUp);
    _this5 = _super5.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this5), "build", function () {
      var delayFunction = _this5.getDelayFunction();
      var _this5$getAnimationAn = _this5.getAnimationAndConfig(),
        _this5$getAnimationAn2 = (0, _slicedToArray2.default)(_this5$getAnimationAn, 2),
        animation = _this5$getAnimationAn2[0],
        config = _this5$getAnimationAn2[1];
      var delay = _this5.getDelay();
      var callback = _this5.callbackV;
      var initialValues = _this5.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            originY: delayFunction(delay, animation(values.targetOriginY, config))
          },
          initialValues: Object.assign({
            originY: -values.windowHeight
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this5;
  }
  (0, _createClass2.default)(SlideInUp, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new SlideInUp();
    }
  }]);
  return SlideInUp;
}(_animationBuilder.ComplexAnimationBuilder);
exports.SlideInUp = SlideInUp;
var SlideInDown = function (_ComplexAnimationBuil6) {
  (0, _inherits2.default)(SlideInDown, _ComplexAnimationBuil6);
  var _super6 = _createSuper(SlideInDown);
  function SlideInDown() {
    var _this6;
    (0, _classCallCheck2.default)(this, SlideInDown);
    _this6 = _super6.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this6), "build", function () {
      var delayFunction = _this6.getDelayFunction();
      var _this6$getAnimationAn = _this6.getAnimationAndConfig(),
        _this6$getAnimationAn2 = (0, _slicedToArray2.default)(_this6$getAnimationAn, 2),
        animation = _this6$getAnimationAn2[0],
        config = _this6$getAnimationAn2[1];
      var delay = _this6.getDelay();
      var callback = _this6.callbackV;
      var initialValues = _this6.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            originY: delayFunction(delay, animation(values.targetOriginY, config))
          },
          initialValues: Object.assign({
            originY: values.targetOriginY + values.windowHeight
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this6;
  }
  (0, _createClass2.default)(SlideInDown, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new SlideInDown();
    }
  }]);
  return SlideInDown;
}(_animationBuilder.ComplexAnimationBuilder);
exports.SlideInDown = SlideInDown;
var SlideOutUp = function (_ComplexAnimationBuil7) {
  (0, _inherits2.default)(SlideOutUp, _ComplexAnimationBuil7);
  var _super7 = _createSuper(SlideOutUp);
  function SlideOutUp() {
    var _this7;
    (0, _classCallCheck2.default)(this, SlideOutUp);
    _this7 = _super7.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this7), "build", function () {
      var delayFunction = _this7.getDelayFunction();
      var _this7$getAnimationAn = _this7.getAnimationAndConfig(),
        _this7$getAnimationAn2 = (0, _slicedToArray2.default)(_this7$getAnimationAn, 2),
        animation = _this7$getAnimationAn2[0],
        config = _this7$getAnimationAn2[1];
      var delay = _this7.getDelay();
      var callback = _this7.callbackV;
      var initialValues = _this7.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            originY: delayFunction(delay, animation(Math.min(values.currentOriginY - values.windowHeight, -values.windowHeight), config))
          },
          initialValues: Object.assign({
            originY: values.currentOriginY
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this7;
  }
  (0, _createClass2.default)(SlideOutUp, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new SlideOutUp();
    }
  }]);
  return SlideOutUp;
}(_animationBuilder.ComplexAnimationBuilder);
exports.SlideOutUp = SlideOutUp;
var SlideOutDown = function (_ComplexAnimationBuil8) {
  (0, _inherits2.default)(SlideOutDown, _ComplexAnimationBuil8);
  var _super8 = _createSuper(SlideOutDown);
  function SlideOutDown() {
    var _this8;
    (0, _classCallCheck2.default)(this, SlideOutDown);
    _this8 = _super8.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this8), "build", function () {
      var delayFunction = _this8.getDelayFunction();
      var _this8$getAnimationAn = _this8.getAnimationAndConfig(),
        _this8$getAnimationAn2 = (0, _slicedToArray2.default)(_this8$getAnimationAn, 2),
        animation = _this8$getAnimationAn2[0],
        config = _this8$getAnimationAn2[1];
      var delay = _this8.getDelay();
      var callback = _this8.callbackV;
      var initialValues = _this8.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            originY: delayFunction(delay, animation(Math.max(values.currentOriginY + values.windowHeight, values.windowHeight), config))
          },
          initialValues: Object.assign({
            originY: values.currentOriginY
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this8;
  }
  (0, _createClass2.default)(SlideOutDown, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new SlideOutDown();
    }
  }]);
  return SlideOutDown;
}(_animationBuilder.ComplexAnimationBuilder);
exports.SlideOutDown = SlideOutDown;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,