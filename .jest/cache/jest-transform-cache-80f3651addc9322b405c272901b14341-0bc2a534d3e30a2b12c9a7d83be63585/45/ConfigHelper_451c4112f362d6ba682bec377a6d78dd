0205005336eb2f26bee5a7e8a6e64303
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adaptViewConfig = adaptViewConfig;
exports.addWhitelistedNativeProps = addWhitelistedNativeProps;
exports.addWhitelistedUIProps = addWhitelistedUIProps;
var _core = require("./reanimated2/core");
var UI_THREAD_PROPS_WHITELIST = {
  opacity: true,
  transform: true,
  backgroundColor: true,
  borderRightColor: true,
  borderBottomColor: true,
  borderColor: true,
  borderEndColor: true,
  borderLeftColor: true,
  borderStartColor: true,
  borderTopColor: true,
  shadowOpacity: true,
  shadowRadius: true,
  scaleX: true,
  scaleY: true,
  translateX: true,
  translateY: true
};
var NATIVE_THREAD_PROPS_WHITELIST = {
  borderBottomWidth: true,
  borderEndWidth: true,
  borderLeftWidth: true,
  borderRightWidth: true,
  borderStartWidth: true,
  borderTopWidth: true,
  borderWidth: true,
  bottom: true,
  flex: true,
  flexGrow: true,
  flexShrink: true,
  height: true,
  left: true,
  margin: true,
  marginBottom: true,
  marginEnd: true,
  marginHorizontal: true,
  marginLeft: true,
  marginRight: true,
  marginStart: true,
  marginTop: true,
  marginVertical: true,
  maxHeight: true,
  maxWidth: true,
  minHeight: true,
  minWidth: true,
  padding: true,
  paddingBottom: true,
  paddingEnd: true,
  paddingHorizontal: true,
  paddingLeft: true,
  paddingRight: true,
  paddingStart: true,
  paddingTop: true,
  paddingVertical: true,
  right: true,
  start: true,
  top: true,
  width: true,
  zIndex: true,
  borderBottomEndRadius: true,
  borderBottomLeftRadius: true,
  borderBottomRightRadius: true,
  borderBottomStartRadius: true,
  borderRadius: true,
  borderTopEndRadius: true,
  borderTopLeftRadius: true,
  borderTopRightRadius: true,
  borderTopStartRadius: true,
  elevation: true,
  fontSize: true,
  lineHeight: true,
  textShadowRadius: true,
  letterSpacing: true,
  aspectRatio: true,
  columnGap: true,
  end: true,
  flexBasis: true,
  gap: true,
  rowGap: true,
  display: true,
  backfaceVisibility: true,
  overflow: true,
  resizeMode: true,
  fontStyle: true,
  fontWeight: true,
  textAlign: true,
  textDecorationLine: true,
  fontFamily: true,
  textAlignVertical: true,
  fontVariant: true,
  textDecorationStyle: true,
  textTransform: true,
  writingDirection: true,
  alignContent: true,
  alignItems: true,
  alignSelf: true,
  direction: true,
  flexDirection: true,
  flexWrap: true,
  justifyContent: true,
  position: true,
  color: true,
  tintColor: true,
  shadowColor: true,
  placeholderTextColor: true
};
function configureProps() {
  (0, _core.configureProps)(Object.keys(UI_THREAD_PROPS_WHITELIST), Object.keys(NATIVE_THREAD_PROPS_WHITELIST));
}
function addWhitelistedNativeProps(props) {
  var oldSize = Object.keys(NATIVE_THREAD_PROPS_WHITELIST).length;
  NATIVE_THREAD_PROPS_WHITELIST = Object.assign({}, NATIVE_THREAD_PROPS_WHITELIST, props);
  if (oldSize !== Object.keys(NATIVE_THREAD_PROPS_WHITELIST).length) {
    configureProps();
  }
}
function addWhitelistedUIProps(props) {
  var oldSize = Object.keys(UI_THREAD_PROPS_WHITELIST).length;
  UI_THREAD_PROPS_WHITELIST = Object.assign({}, UI_THREAD_PROPS_WHITELIST, props);
  if (oldSize !== Object.keys(UI_THREAD_PROPS_WHITELIST).length) {
    configureProps();
  }
}
var PROCESSED_VIEW_NAMES = new Set();
function adaptViewConfig(viewConfig) {
  var viewName = viewConfig.uiViewClassName;
  var props = viewConfig.validAttributes;
  if (!PROCESSED_VIEW_NAMES.has(viewName)) {
    var propsToAdd = {};
    Object.keys(props).forEach(function (key) {
      if (!(key in NATIVE_THREAD_PROPS_WHITELIST) && !(key in UI_THREAD_PROPS_WHITELIST)) {
        propsToAdd[key] = true;
      }
    });
    addWhitelistedUIProps(propsToAdd);
    PROCESSED_VIEW_NAMES.add(viewName);
  }
}
configureProps();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,