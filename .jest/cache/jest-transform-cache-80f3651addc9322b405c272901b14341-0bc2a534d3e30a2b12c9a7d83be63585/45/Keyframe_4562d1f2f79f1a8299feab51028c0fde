430b26df25c8a158a76255b6d277768e
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Keyframe = void 0;
var _defineProperty3 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _Easing = require("../../Easing");
var _animation = require("../../animation");
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var InnerKeyframe = function () {
  function InnerKeyframe(definitions) {
    var _this = this;
    (0, _classCallCheck2.default)(this, InnerKeyframe);
    _defineProperty(this, "durationV", void 0);
    _defineProperty(this, "delayV", void 0);
    _defineProperty(this, "callbackV", void 0);
    _defineProperty(this, "definitions", void 0);
    _defineProperty(this, "build", function () {
      var delay = _this.delayV;
      var delayFunction = _this.getDelayFunction();
      var _this$parseDefinition = _this.parseDefinitions(),
        keyframes = _this$parseDefinition.keyframes,
        initialValues = _this$parseDefinition.initialValues;
      var callback = _this.callbackV;
      return function () {
        'worklet';

        var animations = {};
        var addAnimation = function addAnimation(key) {
          var keyframePoints = keyframes[key];
          if (keyframePoints.length === 0) return;
          var animation = delayFunction(delay, keyframePoints.length === 1 ? (0, _animation.withTiming)(keyframePoints[0].value, {
            duration: keyframePoints[0].duration,
            easing: keyframePoints[0].easing ? keyframePoints[0].easing : _Easing.Easing.linear
          }) : _animation.withSequence.apply(_this, keyframePoints.map(function (keyframePoint) {
            return (0, _animation.withTiming)(keyframePoint.value, {
              duration: keyframePoint.duration,
              easing: keyframePoint.easing ? keyframePoint.easing : _Easing.Easing.linear
            });
          })));
          if (key.includes('transform')) {
            var _animations$transform;
            if (!('transform' in animations)) {
              animations.transform = [];
            }
            (_animations$transform = animations.transform) === null || _animations$transform === void 0 ? void 0 : _animations$transform.push((0, _defineProperty3.default)({}, key.split(':')[1], animation));
          } else {
            animations[key] = animation;
          }
        };
        Object.keys(initialValues).forEach(function (key) {
          if (key.includes('transform')) {
            initialValues[key].forEach(function (transformProp, index) {
              Object.keys(transformProp).forEach(function (transformPropKey) {
                addAnimation(index.toString() + '_transform:' + transformPropKey);
              });
            });
          } else {
            addAnimation(key);
          }
        });
        return {
          animations: animations,
          initialValues: initialValues,
          callback: callback
        };
      };
    });
    this.definitions = definitions;
  }
  (0, _createClass2.default)(InnerKeyframe, [{
    key: "parseDefinitions",
    value: function parseDefinitions() {
      var _this2 = this;
      var parsedKeyframes = {};
      if (this.definitions.from) {
        if (this.definitions['0']) {
          throw Error("You cannot provide both keyframe 0 and 'from' as they both specified initial values");
        }
        this.definitions['0'] = this.definitions.from;
        delete this.definitions.from;
      }
      if (this.definitions.to) {
        if (this.definitions['100']) {
          throw Error("You cannot provide both keyframe 100 and 'to' as they both specified values at the end of the animation.");
        }
        this.definitions['100'] = this.definitions.to;
        delete this.definitions.to;
      }
      if (!this.definitions['0']) {
        throw Error("Please provide 0, or 'from' keyframe with initial state of your object.");
      }
      var initialValues = this.definitions['0'];
      Object.keys(initialValues).forEach(function (styleProp) {
        if (styleProp === 'transform') {
          var _initialValues$styleP;
          (_initialValues$styleP = initialValues[styleProp]) === null || _initialValues$styleP === void 0 ? void 0 : _initialValues$styleP.forEach(function (transformStyle, index) {
            Object.keys(transformStyle).forEach(function (transformProp) {
              parsedKeyframes[index.toString() + '_transform:' + transformProp] = [];
            });
          });
        } else {
          parsedKeyframes[styleProp] = [];
        }
      });
      var duration = this.durationV ? this.durationV : 500;
      var animationKeyPoints = Array.from(Object.keys(this.definitions));
      var getAnimationDuration = function getAnimationDuration(key, currentKeyPoint) {
        var maxDuration = currentKeyPoint / 100 * duration;
        var currentDuration = parsedKeyframes[key].reduce(function (acc, value) {
          return acc + value.duration;
        }, 0);
        return maxDuration - currentDuration;
      };
      var addKeyPoint = function addKeyPoint(_ref) {
        var key = _ref.key,
          value = _ref.value,
          currentKeyPoint = _ref.currentKeyPoint,
          easing = _ref.easing;
        if (!(key in parsedKeyframes)) {
          throw Error("Keyframe can contain only that set of properties that were provide with initial values (keyframe 0 or 'from')");
        }
        parsedKeyframes[key].push({
          duration: getAnimationDuration(key, currentKeyPoint),
          value: value,
          easing: easing
        });
      };
      animationKeyPoints.filter(function (value) {
        return parseInt(value) !== 0;
      }).sort(function (a, b) {
        return parseInt(a) - parseInt(b);
      }).forEach(function (keyPoint) {
        if (parseInt(keyPoint) < 0 || parseInt(keyPoint) > 100) {
          throw Error('Keyframe should be in between range 0 - 100.');
        }
        var keyframe = _this2.definitions[keyPoint];
        var easing = keyframe.easing;
        delete keyframe.easing;
        var addKeyPointWith = function addKeyPointWith(key, value) {
          return addKeyPoint({
            key: key,
            value: value,
            currentKeyPoint: parseInt(keyPoint),
            easing: easing
          });
        };
        Object.keys(keyframe).forEach(function (key) {
          if (key === 'transform') {
            var _keyframe$key;
            (_keyframe$key = keyframe[key]) === null || _keyframe$key === void 0 ? void 0 : _keyframe$key.forEach(function (transformStyle, index) {
              Object.keys(transformStyle).forEach(function (transformProp) {
                addKeyPointWith(index.toString() + '_transform:' + transformProp, transformStyle[transformProp]);
              });
            });
          } else {
            addKeyPointWith(key, keyframe[key]);
          }
        });
      });
      return {
        initialValues: initialValues,
        keyframes: parsedKeyframes
      };
    }
  }, {
    key: "duration",
    value: function duration(durationMs) {
      this.durationV = durationMs;
      return this;
    }
  }, {
    key: "delay",
    value: function delay(delayMs) {
      this.delayV = delayMs;
      return this;
    }
  }, {
    key: "withCallback",
    value: function withCallback(callback) {
      this.callbackV = callback;
      return this;
    }
  }, {
    key: "getDelayFunction",
    value: function getDelayFunction() {
      var delay = this.delayV;
      return delay ? _animation.withDelay : function (_, animation) {
        'worklet';

        return animation;
      };
    }
  }]);
  return InnerKeyframe;
}();
var Keyframe = InnerKeyframe;
exports.Keyframe = Keyframe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,