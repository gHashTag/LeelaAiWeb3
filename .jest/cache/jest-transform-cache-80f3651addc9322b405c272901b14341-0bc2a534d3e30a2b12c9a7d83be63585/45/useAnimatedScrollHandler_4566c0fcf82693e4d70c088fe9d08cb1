8e4c65f6a2beb968d3d7231e5144f5cb
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAnimatedScrollHandler = void 0;
var _Hooks = require("./Hooks");
var useAnimatedScrollHandler = function useAnimatedScrollHandler(handlers, dependencies) {
  var scrollHandlers = typeof handlers === 'function' ? {
    onScroll: handlers
  } : handlers;
  var _useHandler = (0, _Hooks.useHandler)(scrollHandlers, dependencies),
    context = _useHandler.context,
    doDependenciesDiffer = _useHandler.doDependenciesDiffer;
  var subscribeForEvents = ['onScroll'];
  if (scrollHandlers.onBeginDrag !== undefined) {
    subscribeForEvents.push('onScrollBeginDrag');
  }
  if (scrollHandlers.onEndDrag !== undefined) {
    subscribeForEvents.push('onScrollEndDrag');
  }
  if (scrollHandlers.onMomentumBegin !== undefined) {
    subscribeForEvents.push('onMomentumScrollBegin');
  }
  if (scrollHandlers.onMomentumEnd !== undefined) {
    subscribeForEvents.push('onMomentumScrollEnd');
  }
  return (0, _Hooks.useEvent)(function (event) {
    'worklet';

    var onScroll = scrollHandlers.onScroll,
      onBeginDrag = scrollHandlers.onBeginDrag,
      onEndDrag = scrollHandlers.onEndDrag,
      onMomentumBegin = scrollHandlers.onMomentumBegin,
      onMomentumEnd = scrollHandlers.onMomentumEnd;
    if (onScroll && event.eventName.endsWith('onScroll')) {
      onScroll(event, context);
    } else if (onBeginDrag && event.eventName.endsWith('onScrollBeginDrag')) {
      onBeginDrag(event, context);
    } else if (onEndDrag && event.eventName.endsWith('onScrollEndDrag')) {
      onEndDrag(event, context);
    } else if (onMomentumBegin && event.eventName.endsWith('onMomentumScrollBegin')) {
      onMomentumBegin(event, context);
    } else if (onMomentumEnd && event.eventName.endsWith('onMomentumScrollEnd')) {
      onMomentumEnd(event, context);
    }
  }, subscribeForEvents, doDependenciesDiffer);
};
exports.useAnimatedScrollHandler = useAnimatedScrollHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfSG9va3MiLCJyZXF1aXJlIiwidXNlQW5pbWF0ZWRTY3JvbGxIYW5kbGVyIiwiaGFuZGxlcnMiLCJkZXBlbmRlbmNpZXMiLCJzY3JvbGxIYW5kbGVycyIsIm9uU2Nyb2xsIiwiX3VzZUhhbmRsZXIiLCJ1c2VIYW5kbGVyIiwiY29udGV4dCIsImRvRGVwZW5kZW5jaWVzRGlmZmVyIiwic3Vic2NyaWJlRm9yRXZlbnRzIiwib25CZWdpbkRyYWciLCJ1bmRlZmluZWQiLCJwdXNoIiwib25FbmREcmFnIiwib25Nb21lbnR1bUJlZ2luIiwib25Nb21lbnR1bUVuZCIsInVzZUV2ZW50IiwiZXZlbnQiLCJldmVudE5hbWUiLCJlbmRzV2l0aCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ1c2VBbmltYXRlZFNjcm9sbEhhbmRsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBSZWZPYmplY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgdHlwZSB7IE5hdGl2ZVNjcm9sbEV2ZW50LCBOYXRpdmVTeW50aGV0aWNFdmVudCB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgdHlwZSB7IENvbnRleHQsIE5hdGl2ZUV2ZW50LCBXb3JrbGV0RnVuY3Rpb24gfSBmcm9tICcuLi9jb21tb25UeXBlcyc7XG5pbXBvcnQgdHlwZSBXb3JrbGV0RXZlbnRIYW5kbGVyIGZyb20gJy4uL1dvcmtsZXRFdmVudEhhbmRsZXInO1xuaW1wb3J0IHR5cGUgeyBEZXBlbmRlbmN5TGlzdCB9IGZyb20gJy4vY29tbW9uVHlwZXMnO1xuaW1wb3J0IHsgdXNlRXZlbnQsIHVzZUhhbmRsZXIgfSBmcm9tICcuL0hvb2tzJztcblxuZXhwb3J0IGludGVyZmFjZSBTY3JvbGxIYW5kbGVyPFRDb250ZXh0IGV4dGVuZHMgQ29udGV4dD5cbiAgZXh0ZW5kcyBXb3JrbGV0RnVuY3Rpb24ge1xuICAoZXZlbnQ6IE5hdGl2ZVNjcm9sbEV2ZW50LCBjb250ZXh0PzogVENvbnRleHQpOiB2b2lkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNjcm9sbEV2ZW50XG4gIGV4dGVuZHMgTmF0aXZlU2Nyb2xsRXZlbnQsXG4gICAgTmF0aXZlRXZlbnQ8U2Nyb2xsRXZlbnQ+IHtcbiAgZXZlbnROYW1lOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIFNjcm9sbEhhbmRsZXJzPFRDb250ZXh0IGV4dGVuZHMgQ29udGV4dD4ge1xuICBba2V5OiBzdHJpbmddOiBTY3JvbGxIYW5kbGVyPFRDb250ZXh0PiB8IHVuZGVmaW5lZDtcbiAgb25TY3JvbGw/OiBTY3JvbGxIYW5kbGVyPFRDb250ZXh0PjtcbiAgb25CZWdpbkRyYWc/OiBTY3JvbGxIYW5kbGVyPFRDb250ZXh0PjtcbiAgb25FbmREcmFnPzogU2Nyb2xsSGFuZGxlcjxUQ29udGV4dD47XG4gIG9uTW9tZW50dW1CZWdpbj86IFNjcm9sbEhhbmRsZXI8VENvbnRleHQ+O1xuICBvbk1vbWVudHVtRW5kPzogU2Nyb2xsSGFuZGxlcjxUQ29udGV4dD47XG59XG5cbi8vIFRPRE8gVFlQRVNDUklQVCBUaGlzIGlzIGEgdGVtcG9yYXJ5IHR5cGUgdG8gZ2V0IHJpZCBvZiAuZC50cyBmaWxlLlxudHlwZSBPblNjcm9sbCA9IChldmVudDogTmF0aXZlU3ludGhldGljRXZlbnQ8TmF0aXZlU2Nyb2xsRXZlbnQ+KSA9PiB2b2lkO1xuXG4vLyBUT0RPIFRZUEVTQ1JJUFQgVGhpcyBpcyBhIHRlbXBvcmFyeSB0eXBlIHRvIGdldCByaWQgb2YgLmQudHMgZmlsZS5cbmV4cG9ydCB0eXBlIHVzZUFuaW1hdGVkU2Nyb2xsSGFuZGxlciA9IDxcbiAgVENvbnRleHQgZXh0ZW5kcyBDb250ZXh0ID0gUmVjb3JkPHN0cmluZywgbmV2ZXI+XG4+KFxuICBoYW5kbGVyczogU2Nyb2xsSGFuZGxlcnM8VENvbnRleHQ+IHwgU2Nyb2xsSGFuZGxlcjxUQ29udGV4dD4sXG4gIGRlcHM/OiBEZXBlbmRlbmN5TGlzdFxuKSA9PiBPblNjcm9sbDtcblxuZXhwb3J0IGNvbnN0IHVzZUFuaW1hdGVkU2Nyb2xsSGFuZGxlciA9IGZ1bmN0aW9uIDxUQ29udGV4dCBleHRlbmRzIENvbnRleHQ+KFxuICBoYW5kbGVyczogU2Nyb2xsSGFuZGxlcnM8VENvbnRleHQ+IHwgU2Nyb2xsSGFuZGxlcjxUQ29udGV4dD4sXG4gIGRlcGVuZGVuY2llcz86IERlcGVuZGVuY3lMaXN0XG4pOiBSZWZPYmplY3Q8V29ya2xldEV2ZW50SGFuZGxlcjxTY3JvbGxFdmVudD4+IHtcbiAgLy8gY2FzZSB3aGVuIGhhbmRsZXJzIGlzIGEgZnVuY3Rpb25cbiAgY29uc3Qgc2Nyb2xsSGFuZGxlcnM6IFNjcm9sbEhhbmRsZXJzPFRDb250ZXh0PiA9XG4gICAgdHlwZW9mIGhhbmRsZXJzID09PSAnZnVuY3Rpb24nID8geyBvblNjcm9sbDogaGFuZGxlcnMgfSA6IGhhbmRsZXJzO1xuICBjb25zdCB7IGNvbnRleHQsIGRvRGVwZW5kZW5jaWVzRGlmZmVyIH0gPSB1c2VIYW5kbGVyPFNjcm9sbEV2ZW50LCBUQ29udGV4dD4oXG4gICAgc2Nyb2xsSGFuZGxlcnMsXG4gICAgZGVwZW5kZW5jaWVzXG4gICk7XG5cbiAgLy8gYnVpbGQgZXZlbnQgc3Vic2NyaXB0aW9uIGFycmF5XG4gIGNvbnN0IHN1YnNjcmliZUZvckV2ZW50cyA9IFsnb25TY3JvbGwnXTtcbiAgaWYgKHNjcm9sbEhhbmRsZXJzLm9uQmVnaW5EcmFnICE9PSB1bmRlZmluZWQpIHtcbiAgICBzdWJzY3JpYmVGb3JFdmVudHMucHVzaCgnb25TY3JvbGxCZWdpbkRyYWcnKTtcbiAgfVxuICBpZiAoc2Nyb2xsSGFuZGxlcnMub25FbmREcmFnICE9PSB1bmRlZmluZWQpIHtcbiAgICBzdWJzY3JpYmVGb3JFdmVudHMucHVzaCgnb25TY3JvbGxFbmREcmFnJyk7XG4gIH1cbiAgaWYgKHNjcm9sbEhhbmRsZXJzLm9uTW9tZW50dW1CZWdpbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgc3Vic2NyaWJlRm9yRXZlbnRzLnB1c2goJ29uTW9tZW50dW1TY3JvbGxCZWdpbicpO1xuICB9XG4gIGlmIChzY3JvbGxIYW5kbGVycy5vbk1vbWVudHVtRW5kICE9PSB1bmRlZmluZWQpIHtcbiAgICBzdWJzY3JpYmVGb3JFdmVudHMucHVzaCgnb25Nb21lbnR1bVNjcm9sbEVuZCcpO1xuICB9XG5cbiAgcmV0dXJuIHVzZUV2ZW50PFNjcm9sbEV2ZW50PihcbiAgICAoZXZlbnQ6IFNjcm9sbEV2ZW50KSA9PiB7XG4gICAgICAnd29ya2xldCc7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG9uU2Nyb2xsLFxuICAgICAgICBvbkJlZ2luRHJhZyxcbiAgICAgICAgb25FbmREcmFnLFxuICAgICAgICBvbk1vbWVudHVtQmVnaW4sXG4gICAgICAgIG9uTW9tZW50dW1FbmQsXG4gICAgICB9ID0gc2Nyb2xsSGFuZGxlcnM7XG4gICAgICBpZiAob25TY3JvbGwgJiYgZXZlbnQuZXZlbnROYW1lLmVuZHNXaXRoKCdvblNjcm9sbCcpKSB7XG4gICAgICAgIG9uU2Nyb2xsKGV2ZW50LCBjb250ZXh0KTtcbiAgICAgIH0gZWxzZSBpZiAob25CZWdpbkRyYWcgJiYgZXZlbnQuZXZlbnROYW1lLmVuZHNXaXRoKCdvblNjcm9sbEJlZ2luRHJhZycpKSB7XG4gICAgICAgIG9uQmVnaW5EcmFnKGV2ZW50LCBjb250ZXh0KTtcbiAgICAgIH0gZWxzZSBpZiAob25FbmREcmFnICYmIGV2ZW50LmV2ZW50TmFtZS5lbmRzV2l0aCgnb25TY3JvbGxFbmREcmFnJykpIHtcbiAgICAgICAgb25FbmREcmFnKGV2ZW50LCBjb250ZXh0KTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIG9uTW9tZW50dW1CZWdpbiAmJlxuICAgICAgICBldmVudC5ldmVudE5hbWUuZW5kc1dpdGgoJ29uTW9tZW50dW1TY3JvbGxCZWdpbicpXG4gICAgICApIHtcbiAgICAgICAgb25Nb21lbnR1bUJlZ2luKGV2ZW50LCBjb250ZXh0KTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIG9uTW9tZW50dW1FbmQgJiZcbiAgICAgICAgZXZlbnQuZXZlbnROYW1lLmVuZHNXaXRoKCdvbk1vbWVudHVtU2Nyb2xsRW5kJylcbiAgICAgICkge1xuICAgICAgICBvbk1vbWVudHVtRW5kKGV2ZW50LCBjb250ZXh0KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHN1YnNjcmliZUZvckV2ZW50cyxcbiAgICBkb0RlcGVuZGVuY2llc0RpZmZlclxuICAgIC8vIFRPRE8gVFlQRVNDUklQVCBUaGlzIHRlbXBvcmFyeSBjYXN0IGlzIHRvIGdldCByaWQgb2YgLmQudHMgZmlsZS5cbiAgKSBhcyBhbnk7XG4gIC8vIFRPRE8gVFlQRVNDUklQVCBUaGlzIHRlbXBvcmFyeSBjYXN0IGlzIHRvIGdldCByaWQgb2YgLmQudHMgZmlsZS5cbn0gYXMgdW5rbm93biBhcyB1c2VBbmltYXRlZFNjcm9sbEhhbmRsZXI7XG4iXSwibWFwcGluZ3MiOiI7Ozs7QUFLQSxJQUFBQSxNQUFBLEdBQUFDLE9BQUE7QUFnQ08sSUFBTUMsd0JBQXdCLEdBQUcsU0FBM0JBLHdCQUF3QkEsQ0FDbkNDLFFBQTRELEVBQzVEQyxZQUE2QixFQUNnQjtFQUU3QyxJQUFNQyxjQUF3QyxHQUM1QyxPQUFPRixRQUFRLEtBQUssVUFBVSxHQUFHO0lBQUVHLFFBQVEsRUFBRUg7RUFBUyxDQUFDLEdBQUdBLFFBQVE7RUFDcEUsSUFBQUksV0FBQSxHQUEwQyxJQUFBQyxpQkFBVSxFQUNsREgsY0FBYyxFQUNkRCxZQUFZLENBQ2I7SUFIT0ssT0FBTyxHQUFBRixXQUFBLENBQVBFLE9BQU87SUFBRUMsb0JBQUEsR0FBQUgsV0FBQSxDQUFBRyxvQkFBQTtFQU1qQixJQUFNQyxrQkFBa0IsR0FBRyxDQUFDLFVBQVUsQ0FBQztFQUN2QyxJQUFJTixjQUFjLENBQUNPLFdBQVcsS0FBS0MsU0FBUyxFQUFFO0lBQzVDRixrQkFBa0IsQ0FBQ0csSUFBSSxDQUFDLG1CQUFtQixDQUFDO0VBQzlDO0VBQ0EsSUFBSVQsY0FBYyxDQUFDVSxTQUFTLEtBQUtGLFNBQVMsRUFBRTtJQUMxQ0Ysa0JBQWtCLENBQUNHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztFQUM1QztFQUNBLElBQUlULGNBQWMsQ0FBQ1csZUFBZSxLQUFLSCxTQUFTLEVBQUU7SUFDaERGLGtCQUFrQixDQUFDRyxJQUFJLENBQUMsdUJBQXVCLENBQUM7RUFDbEQ7RUFDQSxJQUFJVCxjQUFjLENBQUNZLGFBQWEsS0FBS0osU0FBUyxFQUFFO0lBQzlDRixrQkFBa0IsQ0FBQ0csSUFBSSxDQUFDLHFCQUFxQixDQUFDO0VBQ2hEO0VBRUEsT0FBTyxJQUFBSSxlQUFRLEVBQ1osVUFBQUMsS0FBa0IsRUFBSztJQUN0QixTQUFTOztJQUNULElBQ0ViLFFBQVEsR0FLTkQsY0FBYyxDQUxoQkMsUUFBUTtNQUNSTSxXQUFXLEdBSVRQLGNBQWMsQ0FKaEJPLFdBQVc7TUFDWEcsU0FBUyxHQUdQVixjQUFjLENBSGhCVSxTQUFTO01BQ1RDLGVBQWUsR0FFYlgsY0FBYyxDQUZoQlcsZUFBZTtNQUNmQyxhQUFBLEdBQ0VaLGNBQWMsQ0FEaEJZLGFBQUE7SUFFRixJQUFJWCxRQUFRLElBQUlhLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxRQUFRLENBQUMsVUFBVSxDQUFDLEVBQUU7TUFDcERmLFFBQVEsQ0FBQ2EsS0FBSyxFQUFFVixPQUFPLENBQUM7SUFDMUIsQ0FBQyxNQUFNLElBQUlHLFdBQVcsSUFBSU8sS0FBSyxDQUFDQyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO01BQ3ZFVCxXQUFXLENBQUNPLEtBQUssRUFBRVYsT0FBTyxDQUFDO0lBQzdCLENBQUMsTUFBTSxJQUFJTSxTQUFTLElBQUlJLEtBQUssQ0FBQ0MsU0FBUyxDQUFDQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRTtNQUNuRU4sU0FBUyxDQUFDSSxLQUFLLEVBQUVWLE9BQU8sQ0FBQztJQUMzQixDQUFDLE1BQU0sSUFDTE8sZUFBZSxJQUNmRyxLQUFLLENBQUNDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFDLHVCQUF1QixDQUFDLEVBQ2pEO01BQ0FMLGVBQWUsQ0FBQ0csS0FBSyxFQUFFVixPQUFPLENBQUM7SUFDakMsQ0FBQyxNQUFNLElBQ0xRLGFBQWEsSUFDYkUsS0FBSyxDQUFDQyxTQUFTLENBQUNDLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQyxFQUMvQztNQUNBSixhQUFhLENBQUNFLEtBQUssRUFBRVYsT0FBTyxDQUFDO0lBQy9CO0VBQ0YsQ0FBQyxFQUNERSxrQkFBa0IsRUFDbEJELG9CQUNBLENBQ0Q7QUFFSCxDQUF3QztBQUFBWSxPQUFBLENBQUFwQix3QkFBQSxHQUFBQSx3QkFBQSJ9