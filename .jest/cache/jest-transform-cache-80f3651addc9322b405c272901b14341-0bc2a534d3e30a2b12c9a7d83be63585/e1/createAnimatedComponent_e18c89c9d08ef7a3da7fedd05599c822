bf91d56680ba0f0e7da09294dc3984c1
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createAnimatedComponent;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _WorkletEventHandler = _interopRequireDefault(require("./reanimated2/WorkletEventHandler"));
var _setAndForwardRef = _interopRequireDefault(require("./setAndForwardRef"));
require("./reanimated2/layoutReanimation/animationsManager");
var _invariant = _interopRequireDefault(require("invariant"));
var _ConfigHelper = require("./ConfigHelper");
var _RNRenderer = require("./reanimated2/platform-specific/RNRenderer");
var _core = require("./reanimated2/core");
var _PlatformChecker = require("./reanimated2/PlatformChecker");
var _animation = require("./reanimated2/animation");
var _layoutReanimation = require("./reanimated2/layoutReanimation");
var _ViewDescriptorsSet = require("./reanimated2/ViewDescriptorsSet");
var _fabricUtils = require("./reanimated2/fabricUtils");
var _UpdateProps = _interopRequireDefault(require("./reanimated2/UpdateProps"));
var _NativeReanimated = _interopRequireDefault(require("./reanimated2/NativeReanimated"));
var _reanimated = require("./reanimated2");
var _PropsRegistry = require("./reanimated2/PropsRegistry");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function dummyListener() {}
function maybeBuild(layoutAnimationOrBuilder) {
  var isAnimationBuilder = function isAnimationBuilder(value) {
    return 'build' in layoutAnimationOrBuilder && typeof layoutAnimationOrBuilder.build === 'function';
  };
  if (isAnimationBuilder(layoutAnimationOrBuilder)) {
    return layoutAnimationOrBuilder.build();
  } else {
    return layoutAnimationOrBuilder;
  }
}
function flattenArray(array) {
  if (!Array.isArray(array)) {
    return [array];
  }
  var resultArr = [];
  var _flattenArray = function _flattenArray(arr) {
    arr.forEach(function (item) {
      if (Array.isArray(item)) {
        _flattenArray(item);
      } else {
        resultArr.push(item);
      }
    });
  };
  _flattenArray(array);
  return resultArr;
}
function onlyAnimatedStyles(styles) {
  return styles.filter(function (style) {
    return style === null || style === void 0 ? void 0 : style.viewDescriptors;
  });
}
function isSameAnimatedStyle(style1, style2) {
  return (style1 === null || style1 === void 0 ? void 0 : style1.viewsRef) === (style2 === null || style2 === void 0 ? void 0 : style2.viewsRef);
}
var isSameAnimatedProps = isSameAnimatedStyle;
var has = function has(key, x) {
  if (typeof x === 'function' || typeof x === 'object') {
    if (x === null || x === undefined) {
      return false;
    } else {
      return key in x;
    }
  }
  return false;
};
function isInlineStyleTransform(transform) {
  if (!transform) {
    return false;
  }
  return transform.some(function (t) {
    return hasInlineStyles(t);
  });
}
function hasInlineStyles(style) {
  if (!style) {
    return false;
  }
  return Object.keys(style).some(function (key) {
    var styleValue = style[key];
    return (0, _reanimated.isSharedValue)(styleValue) || key === 'transform' && isInlineStyleTransform(styleValue);
  });
}
function extractSharedValuesMapFromProps(props) {
  var inlineProps = {};
  for (var key in props) {
    var value = props[key];
    if (key === 'style') {
      var _props$style;
      var styles = flattenArray((_props$style = props.style) != null ? _props$style : []);
      styles.forEach(function (style) {
        if (!style) {
          return;
        }
        for (var _ref of Object.entries(style)) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var _key = _ref2[0];
          var styleValue = _ref2[1];
          if ((0, _reanimated.isSharedValue)(styleValue)) {
            inlineProps[_key] = styleValue;
          } else if (_key === 'transform' && isInlineStyleTransform(styleValue)) {
            inlineProps[_key] = styleValue;
          }
        }
      });
    } else if ((0, _reanimated.isSharedValue)(value)) {
      inlineProps[key] = value;
    }
  }
  return inlineProps;
}
function inlinePropsHasChanged(styles1, styles2) {
  if (Object.keys(styles1).length !== Object.keys(styles2).length) {
    return true;
  }
  for (var key of Object.keys(styles1)) {
    if (styles1[key] !== styles2[key]) return true;
  }
  return false;
}
function getInlinePropsUpdate(inlineProps) {
  'worklet';

  var update = {};
  for (var _ref3 of Object.entries(inlineProps)) {
    var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
    var key = _ref4[0];
    var styleValue = _ref4[1];
    if (key === 'transform') {
      update[key] = styleValue.map(function (transform) {
        return getInlinePropsUpdate(transform);
      });
    } else if ((0, _reanimated.isSharedValue)(styleValue)) {
      update[key] = styleValue.value;
    } else {
      update[key] = styleValue;
    }
  }
  return update;
}
function createAnimatedComponent(Component, options) {
  (0, _invariant.default)(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, `Looks like you're passing a function component \`${Component.name}\` to \`createAnimatedComponent\` function which supports only class components. Please wrap your function component with \`React.forwardRef()\` or use a class component instead.`);
  var AnimatedComponent = function (_React$Component) {
    (0, _inherits2.default)(AnimatedComponent, _React$Component);
    var _super = _createSuper(AnimatedComponent);
    function AnimatedComponent(props) {
      var _this;
      (0, _classCallCheck2.default)(this, AnimatedComponent);
      _this = _super.call(this, props);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_styles", null);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_animatedProps", void 0);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_viewTag", -1);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_isFirstRender", true);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "animatedStyle", {
        value: {}
      });
      _defineProperty((0, _assertThisInitialized2.default)(_this), "initialStyle", {});
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_component", null);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_inlinePropsViewDescriptors", null);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_inlinePropsMapperId", null);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_inlineProps", {});
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_sharedElementTransition", null);
      _defineProperty((0, _assertThisInitialized2.default)(_this), "_setComponentRef", (0, _setAndForwardRef.default)({
        getForwardedRef: function getForwardedRef() {
          return _this.props.forwardedRef;
        },
        setLocalRef: function setLocalRef(ref) {
          var tag = (0, _reactNative.findNodeHandle)(ref);
          var _this$props = _this.props,
            layout = _this$props.layout,
            entering = _this$props.entering,
            exiting = _this$props.exiting,
            sharedTransitionTag = _this$props.sharedTransitionTag;
          if ((layout || entering || exiting || sharedTransitionTag) && tag != null) {
            if (!(0, _PlatformChecker.shouldBeUseWeb)()) {
              (0, _core.enableLayoutAnimations)(true, false);
            }
            if (layout) {
              (0, _core.configureLayoutAnimations)(tag, _layoutReanimation.LayoutAnimationType.LAYOUT, maybeBuild(layout));
            }
            if (entering) {
              (0, _core.configureLayoutAnimations)(tag, _layoutReanimation.LayoutAnimationType.ENTERING, maybeBuild(entering));
            }
            if (exiting) {
              (0, _core.configureLayoutAnimations)(tag, _layoutReanimation.LayoutAnimationType.EXITING, maybeBuild(exiting));
            }
            if (sharedTransitionTag) {
              var _this$props$sharedTra;
              var sharedElementTransition = (_this$props$sharedTra = _this.props.sharedTransitionStyle) != null ? _this$props$sharedTra : new _layoutReanimation.SharedTransition();
              sharedElementTransition.registerTransition(tag, sharedTransitionTag);
              _this._sharedElementTransition = sharedElementTransition;
            }
          }
          if (ref !== _this._component) {
            _this._component = ref;
          }
        }
      }));
      if ((0, _PlatformChecker.isJest)()) {
        _this.animatedStyle = {
          value: {}
        };
      }
      return _this;
    }
    (0, _createClass2.default)(AnimatedComponent, [{
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var _this$_sharedElementT;
        this._detachNativeEvents();
        this._detachStyles();
        this._detachInlineProps();
        (_this$_sharedElementT = this._sharedElementTransition) === null || _this$_sharedElementT === void 0 ? void 0 : _this$_sharedElementT.unregisterTransition(this._viewTag);
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        this._attachNativeEvents();
        this._attachAnimatedStyles();
        this._attachInlineProps();
      }
    }, {
      key: "_getEventViewRef",
      value: function _getEventViewRef() {
        var _this$_component;
        return (_this$_component = this._component) !== null && _this$_component !== void 0 && _this$_component.getScrollableNode ? this._component.getScrollableNode() : this._component;
      }
    }, {
      key: "_attachNativeEvents",
      value: function _attachNativeEvents() {
        var node = this._getEventViewRef();
        var viewTag = null;
        for (var key in this.props) {
          var prop = this.props[key];
          if (has('current', prop) && prop.current instanceof _WorkletEventHandler.default) {
            if (viewTag === null) {
              viewTag = (0, _reactNative.findNodeHandle)(options !== null && options !== void 0 && options.setNativeProps ? this : node);
            }
            prop.current.registerForEvents(viewTag, key);
          }
        }
      }
    }, {
      key: "_detachNativeEvents",
      value: function _detachNativeEvents() {
        for (var key in this.props) {
          var prop = this.props[key];
          if (has('current', prop) && prop.current instanceof _WorkletEventHandler.default) {
            prop.current.unregisterFromEvents();
          }
        }
      }
    }, {
      key: "_detachStyles",
      value: function _detachStyles() {
        if ((0, _PlatformChecker.isWeb)() && this._styles !== null) {
          for (var style of this._styles) {
            if (style !== null && style !== void 0 && style.viewsRef) {
              style.viewsRef.remove(this);
            }
          }
        } else if (this._viewTag !== -1 && this._styles !== null) {
          var _this$props$animatedP;
          for (var _style of this._styles) {
            _style.viewDescriptors.remove(this._viewTag);
          }
          if ((_this$props$animatedP = this.props.animatedProps) !== null && _this$props$animatedP !== void 0 && _this$props$animatedP.viewDescriptors) {
            this.props.animatedProps.viewDescriptors.remove(this._viewTag);
          }
          if (global._IS_FABRIC) {
            (0, _PropsRegistry.removeFromPropsRegistry)(this._viewTag);
          }
        }
      }
    }, {
      key: "_reattachNativeEvents",
      value: function _reattachNativeEvents(prevProps) {
        for (var key in prevProps) {
          var prop = this.props[key];
          if (has('current', prop) && prop.current instanceof _WorkletEventHandler.default && prop.current.reattachNeeded) {
            prop.current.unregisterFromEvents();
          }
        }
        var viewTag = null;
        for (var _key2 in this.props) {
          var _prop = this.props[_key2];
          if (has('current', _prop) && _prop.current instanceof _WorkletEventHandler.default && _prop.current.reattachNeeded) {
            if (viewTag === null) {
              var node = this._getEventViewRef();
              viewTag = (0, _reactNative.findNodeHandle)(options !== null && options !== void 0 && options.setNativeProps ? this : node);
            }
            _prop.current.registerForEvents(viewTag, _key2);
            _prop.current.reattachNeeded = false;
          }
        }
      }
    }, {
      key: "_updateFromNative",
      value: function _updateFromNative(props) {
        if (options !== null && options !== void 0 && options.setNativeProps) {
          options.setNativeProps(this._component, props);
        } else {
          var _this$_component2, _this$_component2$set;
          (_this$_component2 = this._component) === null || _this$_component2 === void 0 ? void 0 : (_this$_component2$set = _this$_component2.setNativeProps) === null || _this$_component2$set === void 0 ? void 0 : _this$_component2$set.call(_this$_component2, props);
        }
      }
    }, {
      key: "_getViewInfo",
      value: function _getViewInfo() {
        var _this$_component3;
        var viewTag;
        var viewName;
        var shadowNodeWrapper = null;
        var viewConfig;
        var component = (_this$_component3 = this._component) !== null && _this$_component3 !== void 0 && _this$_component3.getAnimatableRef ? this._component.getAnimatableRef() : this;
        if ((0, _PlatformChecker.isWeb)()) {
          viewTag = (0, _reactNative.findNodeHandle)(component);
          viewName = null;
          shadowNodeWrapper = null;
          viewConfig = null;
        } else {
          var _hostInstance$viewCon;
          var hostInstance = _RNRenderer.RNRenderer.findHostInstance_DEPRECATED(component);
          if (!hostInstance) {
            throw new Error('Cannot find host instance for this component. Maybe it renders nothing?');
          }
          viewTag = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance._nativeTag;
          viewName = hostInstance === null || hostInstance === void 0 ? void 0 : (_hostInstance$viewCon = hostInstance.viewConfig) === null || _hostInstance$viewCon === void 0 ? void 0 : _hostInstance$viewCon.uiViewClassName;
          viewConfig = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance.viewConfig;
          if (global._IS_FABRIC) {
            shadowNodeWrapper = (0, _fabricUtils.getShadowNodeWrapperFromRef)(this);
          }
        }
        return {
          viewTag: viewTag,
          viewName: viewName,
          shadowNodeWrapper: shadowNodeWrapper,
          viewConfig: viewConfig
        };
      }
    }, {
      key: "_attachAnimatedStyles",
      value: function _attachAnimatedStyles() {
        var _this2 = this;
        var _this$props$animatedP2, _this$props$animatedP3;
        var styles = this.props.style ? onlyAnimatedStyles(flattenArray(this.props.style)) : [];
        var prevStyles = this._styles;
        this._styles = styles;
        var prevAnimatedProps = this._animatedProps;
        this._animatedProps = this.props.animatedProps;
        var _this$_getViewInfo = this._getViewInfo(),
          viewTag = _this$_getViewInfo.viewTag,
          viewName = _this$_getViewInfo.viewName,
          shadowNodeWrapper = _this$_getViewInfo.shadowNodeWrapper,
          viewConfig = _this$_getViewInfo.viewConfig;
        var hasReanimated2Props = ((_this$props$animatedP2 = this.props.animatedProps) === null || _this$props$animatedP2 === void 0 ? void 0 : _this$props$animatedP2.viewDescriptors) || styles.length;
        if (hasReanimated2Props && viewConfig) {
          (0, _ConfigHelper.adaptViewConfig)(viewConfig);
        }
        this._viewTag = viewTag;
        if (prevStyles) {
          var hasOneSameStyle = styles.length === 1 && prevStyles.length === 1 && isSameAnimatedStyle(styles[0], prevStyles[0]);
          if (!hasOneSameStyle) {
            var _loop = function _loop(prevStyle) {
              var isPresent = styles.some(function (style) {
                return isSameAnimatedStyle(style, prevStyle);
              });
              if (!isPresent) {
                prevStyle.viewDescriptors.remove(viewTag);
              }
            };
            for (var prevStyle of prevStyles) {
              _loop(prevStyle);
            }
          }
        }
        styles.forEach(function (style) {
          style.viewDescriptors.add({
            tag: viewTag,
            name: viewName,
            shadowNodeWrapper: shadowNodeWrapper
          });
          if ((0, _PlatformChecker.isJest)()) {
            _this2.animatedStyle.value = Object.assign({}, _this2.animatedStyle.value, style.initial.value);
            style.animatedStyle.current = _this2.animatedStyle;
          }
        });
        if (prevAnimatedProps && !isSameAnimatedProps(prevAnimatedProps, this.props.animatedProps)) {
          prevAnimatedProps.viewDescriptors.remove(viewTag);
        }
        if ((_this$props$animatedP3 = this.props.animatedProps) !== null && _this$props$animatedP3 !== void 0 && _this$props$animatedP3.viewDescriptors) {
          this.props.animatedProps.viewDescriptors.add({
            tag: viewTag,
            name: viewName,
            shadowNodeWrapper: shadowNodeWrapper
          });
        }
      }
    }, {
      key: "_attachInlineProps",
      value: function _attachInlineProps() {
        var newInlineProps = extractSharedValuesMapFromProps(this.props);
        var hasChanged = inlinePropsHasChanged(newInlineProps, this._inlineProps);
        if (hasChanged) {
          if (!this._inlinePropsViewDescriptors) {
            this._inlinePropsViewDescriptors = (0, _ViewDescriptorsSet.makeViewDescriptorsSet)();
            var _this$_getViewInfo2 = this._getViewInfo(),
              viewTag = _this$_getViewInfo2.viewTag,
              viewName = _this$_getViewInfo2.viewName,
              shadowNodeWrapper = _this$_getViewInfo2.shadowNodeWrapper,
              viewConfig = _this$_getViewInfo2.viewConfig;
            if (Object.keys(newInlineProps).length && viewConfig) {
              (0, _ConfigHelper.adaptViewConfig)(viewConfig);
            }
            this._inlinePropsViewDescriptors.add({
              tag: viewTag,
              name: viewName,
              shadowNodeWrapper: shadowNodeWrapper
            });
          }
          var sharableViewDescriptors = this._inlinePropsViewDescriptors.sharableViewDescriptors;
          var maybeViewRef = _NativeReanimated.default.native ? undefined : {
            items: new Set([this])
          };
          var updaterFunction = function updaterFunction() {
            'worklet';

            var update = getInlinePropsUpdate(newInlineProps);
            (0, _UpdateProps.default)(sharableViewDescriptors, update, maybeViewRef);
          };
          this._inlineProps = newInlineProps;
          if (this._inlinePropsMapperId) {
            (0, _core.stopMapper)(this._inlinePropsMapperId);
          }
          this._inlinePropsMapperId = null;
          if (Object.keys(newInlineProps).length) {
            this._inlinePropsMapperId = (0, _core.startMapper)(updaterFunction, Object.values(newInlineProps));
          }
        }
      }
    }, {
      key: "_detachInlineProps",
      value: function _detachInlineProps() {
        if (this._inlinePropsMapperId) {
          (0, _core.stopMapper)(this._inlinePropsMapperId);
        }
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        this._reattachNativeEvents(prevProps);
        this._attachAnimatedStyles();
        this._attachInlineProps();
      }
    }, {
      key: "_filterNonAnimatedProps",
      value: function _filterNonAnimatedProps(inputProps) {
        var _this3 = this;
        var props = {};
        var _loop2 = function _loop2() {
          var value = inputProps[key];
          if (key === 'style') {
            var styleProp = inputProps.style;
            var styles = flattenArray(styleProp != null ? styleProp : []);
            var processedStyle = styles.map(function (style) {
              if (style && style.viewDescriptors) {
                style.viewsRef.add(_this3);
                if (_this3._isFirstRender) {
                  _this3.initialStyle = Object.assign({}, style.initial.value, _this3.initialStyle, (0, _animation.initialUpdaterRun)(style.initial.updater));
                }
                return _this3.initialStyle;
              } else if (hasInlineStyles(style)) {
                if (_this3._isFirstRender) {
                  return getInlinePropsUpdate(style);
                }
                var newStyle = {};
                for (var _ref5 of Object.entries(style)) {
                  var _ref6 = (0, _slicedToArray2.default)(_ref5, 2);
                  var _key3 = _ref6[0];
                  var styleValue = _ref6[1];
                  if (!(0, _reanimated.isSharedValue)(styleValue) && !(_key3 === 'transform' && isInlineStyleTransform(styleValue))) {
                    newStyle[_key3] = styleValue;
                  }
                }
                return newStyle;
              } else {
                return style;
              }
            });
            props[key] = _reactNative.StyleSheet.flatten(processedStyle);
          } else if (key === 'animatedProps') {
            var animatedProp = inputProps.animatedProps;
            if (animatedProp.initial !== undefined) {
              Object.keys(animatedProp.initial.value).forEach(function (key) {
                var _animatedProp$initial, _animatedProp$viewsRe;
                props[key] = (_animatedProp$initial = animatedProp.initial) === null || _animatedProp$initial === void 0 ? void 0 : _animatedProp$initial.value[key];
                (_animatedProp$viewsRe = animatedProp.viewsRef) === null || _animatedProp$viewsRe === void 0 ? void 0 : _animatedProp$viewsRe.add(_this3);
              });
            }
          } else if (has('current', value) && value.current instanceof _WorkletEventHandler.default) {
            if (value.current.eventNames.length > 0) {
              value.current.eventNames.forEach(function (eventName) {
                props[eventName] = has('listeners', value.current) ? value.current.listeners[eventName] : dummyListener;
              });
            } else {
              props[key] = dummyListener;
            }
          } else if ((0, _reanimated.isSharedValue)(value)) {
            if (_this3._isFirstRender) {
              props[key] = value.value;
            }
          } else if (key !== 'onGestureHandlerStateChange' || !(0, _PlatformChecker.isChromeDebugger)()) {
            props[key] = value;
          }
        };
        for (var key in inputProps) {
          _loop2();
        }
        return props;
      }
    }, {
      key: "render",
      value: function render() {
        var props = this._filterNonAnimatedProps(this.props);
        if ((0, _PlatformChecker.isJest)()) {
          props.animatedStyle = this.animatedStyle;
        }
        if (this._isFirstRender) {
          this._isFirstRender = false;
        }
        var platformProps = _reactNative.Platform.select({
          web: {},
          default: {
            collapsable: false
          }
        });
        return _react.default.createElement(Component, _extends({}, props, {
          ref: this._setComponentRef
        }, platformProps));
      }
    }]);
    return AnimatedComponent;
  }(_react.default.Component);
  _defineProperty(AnimatedComponent, "displayName", void 0);
  AnimatedComponent.displayName = `AnimatedComponent(${Component.displayName || Component.name || 'Component'})`;
  return _react.default.forwardRef(function (props, ref) {
    return _react.default.createElement(AnimatedComponent, _extends({}, props, ref === null ? null : {
      forwardedRef: ref
    }));
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,