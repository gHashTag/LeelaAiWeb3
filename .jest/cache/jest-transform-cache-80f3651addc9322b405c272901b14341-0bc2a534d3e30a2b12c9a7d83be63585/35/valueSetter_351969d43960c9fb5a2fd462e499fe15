2d2dec10d5d39c9b203a553d6f574dcb
Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "stopMapper", {
  enumerable: true,
  get: function get() {
    return _mappers.stopMapper;
  }
});
exports.valueSetter = valueSetter;
var _mappers = require("./mappers");
function valueSetter(sv, value) {
  'worklet';

  var previousAnimation = sv._animation;
  if (previousAnimation) {
    previousAnimation.cancelled = true;
    sv._animation = null;
  }
  if (typeof value === 'function' || value !== null && typeof value === 'object' && value.onFrame !== undefined) {
    var animation = typeof value === 'function' ? value() : value;
    if (sv._value === animation.current && !animation.isHigherOrder) {
      animation.callback && animation.callback(true);
      return;
    }
    var initializeAnimation = function initializeAnimation(timestamp) {
      animation.onStart(animation, sv.value, timestamp, previousAnimation);
    };
    var currentTimestamp = global.__frameTimestamp || performance.now();
    initializeAnimation(currentTimestamp);
    var step = function step(timestamp) {
      if (animation.cancelled) {
        animation.callback && animation.callback(false);
        return;
      }
      var finished = animation.onFrame(animation, timestamp);
      animation.finished = true;
      animation.timestamp = timestamp;
      sv._value = animation.current;
      if (finished) {
        animation.callback && animation.callback(true);
      } else {
        requestAnimationFrame(step);
      }
    };
    sv._animation = animation;
    step(currentTimestamp);
  } else {
    if (sv._value === value) {
      return;
    }
    sv._value = value;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbWFwcGVycyIsInJlcXVpcmUiLCJ2YWx1ZVNldHRlciIsInN2IiwidmFsdWUiLCJwcmV2aW91c0FuaW1hdGlvbiIsIl9hbmltYXRpb24iLCJjYW5jZWxsZWQiLCJvbkZyYW1lIiwidW5kZWZpbmVkIiwiYW5pbWF0aW9uIiwiX3ZhbHVlIiwiY3VycmVudCIsImlzSGlnaGVyT3JkZXIiLCJjYWxsYmFjayIsImluaXRpYWxpemVBbmltYXRpb24iLCJ0aW1lc3RhbXAiLCJvblN0YXJ0IiwiY3VycmVudFRpbWVzdGFtcCIsImdsb2JhbCIsIl9fZnJhbWVUaW1lc3RhbXAiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInN0ZXAiLCJmaW5pc2hlZCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSJdLCJzb3VyY2VzIjpbInZhbHVlU2V0dGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgQW5pbWF0aW9uT2JqZWN0LCBBbmltYXRhYmxlVmFsdWUgfSBmcm9tICcuL2NvbW1vblR5cGVzJztcbmltcG9ydCB0eXBlIHsgRGVzY3JpcHRvciB9IGZyb20gJy4vaG9vay9jb21tb25UeXBlcyc7XG5leHBvcnQgeyBzdG9wTWFwcGVyIH0gZnJvbSAnLi9tYXBwZXJzJztcblxuZXhwb3J0IGZ1bmN0aW9uIHZhbHVlU2V0dGVyKHN2OiBhbnksIHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgJ3dvcmtsZXQnO1xuICBjb25zdCBwcmV2aW91c0FuaW1hdGlvbiA9IHN2Ll9hbmltYXRpb247XG4gIGlmIChwcmV2aW91c0FuaW1hdGlvbikge1xuICAgIHByZXZpb3VzQW5pbWF0aW9uLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgc3YuX2FuaW1hdGlvbiA9IG51bGw7XG4gIH1cbiAgaWYgKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgICh2YWx1ZSAhPT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgKHZhbHVlIGFzIEFuaW1hdGlvbk9iamVjdCkub25GcmFtZSAhPT0gdW5kZWZpbmVkKVxuICApIHtcbiAgICBjb25zdCBhbmltYXRpb246IEFuaW1hdGlvbk9iamVjdCA9XG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyAodmFsdWUgYXMgKCkgPT4gQW5pbWF0aW9uT2JqZWN0KSgpXG4gICAgICAgIDogKHZhbHVlIGFzIEFuaW1hdGlvbk9iamVjdCk7XG4gICAgLy8gcHJldmVudCBzZXR0aW5nIGFnYWluIHRvIHRoZSBzYW1lIHZhbHVlXG4gICAgLy8gYW5kIHRyaWdnZXJpbmcgdGhlIG1hcHBlcnMgdGhhdCB0cmVhdCB0aGlzIHZhbHVlIGFzIGFuIGlucHV0XG4gICAgLy8gdGhpcyBoYXBwZW5zIHdoZW4gdGhlIGFuaW1hdGlvbidzIHRhcmdldCB2YWx1ZShzdG9yZWQgaW4gYW5pbWF0aW9uLmN1cnJlbnQgdW50aWwgYW5pbWF0aW9uLm9uU3RhcnQgaXMgY2FsbGVkKSBpcyBzZXQgdG8gdGhlIHNhbWUgdmFsdWUgYXMgYSBjdXJyZW50IG9uZSh0aGlzLl92YWx1ZSlcbiAgICAvLyBidWlsdCBpbiBhbmltYXRpb25zIHRoYXQgYXJlIG5vdCBoaWdoZXIgb3JkZXIod2l0aFRpbWluZywgd2l0aFNwcmluZykgaG9sZCB0YXJnZXQgdmFsdWUgaW4gLmN1cnJlbnRcbiAgICBpZiAoc3YuX3ZhbHVlID09PSBhbmltYXRpb24uY3VycmVudCAmJiAhYW5pbWF0aW9uLmlzSGlnaGVyT3JkZXIpIHtcbiAgICAgIGFuaW1hdGlvbi5jYWxsYmFjayAmJiBhbmltYXRpb24uY2FsbGJhY2sodHJ1ZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIGFuaW1hdGVkIHNldFxuICAgIGNvbnN0IGluaXRpYWxpemVBbmltYXRpb24gPSAodGltZXN0YW1wOiBudW1iZXIpID0+IHtcbiAgICAgIGFuaW1hdGlvbi5vblN0YXJ0KGFuaW1hdGlvbiwgc3YudmFsdWUsIHRpbWVzdGFtcCwgcHJldmlvdXNBbmltYXRpb24pO1xuICAgIH07XG4gICAgY29uc3QgY3VycmVudFRpbWVzdGFtcCA9IGdsb2JhbC5fX2ZyYW1lVGltZXN0YW1wIHx8IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgIGluaXRpYWxpemVBbmltYXRpb24oY3VycmVudFRpbWVzdGFtcCk7XG4gICAgY29uc3Qgc3RlcCA9ICh0aW1lc3RhbXA6IG51bWJlcikgPT4ge1xuICAgICAgaWYgKGFuaW1hdGlvbi5jYW5jZWxsZWQpIHtcbiAgICAgICAgYW5pbWF0aW9uLmNhbGxiYWNrICYmIGFuaW1hdGlvbi5jYWxsYmFjayhmYWxzZSAvKiBmaW5pc2hlZCAqLyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGZpbmlzaGVkID0gYW5pbWF0aW9uLm9uRnJhbWUoYW5pbWF0aW9uLCB0aW1lc3RhbXApO1xuICAgICAgYW5pbWF0aW9uLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIGFuaW1hdGlvbi50aW1lc3RhbXAgPSB0aW1lc3RhbXA7XG4gICAgICBzdi5fdmFsdWUgPSBhbmltYXRpb24uY3VycmVudDtcbiAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICBhbmltYXRpb24uY2FsbGJhY2sgJiYgYW5pbWF0aW9uLmNhbGxiYWNrKHRydWUgLyogZmluaXNoZWQgKi8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBzdi5fYW5pbWF0aW9uID0gYW5pbWF0aW9uO1xuXG4gICAgc3RlcChjdXJyZW50VGltZXN0YW1wKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBwcmV2ZW50IHNldHRpbmcgYWdhaW4gdG8gdGhlIHNhbWUgdmFsdWVcbiAgICAvLyBhbmQgdHJpZ2dlcmluZyB0aGUgbWFwcGVycyB0aGF0IHRyZWF0IHRoaXMgdmFsdWUgYXMgYW4gaW5wdXRcbiAgICBpZiAoc3YuX3ZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdi5fdmFsdWUgPSB2YWx1ZSBhcyBEZXNjcmlwdG9yIHwgQW5pbWF0YWJsZVZhbHVlO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFFQSxJQUFBQSxRQUFBLEdBQUFDLE9BQUE7QUFFTyxTQUFTQyxXQUFXQSxDQUFDQyxFQUFPLEVBQUVDLEtBQVUsRUFBUTtFQUNyRCxTQUFTOztFQUNULElBQU1DLGlCQUFpQixHQUFHRixFQUFFLENBQUNHLFVBQVU7RUFDdkMsSUFBSUQsaUJBQWlCLEVBQUU7SUFDckJBLGlCQUFpQixDQUFDRSxTQUFTLEdBQUcsSUFBSTtJQUNsQ0osRUFBRSxDQUFDRyxVQUFVLEdBQUcsSUFBSTtFQUN0QjtFQUNBLElBQ0UsT0FBT0YsS0FBSyxLQUFLLFVBQVUsSUFDMUJBLEtBQUssS0FBSyxJQUFJLElBQ2IsT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFDeEJBLEtBQUssQ0FBcUJJLE9BQU8sS0FBS0MsU0FBVSxFQUNuRDtJQUNBLElBQU1DLFNBQTBCLEdBQzlCLE9BQU9OLEtBQUssS0FBSyxVQUFVLEdBQ3RCQSxLQUFLLEVBQTRCLEdBQ2pDQSxLQUF5QjtJQUtoQyxJQUFJRCxFQUFFLENBQUNRLE1BQU0sS0FBS0QsU0FBUyxDQUFDRSxPQUFPLElBQUksQ0FBQ0YsU0FBUyxDQUFDRyxhQUFhLEVBQUU7TUFDL0RILFNBQVMsQ0FBQ0ksUUFBUSxJQUFJSixTQUFTLENBQUNJLFFBQVEsQ0FBQyxJQUFJLENBQUM7TUFDOUM7SUFDRjtJQUVBLElBQU1DLG1CQUFtQixHQUFJLFNBQXZCQSxtQkFBbUJBLENBQUlDLFNBQWlCLEVBQUs7TUFDakROLFNBQVMsQ0FBQ08sT0FBTyxDQUFDUCxTQUFTLEVBQUVQLEVBQUUsQ0FBQ0MsS0FBSyxFQUFFWSxTQUFTLEVBQUVYLGlCQUFpQixDQUFDO0lBQ3RFLENBQUM7SUFDRCxJQUFNYSxnQkFBZ0IsR0FBR0MsTUFBTSxDQUFDQyxnQkFBZ0IsSUFBSUMsV0FBVyxDQUFDQyxHQUFHLEVBQUU7SUFDckVQLG1CQUFtQixDQUFDRyxnQkFBZ0IsQ0FBQztJQUNyQyxJQUFNSyxJQUFJLEdBQUksU0FBUkEsSUFBSUEsQ0FBSVAsU0FBaUIsRUFBSztNQUNsQyxJQUFJTixTQUFTLENBQUNILFNBQVMsRUFBRTtRQUN2QkcsU0FBUyxDQUFDSSxRQUFRLElBQUlKLFNBQVMsQ0FBQ0ksUUFBUSxDQUFDLEtBQU0sQ0FBZTtRQUM5RDtNQUNGO01BQ0EsSUFBTVUsUUFBUSxHQUFHZCxTQUFTLENBQUNGLE9BQU8sQ0FBQ0UsU0FBUyxFQUFFTSxTQUFTLENBQUM7TUFDeEROLFNBQVMsQ0FBQ2MsUUFBUSxHQUFHLElBQUk7TUFDekJkLFNBQVMsQ0FBQ00sU0FBUyxHQUFHQSxTQUFTO01BQy9CYixFQUFFLENBQUNRLE1BQU0sR0FBR0QsU0FBUyxDQUFDRSxPQUFPO01BQzdCLElBQUlZLFFBQVEsRUFBRTtRQUNaZCxTQUFTLENBQUNJLFFBQVEsSUFBSUosU0FBUyxDQUFDSSxRQUFRLENBQUMsSUFBSyxDQUFlO01BQy9ELENBQUMsTUFBTTtRQUNMVyxxQkFBcUIsQ0FBQ0YsSUFBSSxDQUFDO01BQzdCO0lBQ0YsQ0FBQztJQUVEcEIsRUFBRSxDQUFDRyxVQUFVLEdBQUdJLFNBQVM7SUFFekJhLElBQUksQ0FBQ0wsZ0JBQWdCLENBQUM7RUFDeEIsQ0FBQyxNQUFNO0lBR0wsSUFBSWYsRUFBRSxDQUFDUSxNQUFNLEtBQUtQLEtBQUssRUFBRTtNQUN2QjtJQUNGO0lBQ0FELEVBQUUsQ0FBQ1EsTUFBTSxHQUFHUCxLQUFxQztFQUNuRDtBQUNGIn0=