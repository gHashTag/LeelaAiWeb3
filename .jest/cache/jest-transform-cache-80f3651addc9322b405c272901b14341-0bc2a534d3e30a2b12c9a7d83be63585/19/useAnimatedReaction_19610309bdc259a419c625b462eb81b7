aec3f559eb4684f4eb87783592f5acb3
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAnimatedReaction = useAnimatedReaction;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = require("react");
var _core = require("../core");
var _useSharedValue = require("./useSharedValue");
var _PlatformChecker = require("../PlatformChecker");
function useAnimatedReaction(prepare, react, dependencies) {
  var _prepare$_closure;
  var previous = (0, _useSharedValue.useSharedValue)(null, true);
  var inputs = Object.values((_prepare$_closure = prepare._closure) != null ? _prepare$_closure : {});
  if ((0, _PlatformChecker.shouldBeUseWeb)()) {
    var _dependencies;
    if (!inputs.length && (_dependencies = dependencies) !== null && _dependencies !== void 0 && _dependencies.length) {
      inputs = dependencies;
    }
  }
  if (dependencies === undefined) {
    var _prepare$_closure2, _react$_closure;
    dependencies = [].concat((0, _toConsumableArray2.default)(Object.values((_prepare$_closure2 = prepare._closure) != null ? _prepare$_closure2 : {})), (0, _toConsumableArray2.default)(Object.values((_react$_closure = react._closure) != null ? _react$_closure : {})), [prepare.__workletHash, react.__workletHash]);
  } else {
    dependencies.push(prepare.__workletHash, react.__workletHash);
  }
  (0, _react.useEffect)(function () {
    var fun = function fun() {
      'worklet';

      var input = prepare();
      react(input, previous.value);
      previous.value = input;
    };
    var mapperId = (0, _core.startMapper)(fun, inputs, []);
    return function () {
      (0, _core.stopMapper)(mapperId);
    };
  }, dependencies);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVhY3QiLCJyZXF1aXJlIiwiX2NvcmUiLCJfdXNlU2hhcmVkVmFsdWUiLCJfUGxhdGZvcm1DaGVja2VyIiwidXNlQW5pbWF0ZWRSZWFjdGlvbiIsInByZXBhcmUiLCJyZWFjdCIsImRlcGVuZGVuY2llcyIsIl9wcmVwYXJlJF9jbG9zdXJlIiwicHJldmlvdXMiLCJ1c2VTaGFyZWRWYWx1ZSIsImlucHV0cyIsIk9iamVjdCIsInZhbHVlcyIsIl9jbG9zdXJlIiwic2hvdWxkQmVVc2VXZWIiLCJfZGVwZW5kZW5jaWVzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiX3ByZXBhcmUkX2Nsb3N1cmUyIiwiX3JlYWN0JF9jbG9zdXJlIiwiY29uY2F0IiwiX3RvQ29uc3VtYWJsZUFycmF5MiIsImRlZmF1bHQiLCJfX3dvcmtsZXRIYXNoIiwicHVzaCIsInVzZUVmZmVjdCIsImZ1biIsImlucHV0IiwidmFsdWUiLCJtYXBwZXJJZCIsInN0YXJ0TWFwcGVyIiwic3RvcE1hcHBlciJdLCJzb3VyY2VzIjpbInVzZUFuaW1hdGVkUmVhY3Rpb24udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHR5cGUgeyBCYXNpY1dvcmtsZXRGdW5jdGlvbiwgV29ya2xldEZ1bmN0aW9uIH0gZnJvbSAnLi4vY29tbW9uVHlwZXMnO1xuaW1wb3J0IHsgc3RhcnRNYXBwZXIsIHN0b3BNYXBwZXIgfSBmcm9tICcuLi9jb3JlJztcbmltcG9ydCB0eXBlIHsgRGVwZW5kZW5jeUxpc3QgfSBmcm9tICcuL2NvbW1vblR5cGVzJztcbmltcG9ydCB7IHVzZVNoYXJlZFZhbHVlIH0gZnJvbSAnLi91c2VTaGFyZWRWYWx1ZSc7XG5pbXBvcnQgeyBzaG91bGRCZVVzZVdlYiB9IGZyb20gJy4uL1BsYXRmb3JtQ2hlY2tlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQW5pbWF0ZWRSZWFjdGlvbldvcmtsZXRGdW5jdGlvbjxUPiBleHRlbmRzIFdvcmtsZXRGdW5jdGlvbiB7XG4gIChwcmVwYXJlZDogVCwgcHJldmlvdXM6IFQgfCBudWxsKTogdm9pZDtcbn1cbi8qKlxuICogQHBhcmFtIHByZXBhcmUgLSB3b3JrbGV0IHVzZWQgZm9yIGRhdGEgcHJlcGFyYXRpb24gZm9yIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG4gKiBAcGFyYW0gcmVhY3QgLSB3b3JrbGV0IHdoaWNoIHRha2VzIGRhdGEgcHJlcGFyZWQgYnkgdGhlIG9uZSBpbiB0aGUgZmlyc3QgcGFyYW1ldGVyIGFuZCBwZXJmb3JtcyBjZXJ0YWluIGFjdGlvbnNcbiAqIHRoZSBmaXJzdCB3b3JrbGV0IGRlZmluZXMgdGhlIGlucHV0cywgaW4gb3RoZXIgd29yZHMgb24gd2hpY2ggc2hhcmVkIHZhbHVlcyBjaGFuZ2Ugd2lsbCBpdCBiZSBjYWxsZWQuXG4gKiB0aGUgc2Vjb25kIG9uZSBjYW4gbW9kaWZ5IGFueSBzaGFyZWQgdmFsdWVzIGJ1dCB0aG9zZSB3aGljaCBhcmUgbWVudGlvbmVkIGluIHRoZSBmaXJzdCB3b3JrbGV0LiBCZXdhcmUgb2YgdGhhdCwgYmVjYXVzZSB0aGlzIG1heSByZXN1bHQgaW4gZW5kbGVzcyBsb29wIGFuZCBoaWdoIGNwdSB1c2FnZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFuaW1hdGVkUmVhY3Rpb248VD4oXG4gIHByZXBhcmU6IEJhc2ljV29ya2xldEZ1bmN0aW9uPFQ+LFxuICByZWFjdDogQW5pbWF0ZWRSZWFjdGlvbldvcmtsZXRGdW5jdGlvbjxUPixcbiAgZGVwZW5kZW5jaWVzPzogRGVwZW5kZW5jeUxpc3Rcbik6IHZvaWQge1xuICBjb25zdCBwcmV2aW91cyA9IHVzZVNoYXJlZFZhbHVlPFQgfCBudWxsPihudWxsLCB0cnVlKTtcblxuICBsZXQgaW5wdXRzID0gT2JqZWN0LnZhbHVlcyhwcmVwYXJlLl9jbG9zdXJlID8/IHt9KTtcblxuICBpZiAoc2hvdWxkQmVVc2VXZWIoKSkge1xuICAgIGlmICghaW5wdXRzLmxlbmd0aCAmJiBkZXBlbmRlbmNpZXM/Lmxlbmd0aCkge1xuICAgICAgLy8gbGV0IHdlYiB3b3JrIHdpdGhvdXQgYSBCYWJlbC9TV0MgcGx1Z2luXG4gICAgICBpbnB1dHMgPSBkZXBlbmRlbmNpZXM7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRlcGVuZGVuY2llcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZGVwZW5kZW5jaWVzID0gW1xuICAgICAgLi4uT2JqZWN0LnZhbHVlcyhwcmVwYXJlLl9jbG9zdXJlID8/IHt9KSxcbiAgICAgIC4uLk9iamVjdC52YWx1ZXMocmVhY3QuX2Nsb3N1cmUgPz8ge30pLFxuICAgICAgcHJlcGFyZS5fX3dvcmtsZXRIYXNoLFxuICAgICAgcmVhY3QuX193b3JrbGV0SGFzaCxcbiAgICBdO1xuICB9IGVsc2Uge1xuICAgIGRlcGVuZGVuY2llcy5wdXNoKHByZXBhcmUuX193b3JrbGV0SGFzaCwgcmVhY3QuX193b3JrbGV0SGFzaCk7XG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNvbnN0IGZ1biA9ICgpID0+IHtcbiAgICAgICd3b3JrbGV0JztcbiAgICAgIGNvbnN0IGlucHV0ID0gcHJlcGFyZSgpO1xuICAgICAgcmVhY3QoaW5wdXQsIHByZXZpb3VzLnZhbHVlKTtcbiAgICAgIHByZXZpb3VzLnZhbHVlID0gaW5wdXQ7XG4gICAgfTtcbiAgICBjb25zdCBtYXBwZXJJZCA9IHN0YXJ0TWFwcGVyKGZ1biwgaW5wdXRzLCBbXSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHN0b3BNYXBwZXIobWFwcGVySWQpO1xuICAgIH07XG4gIH0sIGRlcGVuZGVuY2llcyk7XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQUFBLE1BQUEsR0FBQUMsT0FBQTtBQUVBLElBQUFDLEtBQUEsR0FBQUQsT0FBQTtBQUVBLElBQUFFLGVBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGdCQUFBLEdBQUFILE9BQUE7QUFXTyxTQUFTSSxtQkFBbUJBLENBQ2pDQyxPQUFnQyxFQUNoQ0MsS0FBeUMsRUFDekNDLFlBQTZCLEVBQ3ZCO0VBQUEsSUFBQUMsaUJBQUE7RUFDTixJQUFNQyxRQUFRLEdBQUcsSUFBQUMsOEJBQWMsRUFBVyxJQUFJLEVBQUUsSUFBSSxDQUFDO0VBRXJELElBQUlDLE1BQU0sR0FBR0MsTUFBTSxDQUFDQyxNQUFNLEVBQUFMLGlCQUFBLEdBQUNILE9BQU8sQ0FBQ1MsUUFBUSxZQUFBTixpQkFBQSxHQUFJLENBQUMsQ0FBQyxDQUFDO0VBRWxELElBQUksSUFBQU8sK0JBQWMsR0FBRSxFQUFFO0lBQUEsSUFBQUMsYUFBQTtJQUNwQixJQUFJLENBQUNMLE1BQU0sQ0FBQ00sTUFBTSxLQUFBRCxhQUFBLEdBQUlULFlBQVksY0FBQVMsYUFBQSxlQUFaQSxhQUFBLENBQWNDLE1BQU0sRUFBRTtNQUUxQ04sTUFBTSxHQUFHSixZQUFZO0lBQ3ZCO0VBQ0Y7RUFFQSxJQUFJQSxZQUFZLEtBQUtXLFNBQVMsRUFBRTtJQUFBLElBQUFDLGtCQUFBLEVBQUFDLGVBQUE7SUFDOUJiLFlBQVksTUFBQWMsTUFBQSxLQUFBQyxtQkFBQSxDQUFBQyxPQUFBLEVBQ1BYLE1BQU0sQ0FBQ0MsTUFBTSxFQUFBTSxrQkFBQSxHQUFDZCxPQUFPLENBQUNTLFFBQVEsWUFBQUssa0JBQUEsR0FBSSxDQUFDLENBQUMsQ0FBQyxPQUFBRyxtQkFBQSxDQUFBQyxPQUFBLEVBQ3JDWCxNQUFNLENBQUNDLE1BQU0sRUFBQU8sZUFBQSxHQUFDZCxLQUFLLENBQUNRLFFBQVEsWUFBQU0sZUFBQSxHQUFJLENBQUMsQ0FBQyxDQUFDLElBQ3RDZixPQUFPLENBQUNtQixhQUFhLEVBQ3JCbEIsS0FBSyxDQUFDa0IsYUFBYSxFQUNwQjtFQUNILENBQUMsTUFBTTtJQUNMakIsWUFBWSxDQUFDa0IsSUFBSSxDQUFDcEIsT0FBTyxDQUFDbUIsYUFBYSxFQUFFbEIsS0FBSyxDQUFDa0IsYUFBYSxDQUFDO0VBQy9EO0VBRUEsSUFBQUUsZ0JBQVMsRUFBQyxZQUFNO0lBQ2QsSUFBTUMsR0FBRyxHQUFHLFNBQU5BLEdBQUdBLENBQUEsRUFBUztNQUNoQixTQUFTOztNQUNULElBQU1DLEtBQUssR0FBR3ZCLE9BQU8sRUFBRTtNQUN2QkMsS0FBSyxDQUFDc0IsS0FBSyxFQUFFbkIsUUFBUSxDQUFDb0IsS0FBSyxDQUFDO01BQzVCcEIsUUFBUSxDQUFDb0IsS0FBSyxHQUFHRCxLQUFLO0lBQ3hCLENBQUM7SUFDRCxJQUFNRSxRQUFRLEdBQUcsSUFBQUMsaUJBQVcsRUFBQ0osR0FBRyxFQUFFaEIsTUFBTSxFQUFFLEVBQUUsQ0FBQztJQUM3QyxPQUFPLFlBQU07TUFDWCxJQUFBcUIsZ0JBQVUsRUFBQ0YsUUFBUSxDQUFDO0lBQ3RCLENBQUM7RUFDSCxDQUFDLEVBQUV2QixZQUFZLENBQUM7QUFDbEIifQ==