3e441333804f13c9bb5944dc9f72e80a
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RotateOutUpRight = exports.RotateOutUpLeft = exports.RotateOutDownRight = exports.RotateOutDownLeft = exports.RotateInUpRight = exports.RotateInUpLeft = exports.RotateInDownRight = exports.RotateInDownLeft = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _animationBuilder = require("../animationBuilder");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var RotateInDownLeft = function (_ComplexAnimationBuil) {
  (0, _inherits2.default)(RotateInDownLeft, _ComplexAnimationBuil);
  var _super = _createSuper(RotateInDownLeft);
  function RotateInDownLeft() {
    var _this;
    (0, _classCallCheck2.default)(this, RotateInDownLeft);
    _this = _super.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "build", function () {
      var delayFunction = _this.getDelayFunction();
      var _this$getAnimationAnd = _this.getAnimationAndConfig(),
        _this$getAnimationAnd2 = (0, _slicedToArray2.default)(_this$getAnimationAnd, 2),
        animation = _this$getAnimationAnd2[0],
        config = _this$getAnimationAnd2[1];
      var delay = _this.getDelay();
      var callback = _this.callbackV;
      var initialValues = _this.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, animation(1, config)),
            transform: [{
              rotate: delayFunction(delay, animation('0deg', config))
            }, {
              translateX: delayFunction(delay, animation(0, config))
            }, {
              translateY: delayFunction(delay, animation(0, config))
            }]
          },
          initialValues: Object.assign({
            opacity: 0,
            transform: [{
              rotate: '-90deg'
            }, {
              translateX: values.targetWidth / 2 - values.targetHeight / 2
            }, {
              translateY: -(values.targetWidth / 2 - values.targetHeight / 2)
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this;
  }
  (0, _createClass2.default)(RotateInDownLeft, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new RotateInDownLeft();
    }
  }]);
  return RotateInDownLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.RotateInDownLeft = RotateInDownLeft;
var RotateInDownRight = function (_ComplexAnimationBuil2) {
  (0, _inherits2.default)(RotateInDownRight, _ComplexAnimationBuil2);
  var _super2 = _createSuper(RotateInDownRight);
  function RotateInDownRight() {
    var _this2;
    (0, _classCallCheck2.default)(this, RotateInDownRight);
    _this2 = _super2.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this2), "build", function () {
      var delayFunction = _this2.getDelayFunction();
      var _this2$getAnimationAn = _this2.getAnimationAndConfig(),
        _this2$getAnimationAn2 = (0, _slicedToArray2.default)(_this2$getAnimationAn, 2),
        animation = _this2$getAnimationAn2[0],
        config = _this2$getAnimationAn2[1];
      var delay = _this2.getDelay();
      var callback = _this2.callbackV;
      var initialValues = _this2.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, animation(1, config)),
            transform: [{
              rotate: delayFunction(delay, animation('0deg', config))
            }, {
              translateX: delayFunction(delay, animation(0, config))
            }, {
              translateY: delayFunction(delay, animation(0, config))
            }]
          },
          initialValues: Object.assign({
            opacity: 0,
            transform: [{
              rotate: '90deg'
            }, {
              translateX: -(values.targetWidth / 2 - values.targetHeight / 2)
            }, {
              translateY: -(values.targetWidth / 2 - values.targetHeight / 2)
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this2;
  }
  (0, _createClass2.default)(RotateInDownRight, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new RotateInDownRight();
    }
  }]);
  return RotateInDownRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.RotateInDownRight = RotateInDownRight;
var RotateInUpLeft = function (_ComplexAnimationBuil3) {
  (0, _inherits2.default)(RotateInUpLeft, _ComplexAnimationBuil3);
  var _super3 = _createSuper(RotateInUpLeft);
  function RotateInUpLeft() {
    var _this3;
    (0, _classCallCheck2.default)(this, RotateInUpLeft);
    _this3 = _super3.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this3), "build", function () {
      var delayFunction = _this3.getDelayFunction();
      var _this3$getAnimationAn = _this3.getAnimationAndConfig(),
        _this3$getAnimationAn2 = (0, _slicedToArray2.default)(_this3$getAnimationAn, 2),
        animation = _this3$getAnimationAn2[0],
        config = _this3$getAnimationAn2[1];
      var delay = _this3.getDelay();
      var callback = _this3.callbackV;
      var initialValues = _this3.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, animation(1, config)),
            transform: [{
              rotate: delayFunction(delay, animation('0deg', config))
            }, {
              translateX: delayFunction(delay, animation(0, config))
            }, {
              translateY: delayFunction(delay, animation(0, config))
            }]
          },
          initialValues: Object.assign({
            opacity: 0,
            transform: [{
              rotate: '90deg'
            }, {
              translateX: values.targetWidth / 2 - values.targetHeight / 2
            }, {
              translateY: values.targetWidth / 2 - values.targetHeight / 2
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this3;
  }
  (0, _createClass2.default)(RotateInUpLeft, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new RotateInUpLeft();
    }
  }]);
  return RotateInUpLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.RotateInUpLeft = RotateInUpLeft;
var RotateInUpRight = function (_ComplexAnimationBuil4) {
  (0, _inherits2.default)(RotateInUpRight, _ComplexAnimationBuil4);
  var _super4 = _createSuper(RotateInUpRight);
  function RotateInUpRight() {
    var _this4;
    (0, _classCallCheck2.default)(this, RotateInUpRight);
    _this4 = _super4.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this4), "build", function () {
      var delayFunction = _this4.getDelayFunction();
      var _this4$getAnimationAn = _this4.getAnimationAndConfig(),
        _this4$getAnimationAn2 = (0, _slicedToArray2.default)(_this4$getAnimationAn, 2),
        animation = _this4$getAnimationAn2[0],
        config = _this4$getAnimationAn2[1];
      var delay = _this4.getDelay();
      var callback = _this4.callbackV;
      var initialValues = _this4.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, animation(1, config)),
            transform: [{
              rotate: delayFunction(delay, animation('0deg', config))
            }, {
              translateX: delayFunction(delay, animation(0, config))
            }, {
              translateY: delayFunction(delay, animation(0, config))
            }]
          },
          initialValues: Object.assign({
            opacity: 0,
            transform: [{
              rotate: '-90deg'
            }, {
              translateX: -(values.targetWidth / 2 - values.targetHeight / 2)
            }, {
              translateY: values.targetWidth / 2 - values.targetHeight / 2
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this4;
  }
  (0, _createClass2.default)(RotateInUpRight, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new RotateInUpRight();
    }
  }]);
  return RotateInUpRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.RotateInUpRight = RotateInUpRight;
var RotateOutDownLeft = function (_ComplexAnimationBuil5) {
  (0, _inherits2.default)(RotateOutDownLeft, _ComplexAnimationBuil5);
  var _super5 = _createSuper(RotateOutDownLeft);
  function RotateOutDownLeft() {
    var _this5;
    (0, _classCallCheck2.default)(this, RotateOutDownLeft);
    _this5 = _super5.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this5), "build", function () {
      var delayFunction = _this5.getDelayFunction();
      var _this5$getAnimationAn = _this5.getAnimationAndConfig(),
        _this5$getAnimationAn2 = (0, _slicedToArray2.default)(_this5$getAnimationAn, 2),
        animation = _this5$getAnimationAn2[0],
        config = _this5$getAnimationAn2[1];
      var delay = _this5.getDelay();
      var callback = _this5.callbackV;
      var initialValues = _this5.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, animation(0, config)),
            transform: [{
              rotate: delayFunction(delay, animation('90deg', config))
            }, {
              translateX: delayFunction(delay, animation(values.currentWidth / 2 - values.currentHeight / 2, config))
            }, {
              translateY: delayFunction(delay, animation(values.currentWidth / 2 - values.currentHeight / 2, config))
            }]
          },
          initialValues: Object.assign({
            opacity: 1,
            transform: [{
              rotate: '0deg'
            }, {
              translateX: 0
            }, {
              translateY: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this5;
  }
  (0, _createClass2.default)(RotateOutDownLeft, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new RotateOutDownLeft();
    }
  }]);
  return RotateOutDownLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.RotateOutDownLeft = RotateOutDownLeft;
var RotateOutDownRight = function (_ComplexAnimationBuil6) {
  (0, _inherits2.default)(RotateOutDownRight, _ComplexAnimationBuil6);
  var _super6 = _createSuper(RotateOutDownRight);
  function RotateOutDownRight() {
    var _this6;
    (0, _classCallCheck2.default)(this, RotateOutDownRight);
    _this6 = _super6.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this6), "build", function () {
      var delayFunction = _this6.getDelayFunction();
      var _this6$getAnimationAn = _this6.getAnimationAndConfig(),
        _this6$getAnimationAn2 = (0, _slicedToArray2.default)(_this6$getAnimationAn, 2),
        animation = _this6$getAnimationAn2[0],
        config = _this6$getAnimationAn2[1];
      var delay = _this6.getDelay();
      var callback = _this6.callbackV;
      var initialValues = _this6.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, animation(0, config)),
            transform: [{
              rotate: delayFunction(delay, animation('-90deg', config))
            }, {
              translateX: delayFunction(delay, animation(-(values.currentWidth / 2 - values.currentHeight / 2), config))
            }, {
              translateY: delayFunction(delay, animation(values.currentWidth / 2 - values.currentHeight / 2, config))
            }]
          },
          initialValues: Object.assign({
            opacity: 1,
            transform: [{
              rotate: '0deg'
            }, {
              translateX: 0
            }, {
              translateY: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this6;
  }
  (0, _createClass2.default)(RotateOutDownRight, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new RotateOutDownRight();
    }
  }]);
  return RotateOutDownRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.RotateOutDownRight = RotateOutDownRight;
var RotateOutUpLeft = function (_ComplexAnimationBuil7) {
  (0, _inherits2.default)(RotateOutUpLeft, _ComplexAnimationBuil7);
  var _super7 = _createSuper(RotateOutUpLeft);
  function RotateOutUpLeft() {
    var _this7;
    (0, _classCallCheck2.default)(this, RotateOutUpLeft);
    _this7 = _super7.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this7), "build", function () {
      var delayFunction = _this7.getDelayFunction();
      var _this7$getAnimationAn = _this7.getAnimationAndConfig(),
        _this7$getAnimationAn2 = (0, _slicedToArray2.default)(_this7$getAnimationAn, 2),
        animation = _this7$getAnimationAn2[0],
        config = _this7$getAnimationAn2[1];
      var delay = _this7.getDelay();
      var callback = _this7.callbackV;
      var initialValues = _this7.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, animation(0, config)),
            transform: [{
              rotate: delayFunction(delay, animation('-90deg', config))
            }, {
              translateX: delayFunction(delay, animation(values.currentWidth / 2 - values.currentHeight / 2, config))
            }, {
              translateY: delayFunction(delay, animation(-(values.currentWidth / 2 - values.currentHeight / 2), config))
            }]
          },
          initialValues: Object.assign({
            opacity: 1,
            transform: [{
              rotate: '0deg'
            }, {
              translateX: 0
            }, {
              translateY: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this7;
  }
  (0, _createClass2.default)(RotateOutUpLeft, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new RotateOutUpLeft();
    }
  }]);
  return RotateOutUpLeft;
}(_animationBuilder.ComplexAnimationBuilder);
exports.RotateOutUpLeft = RotateOutUpLeft;
var RotateOutUpRight = function (_ComplexAnimationBuil8) {
  (0, _inherits2.default)(RotateOutUpRight, _ComplexAnimationBuil8);
  var _super8 = _createSuper(RotateOutUpRight);
  function RotateOutUpRight() {
    var _this8;
    (0, _classCallCheck2.default)(this, RotateOutUpRight);
    _this8 = _super8.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this8), "build", function () {
      var delayFunction = _this8.getDelayFunction();
      var _this8$getAnimationAn = _this8.getAnimationAndConfig(),
        _this8$getAnimationAn2 = (0, _slicedToArray2.default)(_this8$getAnimationAn, 2),
        animation = _this8$getAnimationAn2[0],
        config = _this8$getAnimationAn2[1];
      var delay = _this8.getDelay();
      var callback = _this8.callbackV;
      var initialValues = _this8.initialValues;
      return function (values) {
        'worklet';

        return {
          animations: {
            opacity: delayFunction(delay, animation(0, config)),
            transform: [{
              rotate: delayFunction(delay, animation('90deg', config))
            }, {
              translateX: delayFunction(delay, animation(-(values.currentWidth / 2 - values.currentHeight / 2), config))
            }, {
              translateY: delayFunction(delay, animation(-(values.currentWidth / 2 - values.currentHeight / 2), config))
            }]
          },
          initialValues: Object.assign({
            opacity: 1,
            transform: [{
              rotate: '0deg'
            }, {
              translateX: 0
            }, {
              translateY: 0
            }]
          }, initialValues),
          callback: callback
        };
      };
    });
    return _this8;
  }
  (0, _createClass2.default)(RotateOutUpRight, null, [{
    key: "createInstance",
    value: function createInstance() {
      return new RotateOutUpRight();
    }
  }]);
  return RotateOutUpRight;
}(_animationBuilder.ComplexAnimationBuilder);
exports.RotateOutUpRight = RotateOutUpRight;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,