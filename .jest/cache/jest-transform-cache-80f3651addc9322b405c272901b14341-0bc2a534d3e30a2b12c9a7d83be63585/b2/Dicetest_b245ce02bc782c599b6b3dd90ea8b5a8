a4cd2d822aca5242020aade0baf18a60
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('./Animated', function () {
  return Object.assign({}, jest.requireActual('./Animated'), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
describe('Dice Component', function () {
  var mockRandom = jest.fn();
  var mockUpdateStep = jest.fn();
  var mockProps = {
    count: 1,
    players: 2,
    disabled: false,
    canGo: true,
    isReported: false,
    updateStep: mockUpdateStep,
    random: mockRandom
  };
  beforeEach(function () {
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('renders correctly with the provided props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('dice-component')).toBeDefined();
  });
  it('calls the random function and updateStep on press when not disabled', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref2.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.random).toHaveBeenCalledTimes(1);
    expect(mockProps.updateStep).toHaveBeenCalledTimes(1);
  });
  it('calls the random function and updateStep on press when not disabled', function () {
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref3.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.random).toHaveBeenCalledTimes(1);
    expect(mockProps.updateStep).toHaveBeenCalledTimes(1);
  });
  it('does not call the random function and updateStep on press when disabled', function () {
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps, {
        disabled: true
      }))),
      getByTestId = _ref4.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.random).not.toHaveBeenCalled();
    expect(mockProps.updateStep).not.toHaveBeenCalled();
  });
  it('does not call the random function and updateStep on press when canGo is false', function () {
    var _ref5 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps, {
        canGo: false
      }))),
      getByTestId = _ref5.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.random).not.toHaveBeenCalled();
    expect(mockProps.updateStep).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,