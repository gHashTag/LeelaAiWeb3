e6905b20bedc5c68e85e7687f04b8416
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
var react_1 = __importDefault(require("react"));
describe('Text Component', function () {
  it('renders correctly with default props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title"
      })),
      getByText = _ref.getByText;
    expect(getByText('Test Title')).toBeTruthy();
  });
  it('applies the correct style based on the "h" prop', function () {
    var styles = ['h0', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7', 'h8', 'h9', 'h10', 'h11', 'h12'];
    styles.forEach(function (style) {
      var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
          title: "Test Title",
          h: style
        })),
        getByTestId = _ref2.getByTestId;
      var receivedStyle = getByTestId('text-component').props.style;
      expect(receivedStyle).toEqual(expect.objectContaining(_1.textStyles[style]));
    });
  });
  it('applies the oneColor prop correctly', function () {
    var customTextStyle = {
      fontWeight: 'bold',
      fontStyle: 'italic'
    };
    var oneColor = 'blue';
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title",
        oneColor: oneColor,
        textStyle: customTextStyle
      })),
      getByTestId = _ref3.getByTestId;
    var textComponent = getByTestId('text-component');
    console.log('Received Style:', textComponent.props.style);
    var expectedStyle = [{
      color: 'blue'
    }, customTextStyle];
    expect(textComponent.props.style).toEqual(expectedStyle);
  });
  it('applies the textStyle prop correctly', function () {
    var customTextStyle = {
      fontWeight: 'bold',
      fontStyle: 'italic'
    };
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title",
        textStyle: customTextStyle
      })),
      getByTestId = _ref4.getByTestId;
    var textComponent = getByTestId('text-component');
    console.log('Received Style:', textComponent.props.style);
    var expectedStyle = [Object.assign({}, customTextStyle, {
      color: expect.any(String)
    })];
    expect(textComponent.props.style).toEqual(expectedStyle);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF9uYXRpdmVfMSIsInJlcXVpcmUiLCJfMSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJkZXNjcmliZSIsIml0IiwiX3JlZiIsInJlbmRlciIsIl9qc3hSdW50aW1lIiwianN4IiwiVGV4dCIsInRpdGxlIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsInN0eWxlcyIsImZvckVhY2giLCJzdHlsZSIsIl9yZWYyIiwiaCIsImdldEJ5VGVzdElkIiwicmVjZWl2ZWRTdHlsZSIsInByb3BzIiwidG9FcXVhbCIsIm9iamVjdENvbnRhaW5pbmciLCJ0ZXh0U3R5bGVzIiwiY3VzdG9tVGV4dFN0eWxlIiwiZm9udFdlaWdodCIsImZvbnRTdHlsZSIsIm9uZUNvbG9yIiwiX3JlZjMiLCJ0ZXh0U3R5bGUiLCJ0ZXh0Q29tcG9uZW50IiwiY29uc29sZSIsImxvZyIsImV4cGVjdGVkU3R5bGUiLCJjb2xvciIsIl9yZWY0IiwiT2JqZWN0IiwiYXNzaWduIiwiYW55IiwiU3RyaW5nIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9UZXh0L1RleHQudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtyZW5kZXJ9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHtUZXh0LCBoVCwgdGV4dFN0eWxlc30gZnJvbSAnLi8nIC8vIFJlcGxhY2Ugd2l0aCB5b3VyIGFjdHVhbCBmaWxlIHBhdGhcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7VGV4dFN0eWxlfSBmcm9tICdyZWFjdC1uYXRpdmUnXG5cbmRlc2NyaWJlKCdUZXh0IENvbXBvbmVudCcsICgpID0+IHtcbiAgaXQoJ3JlbmRlcnMgY29ycmVjdGx5IHdpdGggZGVmYXVsdCBwcm9wcycsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXh0fSA9IHJlbmRlcig8VGV4dCB0aXRsZT1cIlRlc3QgVGl0bGVcIiAvPilcbiAgICBleHBlY3QoZ2V0QnlUZXh0KCdUZXN0IFRpdGxlJykpLnRvQmVUcnV0aHkoKVxuICB9KVxuXG4gIGl0KCdhcHBsaWVzIHRoZSBjb3JyZWN0IHN0eWxlIGJhc2VkIG9uIHRoZSBcImhcIiBwcm9wJywgKCkgPT4ge1xuICAgIGNvbnN0IHN0eWxlczogaFRbXSA9IFtcbiAgICAgICdoMCcsXG4gICAgICAnaDEnLFxuICAgICAgJ2gyJyxcbiAgICAgICdoMycsXG4gICAgICAnaDQnLFxuICAgICAgJ2g1JyxcbiAgICAgICdoNicsXG4gICAgICAnaDcnLFxuICAgICAgJ2g4JyxcbiAgICAgICdoOScsXG4gICAgICAnaDEwJyxcbiAgICAgICdoMTEnLFxuICAgICAgJ2gxMicsXG4gICAgXVxuICAgIHN0eWxlcy5mb3JFYWNoKHN0eWxlID0+IHtcbiAgICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPFRleHQgdGl0bGU9XCJUZXN0IFRpdGxlXCIgaD17c3R5bGV9IC8+KVxuICAgICAgY29uc3QgcmVjZWl2ZWRTdHlsZSA9IGdldEJ5VGVzdElkKCd0ZXh0LWNvbXBvbmVudCcpLnByb3BzLnN0eWxlXG4gICAgICBleHBlY3QocmVjZWl2ZWRTdHlsZSkudG9FcXVhbChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh0ZXh0U3R5bGVzW3N0eWxlXSkpXG4gICAgfSlcbiAgfSlcblxuICBpdCgnYXBwbGllcyB0aGUgb25lQ29sb3IgcHJvcCBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3QgY3VzdG9tVGV4dFN0eWxlOiBUZXh0U3R5bGUgPSB7Zm9udFdlaWdodDogJ2JvbGQnLCBmb250U3R5bGU6ICdpdGFsaWMnfVxuICAgIGNvbnN0IG9uZUNvbG9yID0gJ2JsdWUnXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcihcbiAgICAgIDxUZXh0XG4gICAgICAgIHRpdGxlPVwiVGVzdCBUaXRsZVwiXG4gICAgICAgIG9uZUNvbG9yPXtvbmVDb2xvcn1cbiAgICAgICAgdGV4dFN0eWxlPXtjdXN0b21UZXh0U3R5bGV9XG4gICAgICAvPixcbiAgICApXG4gICAgY29uc3QgdGV4dENvbXBvbmVudCA9IGdldEJ5VGVzdElkKCd0ZXh0LWNvbXBvbmVudCcpXG4gICAgY29uc29sZS5sb2coJ1JlY2VpdmVkIFN0eWxlOicsIHRleHRDb21wb25lbnQucHJvcHMuc3R5bGUpXG4gICAgY29uc3QgZXhwZWN0ZWRTdHlsZSA9IFt7Y29sb3I6ICdibHVlJ30sIGN1c3RvbVRleHRTdHlsZV1cbiAgICBleHBlY3QodGV4dENvbXBvbmVudC5wcm9wcy5zdHlsZSkudG9FcXVhbChleHBlY3RlZFN0eWxlKVxuICB9KVxuXG4gIGl0KCdhcHBsaWVzIHRoZSB0ZXh0U3R5bGUgcHJvcCBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3QgY3VzdG9tVGV4dFN0eWxlOiBUZXh0U3R5bGUgPSB7Zm9udFdlaWdodDogJ2JvbGQnLCBmb250U3R5bGU6ICdpdGFsaWMnfVxuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoXG4gICAgICA8VGV4dCB0aXRsZT1cIlRlc3QgVGl0bGVcIiB0ZXh0U3R5bGU9e2N1c3RvbVRleHRTdHlsZX0gLz4sXG4gICAgKVxuICAgIGNvbnN0IHRleHRDb21wb25lbnQgPSBnZXRCeVRlc3RJZCgndGV4dC1jb21wb25lbnQnKVxuICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCBTdHlsZTonLCB0ZXh0Q29tcG9uZW50LnByb3BzLnN0eWxlKVxuICAgIGNvbnN0IGV4cGVjdGVkU3R5bGUgPSBbey4uLmN1c3RvbVRleHRTdHlsZSwgY29sb3I6IGV4cGVjdC5hbnkoU3RyaW5nKX1dIC8vIEFkZGluZyB0aGUgJ2NvbG9yJyBwcm9wZXJ0eSBzaW5jZSBpdCBpcyBkeW5hbWljYWxseSBzZXQgaW4gdGhlIGNvbXBvbmVudFxuICAgIGV4cGVjdCh0ZXh0Q29tcG9uZW50LnByb3BzLnN0eWxlKS50b0VxdWFsKGV4cGVjdGVkU3R5bGUpXG4gIH0pXG59KVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsY0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsRUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBQyxlQUFBLENBQUFILE9BQUE7QUFHQUksUUFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQUs7RUFDOUJDLEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxZQUFLO0lBQzlDLElBQUFDLElBQUEsR0FBb0IsSUFBQVAsY0FBQSxDQUFBUSxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNSLEVBQUEsQ0FBQVMsSUFBSTtRQUFDQyxLQUFLLEVBQUM7TUFBWSxFQUFHLENBQUM7TUFBaERDLFNBQVMsR0FBQU4sSUFBQSxDQUFUTSxTQUFTO0lBQ2hCQyxNQUFNLENBQUNELFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDRSxVQUFVLEVBQUU7RUFDOUMsQ0FBQyxDQUFDO0VBRUZULEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxZQUFLO0lBQ3pELElBQU1VLE1BQU0sR0FBUyxDQUNuQixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osS0FBSyxFQUNMLEtBQUssRUFDTCxLQUFLLENBQ047SUFDREEsTUFBTSxDQUFDQyxPQUFPLENBQUMsVUFBQUMsS0FBSyxFQUFHO01BQ3JCLElBQUFDLEtBQUEsR0FBc0IsSUFBQW5CLGNBQUEsQ0FBQVEsTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDUixFQUFBLENBQUFTLElBQUk7VUFBQ0MsS0FBSyxFQUFDLFlBQVk7VUFBQ1EsQ0FBQyxFQUFFRjtRQUFNLEVBQUcsQ0FBQztRQUE1REcsV0FBVyxHQUFBRixLQUFBLENBQVhFLFdBQVc7TUFDbEIsSUFBTUMsYUFBYSxHQUFHRCxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ0UsS0FBSyxDQUFDTCxLQUFLO01BQy9ESixNQUFNLENBQUNRLGFBQWEsQ0FBQyxDQUFDRSxPQUFPLENBQUNWLE1BQU0sQ0FBQ1csZ0JBQWdCLENBQUN2QixFQUFBLENBQUF3QixVQUFVLENBQUNSLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUZaLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxZQUFLO0lBQzdDLElBQU1xQixlQUFlLEdBQWM7TUFBQ0MsVUFBVSxFQUFFLE1BQU07TUFBRUMsU0FBUyxFQUFFO0lBQVEsQ0FBQztJQUM1RSxJQUFNQyxRQUFRLEdBQUcsTUFBTTtJQUN2QixJQUFBQyxLQUFBLEdBQXNCLElBQUEvQixjQUFBLENBQUFRLE1BQU0sRUFDMUIsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNSLEVBQUEsQ0FBQVMsSUFBSTtRQUNIQyxLQUFLLEVBQUMsWUFBWTtRQUNsQmtCLFFBQVEsRUFBRUEsUUFBUztRQUNuQkUsU0FBUyxFQUFFTDtNQUFnQixFQUMzQixDQUNIO01BTk1OLFdBQVcsR0FBQVUsS0FBQSxDQUFYVixXQUFXO0lBT2xCLElBQU1ZLGFBQWEsR0FBR1osV0FBVyxDQUFDLGdCQUFnQixDQUFDO0lBQ25EYSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRUYsYUFBYSxDQUFDVixLQUFLLENBQUNMLEtBQUssQ0FBQztJQUN6RCxJQUFNa0IsYUFBYSxHQUFHLENBQUM7TUFBQ0MsS0FBSyxFQUFFO0lBQU0sQ0FBQyxFQUFFVixlQUFlLENBQUM7SUFDeERiLE1BQU0sQ0FBQ21CLGFBQWEsQ0FBQ1YsS0FBSyxDQUFDTCxLQUFLLENBQUMsQ0FBQ00sT0FBTyxDQUFDWSxhQUFhLENBQUM7RUFDMUQsQ0FBQyxDQUFDO0VBRUY5QixFQUFFLENBQUMsc0NBQXNDLEVBQUUsWUFBSztJQUM5QyxJQUFNcUIsZUFBZSxHQUFjO01BQUNDLFVBQVUsRUFBRSxNQUFNO01BQUVDLFNBQVMsRUFBRTtJQUFRLENBQUM7SUFDNUUsSUFBQVMsS0FBQSxHQUFzQixJQUFBdEMsY0FBQSxDQUFBUSxNQUFNLEVBQzFCLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDUixFQUFBLENBQUFTLElBQUk7UUFBQ0MsS0FBSyxFQUFDLFlBQVk7UUFBQ29CLFNBQVMsRUFBRUw7TUFBZ0IsRUFBRyxDQUN4RDtNQUZNTixXQUFXLEdBQUFpQixLQUFBLENBQVhqQixXQUFXO0lBR2xCLElBQU1ZLGFBQWEsR0FBR1osV0FBVyxDQUFDLGdCQUFnQixDQUFDO0lBQ25EYSxPQUFPLENBQUNDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRUYsYUFBYSxDQUFDVixLQUFLLENBQUNMLEtBQUssQ0FBQztJQUN6RCxJQUFNa0IsYUFBYSxHQUFHLENBQUFHLE1BQUEsQ0FBQUMsTUFBQSxLQUFLYixlQUFlO01BQUVVLEtBQUssRUFBRXZCLE1BQU0sQ0FBQzJCLEdBQUcsQ0FBQ0MsTUFBTTtJQUFDLEdBQUU7SUFDdkU1QixNQUFNLENBQUNtQixhQUFhLENBQUNWLEtBQUssQ0FBQ0wsS0FBSyxDQUFDLENBQUNNLE9BQU8sQ0FBQ1ksYUFBYSxDQUFDO0VBQzFELENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9