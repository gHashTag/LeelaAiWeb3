0eddbd3128492502fcf8aa3ab33dd0dd
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.registerWorkletStackDetails = registerWorkletStackDetails;
exports.reportFatalErrorOnJS = reportFatalErrorOnJS;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _workletStackDetails = new Map();
function registerWorkletStackDetails(hash, stackDetails) {
  _workletStackDetails.set(hash, stackDetails);
}
function getBundleOffset(error) {
  var _error$stack, _error$stack$split;
  var frame = (_error$stack = error.stack) === null || _error$stack === void 0 ? void 0 : (_error$stack$split = _error$stack.split('\n')) === null || _error$stack$split === void 0 ? void 0 : _error$stack$split[0];
  if (frame) {
    var parsedFrame = /@([^@]+):(\d+):(\d+)/.exec(frame);
    if (parsedFrame) {
      var _parsedFrame = (0, _slicedToArray2.default)(parsedFrame, 4),
        file = _parsedFrame[1],
        line = _parsedFrame[2],
        col = _parsedFrame[3];
      return [file, Number(line), Number(col)];
    }
  }
  return ['unknown', 0, 0];
}
function processStack(stack) {
  var workletStackEntries = stack.match(/worklet_(\d+):(\d+):(\d+)/g);
  var result = stack;
  workletStackEntries === null || workletStackEntries === void 0 ? void 0 : workletStackEntries.forEach(function (match) {
    var _match$split$map = match.split(/:|_/).map(Number),
      _match$split$map2 = (0, _slicedToArray2.default)(_match$split$map, 4),
      hash = _match$split$map2[1],
      origLine = _match$split$map2[2],
      origCol = _match$split$map2[3];
    var errorDetails = _workletStackDetails.get(hash);
    if (!errorDetails) {
      return;
    }
    var _errorDetails = (0, _slicedToArray2.default)(errorDetails, 3),
      error = _errorDetails[0],
      lineOffset = _errorDetails[1],
      colOffset = _errorDetails[2];
    var _getBundleOffset = getBundleOffset(error),
      _getBundleOffset2 = (0, _slicedToArray2.default)(_getBundleOffset, 3),
      bundleFile = _getBundleOffset2[0],
      bundleLine = _getBundleOffset2[1],
      bundleCol = _getBundleOffset2[2];
    var line = origLine + bundleLine + lineOffset;
    var col = origCol + bundleCol + colOffset;
    result = result.replace(match, `${bundleFile}:${line}:${col}`);
  });
  return result;
}
function reportFatalErrorOnJS(_ref) {
  var message = _ref.message,
    stack = _ref.stack;
  var error = new Error();
  error.message = message;
  error.stack = stack ? processStack(stack) : undefined;
  error.name = 'ReanimatedError';
  error.jsEngine = 'reanimated';
  global.ErrorUtils.reportFatalError(error);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfd29ya2xldFN0YWNrRGV0YWlscyIsIk1hcCIsInJlZ2lzdGVyV29ya2xldFN0YWNrRGV0YWlscyIsImhhc2giLCJzdGFja0RldGFpbHMiLCJzZXQiLCJnZXRCdW5kbGVPZmZzZXQiLCJlcnJvciIsIl9lcnJvciRzdGFjayIsIl9lcnJvciRzdGFjayRzcGxpdCIsImZyYW1lIiwic3RhY2siLCJzcGxpdCIsInBhcnNlZEZyYW1lIiwiZXhlYyIsIl9wYXJzZWRGcmFtZSIsIl9zbGljZWRUb0FycmF5MiIsImRlZmF1bHQiLCJmaWxlIiwibGluZSIsImNvbCIsIk51bWJlciIsInByb2Nlc3NTdGFjayIsIndvcmtsZXRTdGFja0VudHJpZXMiLCJtYXRjaCIsInJlc3VsdCIsImZvckVhY2giLCJfbWF0Y2gkc3BsaXQkbWFwIiwibWFwIiwiX21hdGNoJHNwbGl0JG1hcDIiLCJvcmlnTGluZSIsIm9yaWdDb2wiLCJlcnJvckRldGFpbHMiLCJnZXQiLCJfZXJyb3JEZXRhaWxzIiwibGluZU9mZnNldCIsImNvbE9mZnNldCIsIl9nZXRCdW5kbGVPZmZzZXQiLCJfZ2V0QnVuZGxlT2Zmc2V0MiIsImJ1bmRsZUZpbGUiLCJidW5kbGVMaW5lIiwiYnVuZGxlQ29sIiwicmVwbGFjZSIsInJlcG9ydEZhdGFsRXJyb3JPbkpTIiwiX3JlZiIsIm1lc3NhZ2UiLCJFcnJvciIsInVuZGVmaW5lZCIsIm5hbWUiLCJqc0VuZ2luZSIsImdsb2JhbCIsIkVycm9yVXRpbHMiLCJyZXBvcnRGYXRhbEVycm9yIl0sInNvdXJjZXMiOlsiZXJyb3JzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbInR5cGUgU3RhY2tEZXRhaWxzID0gW0Vycm9yLCBudW1iZXIsIG51bWJlcl07XG5cbmNvbnN0IF93b3JrbGV0U3RhY2tEZXRhaWxzID0gbmV3IE1hcDxudW1iZXIsIFN0YWNrRGV0YWlscz4oKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVyV29ya2xldFN0YWNrRGV0YWlscyhcbiAgaGFzaDogbnVtYmVyLFxuICBzdGFja0RldGFpbHM6IFN0YWNrRGV0YWlsc1xuKSB7XG4gIF93b3JrbGV0U3RhY2tEZXRhaWxzLnNldChoYXNoLCBzdGFja0RldGFpbHMpO1xufVxuXG5mdW5jdGlvbiBnZXRCdW5kbGVPZmZzZXQoZXJyb3I6IEVycm9yKTogW3N0cmluZywgbnVtYmVyLCBudW1iZXJdIHtcbiAgY29uc3QgZnJhbWUgPSBlcnJvci5zdGFjaz8uc3BsaXQoJ1xcbicpPy5bMF07XG4gIGlmIChmcmFtZSkge1xuICAgIGNvbnN0IHBhcnNlZEZyYW1lID0gL0AoW15AXSspOihcXGQrKTooXFxkKykvLmV4ZWMoZnJhbWUpO1xuICAgIGlmIChwYXJzZWRGcmFtZSkge1xuICAgICAgY29uc3QgWywgZmlsZSwgbGluZSwgY29sXSA9IHBhcnNlZEZyYW1lO1xuICAgICAgcmV0dXJuIFtmaWxlLCBOdW1iZXIobGluZSksIE51bWJlcihjb2wpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFsndW5rbm93bicsIDAsIDBdO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzU3RhY2soc3RhY2s6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHdvcmtsZXRTdGFja0VudHJpZXMgPSBzdGFjay5tYXRjaCgvd29ya2xldF8oXFxkKyk6KFxcZCspOihcXGQrKS9nKTtcbiAgbGV0IHJlc3VsdCA9IHN0YWNrO1xuICB3b3JrbGV0U3RhY2tFbnRyaWVzPy5mb3JFYWNoKChtYXRjaCkgPT4ge1xuICAgIGNvbnN0IFssIGhhc2gsIG9yaWdMaW5lLCBvcmlnQ29sXSA9IG1hdGNoLnNwbGl0KC86fF8vKS5tYXAoTnVtYmVyKTtcbiAgICBjb25zdCBlcnJvckRldGFpbHMgPSBfd29ya2xldFN0YWNrRGV0YWlscy5nZXQoaGFzaCk7XG4gICAgaWYgKCFlcnJvckRldGFpbHMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgW2Vycm9yLCBsaW5lT2Zmc2V0LCBjb2xPZmZzZXRdID0gZXJyb3JEZXRhaWxzO1xuICAgIGNvbnN0IFtidW5kbGVGaWxlLCBidW5kbGVMaW5lLCBidW5kbGVDb2xdID0gZ2V0QnVuZGxlT2Zmc2V0KGVycm9yKTtcbiAgICBjb25zdCBsaW5lID0gb3JpZ0xpbmUgKyBidW5kbGVMaW5lICsgbGluZU9mZnNldDtcbiAgICBjb25zdCBjb2wgPSBvcmlnQ29sICsgYnVuZGxlQ29sICsgY29sT2Zmc2V0O1xuXG4gICAgcmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UobWF0Y2gsIGAke2J1bmRsZUZpbGV9OiR7bGluZX06JHtjb2x9YCk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVwb3J0RmF0YWxFcnJvck9uSlMoe1xuICBtZXNzYWdlLFxuICBzdGFjayxcbn06IHtcbiAgbWVzc2FnZTogc3RyaW5nO1xuICBzdGFjaz86IHN0cmluZztcbn0pIHtcbiAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoKTtcbiAgZXJyb3IubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIGVycm9yLnN0YWNrID0gc3RhY2sgPyBwcm9jZXNzU3RhY2soc3RhY2spIDogdW5kZWZpbmVkO1xuICBlcnJvci5uYW1lID0gJ1JlYW5pbWF0ZWRFcnJvcic7XG4gIC8vIEB0cy1pZ25vcmUgUmVhY3QgTmF0aXZlJ3MgRXJyb3JVdGlscyBpbXBsZW1lbnRhdGlvbiBleHRlbmRzIHRoZSBFcnJvciB0eXBlIHdpdGgganNFbmdpbmUgZmllbGRcbiAgZXJyb3IuanNFbmdpbmUgPSAncmVhbmltYXRlZCc7XG4gIC8vIEB0cy1pZ25vcmUgdGhlIHJlcG9ydEZhdGFsRXJyb3IgbWV0aG9kIGlzIGFuIGludGVybmFsIG1ldGhvZCBvZiBFcnJvclV0aWxzIG5vdCBleHBvc2VkIGluIHRoZSB0eXBlIGRlZmluaXRpb25zXG4gIGdsb2JhbC5FcnJvclV0aWxzLnJlcG9ydEZhdGFsRXJyb3IoZXJyb3IpO1xufVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUEsSUFBTUEsb0JBQW9CLEdBQUcsSUFBSUMsR0FBRyxFQUF3QjtBQUVyRCxT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