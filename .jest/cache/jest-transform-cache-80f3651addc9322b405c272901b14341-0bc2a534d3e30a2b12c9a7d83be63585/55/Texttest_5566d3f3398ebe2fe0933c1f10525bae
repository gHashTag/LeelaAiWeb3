19cad9e06736defb24e0899b93365059
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
var react_1 = __importDefault(require("react"));
describe('Text Component', function () {
  it('renders correctly with default props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title"
      })),
      getByText = _ref.getByText;
    expect(getByText('Test Title')).toBeTruthy();
  });
  it('applies the correct style based on the "h" prop', function () {
    var styles = ['h0', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'h7', 'h8', 'h9', 'h10', 'h11', 'h12'];
    styles.forEach(function (style) {
      var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
          title: "Test Title",
          h: style
        })),
        getByTestId = _ref2.getByTestId;
      var receivedStyle = getByTestId('text-component').props.style;
      expect(receivedStyle).toEqual(expect.objectContaining(_1.textStyles[style]));
    });
  });
  it('applies the oneColor prop correctly', function () {
    var customTextStyle = {
      fontWeight: 'bold',
      fontStyle: 'italic'
    };
    var oneColor = 'blue';
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title",
        oneColor: oneColor,
        textStyle: customTextStyle
      })),
      getByTestId = _ref3.getByTestId;
    var textComponent = getByTestId('text-component');
    console.log('Received Style:', textComponent.props.style);
    var expectedStyle = [{
      color: 'blue'
    }, customTextStyle];
    expect(textComponent.props.style).toEqual(expectedStyle);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF9uYXRpdmVfMSIsInJlcXVpcmUiLCJfMSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJkZXNjcmliZSIsIml0IiwiX3JlZiIsInJlbmRlciIsIl9qc3hSdW50aW1lIiwianN4IiwiVGV4dCIsInRpdGxlIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsInN0eWxlcyIsImZvckVhY2giLCJzdHlsZSIsIl9yZWYyIiwiaCIsImdldEJ5VGVzdElkIiwicmVjZWl2ZWRTdHlsZSIsInByb3BzIiwidG9FcXVhbCIsIm9iamVjdENvbnRhaW5pbmciLCJ0ZXh0U3R5bGVzIiwiY3VzdG9tVGV4dFN0eWxlIiwiZm9udFdlaWdodCIsImZvbnRTdHlsZSIsIm9uZUNvbG9yIiwiX3JlZjMiLCJ0ZXh0U3R5bGUiLCJ0ZXh0Q29tcG9uZW50IiwiY29uc29sZSIsImxvZyIsImV4cGVjdGVkU3R5bGUiLCJjb2xvciJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvVGV4dC9UZXh0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cmVuZGVyfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7VGV4dCwgaFQsIHRleHRTdHlsZXN9IGZyb20gJy4vJyAvLyBSZXBsYWNlIHdpdGggeW91ciBhY3R1YWwgZmlsZSBwYXRoXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQge1RleHRTdHlsZX0gZnJvbSAncmVhY3QtbmF0aXZlJ1xuXG5kZXNjcmliZSgnVGV4dCBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIGRlZmF1bHQgcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXIoPFRleHQgdGl0bGU9XCJUZXN0IFRpdGxlXCIgLz4pXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnVGVzdCBUaXRsZScpKS50b0JlVHJ1dGh5KClcbiAgfSlcblxuICBpdCgnYXBwbGllcyB0aGUgY29ycmVjdCBzdHlsZSBiYXNlZCBvbiB0aGUgXCJoXCIgcHJvcCcsICgpID0+IHtcbiAgICBjb25zdCBzdHlsZXM6IGhUW10gPSBbXG4gICAgICAnaDAnLFxuICAgICAgJ2gxJyxcbiAgICAgICdoMicsXG4gICAgICAnaDMnLFxuICAgICAgJ2g0JyxcbiAgICAgICdoNScsXG4gICAgICAnaDYnLFxuICAgICAgJ2g3JyxcbiAgICAgICdoOCcsXG4gICAgICAnaDknLFxuICAgICAgJ2gxMCcsXG4gICAgICAnaDExJyxcbiAgICAgICdoMTInLFxuICAgIF1cbiAgICBzdHlsZXMuZm9yRWFjaChzdHlsZSA9PiB7XG4gICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxUZXh0IHRpdGxlPVwiVGVzdCBUaXRsZVwiIGg9e3N0eWxlfSAvPilcbiAgICAgIGNvbnN0IHJlY2VpdmVkU3R5bGUgPSBnZXRCeVRlc3RJZCgndGV4dC1jb21wb25lbnQnKS5wcm9wcy5zdHlsZVxuICAgICAgZXhwZWN0KHJlY2VpdmVkU3R5bGUpLnRvRXF1YWwoZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcodGV4dFN0eWxlc1tzdHlsZV0pKVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ2FwcGxpZXMgdGhlIG9uZUNvbG9yIHByb3AgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IGN1c3RvbVRleHRTdHlsZTogVGV4dFN0eWxlID0ge2ZvbnRXZWlnaHQ6ICdib2xkJywgZm9udFN0eWxlOiAnaXRhbGljJ31cbiAgICBjb25zdCBvbmVDb2xvciA9ICdibHVlJ1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoXG4gICAgICA8VGV4dFxuICAgICAgICB0aXRsZT1cIlRlc3QgVGl0bGVcIlxuICAgICAgICBvbmVDb2xvcj17b25lQ29sb3J9XG4gICAgICAgIHRleHRTdHlsZT17Y3VzdG9tVGV4dFN0eWxlfVxuICAgICAgLz4sXG4gICAgKVxuICAgIGNvbnN0IHRleHRDb21wb25lbnQgPSBnZXRCeVRlc3RJZCgndGV4dC1jb21wb25lbnQnKVxuICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCBTdHlsZTonLCB0ZXh0Q29tcG9uZW50LnByb3BzLnN0eWxlKVxuICAgIGNvbnN0IGV4cGVjdGVkU3R5bGUgPSBbe2NvbG9yOiAnYmx1ZSd9LCBjdXN0b21UZXh0U3R5bGVdXG4gICAgZXhwZWN0KHRleHRDb21wb25lbnQucHJvcHMuc3R5bGUpLnRvRXF1YWwoZXhwZWN0ZWRTdHlsZSlcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxjQUFBLEdBQUFDLE9BQUE7QUFDQSxJQUFBQyxFQUFBLEdBQUFELE9BQUE7QUFDQSxJQUFBRSxPQUFBLEdBQUFDLGVBQUEsQ0FBQUgsT0FBQTtBQUdBSSxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBSztFQUM5QkMsRUFBRSxDQUFDLHNDQUFzQyxFQUFFLFlBQUs7SUFDOUMsSUFBQUMsSUFBQSxHQUFvQixJQUFBUCxjQUFBLENBQUFRLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1IsRUFBQSxDQUFBUyxJQUFJO1FBQUNDLEtBQUssRUFBQztNQUFZLEVBQUcsQ0FBQztNQUFoREMsU0FBUyxHQUFBTixJQUFBLENBQVRNLFNBQVM7SUFDaEJDLE1BQU0sQ0FBQ0QsU0FBUyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUNFLFVBQVUsRUFBRTtFQUM5QyxDQUFDLENBQUM7RUFFRlQsRUFBRSxDQUFDLGlEQUFpRCxFQUFFLFlBQUs7SUFDekQsSUFBTVUsTUFBTSxHQUFTLENBQ25CLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLElBQUksRUFDSixLQUFLLEVBQ0wsS0FBSyxFQUNMLEtBQUssQ0FDTjtJQUNEQSxNQUFNLENBQUNDLE9BQU8sQ0FBQyxVQUFBQyxLQUFLLEVBQUc7TUFDckIsSUFBQUMsS0FBQSxHQUFzQixJQUFBbkIsY0FBQSxDQUFBUSxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNSLEVBQUEsQ0FBQVMsSUFBSTtVQUFDQyxLQUFLLEVBQUMsWUFBWTtVQUFDUSxDQUFDLEVBQUVGO1FBQU0sRUFBRyxDQUFDO1FBQTVERyxXQUFXLEdBQUFGLEtBQUEsQ0FBWEUsV0FBVztNQUNsQixJQUFNQyxhQUFhLEdBQUdELFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDRSxLQUFLLENBQUNMLEtBQUs7TUFDL0RKLE1BQU0sQ0FBQ1EsYUFBYSxDQUFDLENBQUNFLE9BQU8sQ0FBQ1YsTUFBTSxDQUFDVyxnQkFBZ0IsQ0FBQ3ZCLEVBQUEsQ0FBQXdCLFVBQVUsQ0FBQ1IsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUMzRSxDQUFDLENBQUM7RUFDSixDQUFDLENBQUM7RUFFRlosRUFBRSxDQUFDLHFDQUFxQyxFQUFFLFlBQUs7SUFDN0MsSUFBTXFCLGVBQWUsR0FBYztNQUFDQyxVQUFVLEVBQUUsTUFBTTtNQUFFQyxTQUFTLEVBQUU7SUFBUSxDQUFDO0lBQzVFLElBQU1DLFFBQVEsR0FBRyxNQUFNO0lBQ3ZCLElBQUFDLEtBQUEsR0FBc0IsSUFBQS9CLGNBQUEsQ0FBQVEsTUFBTSxFQUMxQixJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1IsRUFBQSxDQUFBUyxJQUFJO1FBQ0hDLEtBQUssRUFBQyxZQUFZO1FBQ2xCa0IsUUFBUSxFQUFFQSxRQUFTO1FBQ25CRSxTQUFTLEVBQUVMO01BQWdCLEVBQzNCLENBQ0g7TUFOTU4sV0FBVyxHQUFBVSxLQUFBLENBQVhWLFdBQVc7SUFPbEIsSUFBTVksYUFBYSxHQUFHWixXQUFXLENBQUMsZ0JBQWdCLENBQUM7SUFDbkRhLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQixFQUFFRixhQUFhLENBQUNWLEtBQUssQ0FBQ0wsS0FBSyxDQUFDO0lBQ3pELElBQU1rQixhQUFhLEdBQUcsQ0FBQztNQUFDQyxLQUFLLEVBQUU7SUFBTSxDQUFDLEVBQUVWLGVBQWUsQ0FBQztJQUN4RGIsTUFBTSxDQUFDbUIsYUFBYSxDQUFDVixLQUFLLENBQUNMLEtBQUssQ0FBQyxDQUFDTSxPQUFPLENBQUNZLGFBQWEsQ0FBQztFQUMxRCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMifQ==