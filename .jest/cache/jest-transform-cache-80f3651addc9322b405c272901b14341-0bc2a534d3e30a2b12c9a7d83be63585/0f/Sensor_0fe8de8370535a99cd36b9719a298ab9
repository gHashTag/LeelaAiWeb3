072b7905d7ecd421a2de9b20a93fedb2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _commonTypes = require("./commonTypes");
var _mutables = require("./mutables");
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function initSensorData(sensorType) {
  if (sensorType === _commonTypes.SensorType.ROTATION) {
    return (0, _mutables.makeMutable)({
      qw: 0,
      qx: 0,
      qy: 0,
      qz: 0,
      yaw: 0,
      pitch: 0,
      roll: 0,
      interfaceOrientation: 0
    });
  } else {
    return (0, _mutables.makeMutable)({
      x: 0,
      y: 0,
      z: 0,
      interfaceOrientation: 0
    });
  }
}
var Sensor = function () {
  function Sensor(sensorType, config) {
    (0, _classCallCheck2.default)(this, Sensor);
    _defineProperty(this, "listenersNumber", 0);
    _defineProperty(this, "sensorId", null);
    _defineProperty(this, "sensorType", void 0);
    _defineProperty(this, "data", void 0);
    _defineProperty(this, "config", void 0);
    this.sensorType = sensorType;
    this.config = config;
    this.data = initSensorData(sensorType);
  }
  (0, _createClass2.default)(Sensor, [{
    key: "register",
    value: function register(eventHandler) {
      var config = this.config;
      var sensorType = this.sensorType;
      this.sensorId = _NativeReanimated.default.registerSensor(sensorType, config.interval === 'auto' ? -1 : config.interval, config.iosReferenceFrame, eventHandler);
      return this.sensorId !== -1;
    }
  }, {
    key: "isRunning",
    value: function isRunning() {
      return this.sensorId !== -1 && this.sensorId !== null;
    }
  }, {
    key: "isAvailable",
    value: function isAvailable() {
      return this.sensorId !== -1;
    }
  }, {
    key: "getSharedValue",
    value: function getSharedValue() {
      return this.data;
    }
  }, {
    key: "unregister",
    value: function unregister() {
      if (this.sensorId !== null && this.sensorId !== -1) {
        _NativeReanimated.default.unregisterSensor(this.sensorId);
      }
      this.sensorId = null;
    }
  }]);
  return Sensor;
}();
exports.default = Sensor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfTmF0aXZlUmVhbmltYXRlZCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2NvbW1vblR5cGVzIiwiX211dGFibGVzIiwiaW5pdFNlbnNvckRhdGEiLCJzZW5zb3JUeXBlIiwiU2Vuc29yVHlwZSIsIlJPVEFUSU9OIiwibWFrZU11dGFibGUiLCJxdyIsInF4IiwicXkiLCJxeiIsInlhdyIsInBpdGNoIiwicm9sbCIsImludGVyZmFjZU9yaWVudGF0aW9uIiwieCIsInkiLCJ6IiwiU2Vuc29yIiwiY29uZmlnIiwiX2NsYXNzQ2FsbENoZWNrMiIsImRlZmF1bHQiLCJfZGVmaW5lUHJvcGVydHkiLCJkYXRhIiwiX2NyZWF0ZUNsYXNzMiIsImtleSIsInZhbHVlIiwicmVnaXN0ZXIiLCJldmVudEhhbmRsZXIiLCJzZW5zb3JJZCIsIk5hdGl2ZVJlYW5pbWF0ZWRNb2R1bGUiLCJyZWdpc3RlclNlbnNvciIsImludGVydmFsIiwiaW9zUmVmZXJlbmNlRnJhbWUiLCJpc1J1bm5pbmciLCJpc0F2YWlsYWJsZSIsImdldFNoYXJlZFZhbHVlIiwidW5yZWdpc3RlciIsInVucmVnaXN0ZXJTZW5zb3IiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiU2Vuc29yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBOYXRpdmVSZWFuaW1hdGVkTW9kdWxlIGZyb20gJy4vTmF0aXZlUmVhbmltYXRlZCc7XG5pbXBvcnQgdHlwZSB7XG4gIFNlbnNvckNvbmZpZyxcbiAgU2hhcmVkVmFsdWUsXG4gIFZhbHVlM0QsXG4gIFZhbHVlUm90YXRpb24sXG4gIFNoYXJlYWJsZVJlZixcbn0gZnJvbSAnLi9jb21tb25UeXBlcyc7XG5pbXBvcnQgeyBTZW5zb3JUeXBlIH0gZnJvbSAnLi9jb21tb25UeXBlcyc7XG5pbXBvcnQgeyBtYWtlTXV0YWJsZSB9IGZyb20gJy4vbXV0YWJsZXMnO1xuXG5mdW5jdGlvbiBpbml0U2Vuc29yRGF0YShcbiAgc2Vuc29yVHlwZTogU2Vuc29yVHlwZVxuKTogU2hhcmVkVmFsdWU8VmFsdWUzRCB8IFZhbHVlUm90YXRpb24+IHtcbiAgaWYgKHNlbnNvclR5cGUgPT09IFNlbnNvclR5cGUuUk9UQVRJT04pIHtcbiAgICByZXR1cm4gbWFrZU11dGFibGU8VmFsdWUzRCB8IFZhbHVlUm90YXRpb24+KHtcbiAgICAgIHF3OiAwLFxuICAgICAgcXg6IDAsXG4gICAgICBxeTogMCxcbiAgICAgIHF6OiAwLFxuICAgICAgeWF3OiAwLFxuICAgICAgcGl0Y2g6IDAsXG4gICAgICByb2xsOiAwLFxuICAgICAgaW50ZXJmYWNlT3JpZW50YXRpb246IDAsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG1ha2VNdXRhYmxlPFZhbHVlM0QgfCBWYWx1ZVJvdGF0aW9uPih7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIHo6IDAsXG4gICAgICBpbnRlcmZhY2VPcmllbnRhdGlvbjogMCxcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZW5zb3Ige1xuICBwdWJsaWMgbGlzdGVuZXJzTnVtYmVyID0gMDtcbiAgcHJpdmF0ZSBzZW5zb3JJZDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG4gIHByaXZhdGUgc2Vuc29yVHlwZTogU2Vuc29yVHlwZTtcbiAgcHJpdmF0ZSBkYXRhOiBTaGFyZWRWYWx1ZTxWYWx1ZTNEIHwgVmFsdWVSb3RhdGlvbj47XG4gIHByaXZhdGUgY29uZmlnOiBTZW5zb3JDb25maWc7XG5cbiAgY29uc3RydWN0b3Ioc2Vuc29yVHlwZTogU2Vuc29yVHlwZSwgY29uZmlnOiBTZW5zb3JDb25maWcpIHtcbiAgICB0aGlzLnNlbnNvclR5cGUgPSBzZW5zb3JUeXBlO1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIHRoaXMuZGF0YSA9IGluaXRTZW5zb3JEYXRhKHNlbnNvclR5cGUpO1xuICB9XG5cbiAgcmVnaXN0ZXIoXG4gICAgZXZlbnRIYW5kbGVyOiBTaGFyZWFibGVSZWY8KGRhdGE6IFZhbHVlM0QgfCBWYWx1ZVJvdGF0aW9uKSA9PiB2b2lkPlxuICApIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICBjb25zdCBzZW5zb3JUeXBlID0gdGhpcy5zZW5zb3JUeXBlO1xuICAgIHRoaXMuc2Vuc29ySWQgPSBOYXRpdmVSZWFuaW1hdGVkTW9kdWxlLnJlZ2lzdGVyU2Vuc29yKFxuICAgICAgc2Vuc29yVHlwZSxcbiAgICAgIGNvbmZpZy5pbnRlcnZhbCA9PT0gJ2F1dG8nID8gLTEgOiBjb25maWcuaW50ZXJ2YWwsXG4gICAgICBjb25maWcuaW9zUmVmZXJlbmNlRnJhbWUsXG4gICAgICBldmVudEhhbmRsZXJcbiAgICApO1xuICAgIHJldHVybiB0aGlzLnNlbnNvcklkICE9PSAtMTtcbiAgfVxuXG4gIGlzUnVubmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5zZW5zb3JJZCAhPT0gLTEgJiYgdGhpcy5zZW5zb3JJZCAhPT0gbnVsbDtcbiAgfVxuXG4gIGlzQXZhaWxhYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnNlbnNvcklkICE9PSAtMTtcbiAgfVxuXG4gIGdldFNoYXJlZFZhbHVlKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGE7XG4gIH1cblxuICB1bnJlZ2lzdGVyKCkge1xuICAgIGlmICh0aGlzLnNlbnNvcklkICE9PSBudWxsICYmIHRoaXMuc2Vuc29ySWQgIT09IC0xKSB7XG4gICAgICBOYXRpdmVSZWFuaW1hdGVkTW9kdWxlLnVucmVnaXN0ZXJTZW5zb3IodGhpcy5zZW5zb3JJZCk7XG4gICAgfVxuICAgIHRoaXMuc2Vuc29ySWQgPSBudWxsO1xuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxJQUFBQSxpQkFBQSxHQUFBQyxzQkFBQSxDQUFBQyxPQUFBO0FBUUEsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsU0FBQSxHQUFBRixPQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLFNBQVNHLGNBQWNBLENB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