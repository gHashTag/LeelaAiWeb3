41761d9c93fead85e183f78269c168f1
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["h", "colors", "title", "oneColor", "textStyle"];
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx";
var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function get() {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Text = exports.textStyles = void 0;
var native_1 = require("@react-navigation/native");
var react_1 = __importStar(require("react"));
var react_native_1 = require("react-native");
var react_native_size_matters_1 = require("react-native-size-matters");
exports.textStyles = react_native_1.StyleSheet.create({
  h0: {
    fontFamily: react_native_1.Platform.OS === 'ios' ? 'Etna' : 'etna-free-font',
    textShadowOffset: {
      width: 1,
      height: 1
    },
    textShadowRadius: 1,
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.ms)(95, 0.5) : (0, react_native_size_matters_1.ms)(95, 0.3)
  },
  h1: {
    fontFamily: react_native_1.Platform.OS === 'ios' ? 'Etna' : 'etna-free-font',
    textShadowOffset: {
      width: 1,
      height: 1
    },
    textShadowRadius: 1,
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.ms)(35, 0.3) : (0, react_native_size_matters_1.ms)(35, 0.6)
  },
  h2: {
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.s)(20) : (0, react_native_size_matters_1.s)(20),
    fontFamily: 'Montserrat'
  },
  h3: {
    fontFamily: 'Montserrat',
    textShadowOffset: {
      width: 1,
      height: 1
    },
    textShadowRadius: 1,
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.ms)(18, 0.6) : (0, react_native_size_matters_1.ms)(18, 0.6)
  },
  h4: {
    fontFamily: 'Montserrat',
    textShadowRadius: 1,
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.ms)(15, 0.8) : (0, react_native_size_matters_1.s)(15)
  },
  h5: {
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.s)(15) : (0, react_native_size_matters_1.s)(15),
    fontFamily: react_native_1.Platform.OS === 'ios' ? 'Avenir Next' : 'Montserrat'
  },
  h6: {
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.s)(15) : (0, react_native_size_matters_1.s)(15),
    fontFamily: 'Montserrat'
  },
  h7: {
    fontSize: (0, react_native_size_matters_1.ms)(15, 0.6),
    fontFamily: 'Montserrat',
    letterSpacing: 0.2,
    lineHeight: (0, react_native_size_matters_1.ms)(18.5, 0.6)
  },
  h8: {
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.s)(14) : (0, react_native_size_matters_1.s)(14),
    fontFamily: 'Montserrat'
  },
  h9: {
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.s)(13) : (0, react_native_size_matters_1.s)(13),
    fontFamily: 'NeutraText-Bold'
  },
  h10: {
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.s)(12) : (0, react_native_size_matters_1.s)(12),
    fontFamily: 'Montserrat'
  },
  h11: {
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.s)(10) : (0, react_native_size_matters_1.s)(10),
    fontFamily: 'Montserrat'
  },
  h12: {
    fontSize: react_native_1.Platform.OS === 'ios' ? (0, react_native_size_matters_1.s)(10) : (0, react_native_size_matters_1.s)(10),
    fontFamily: 'OxygenMono-Regular'
  }
});
exports.Text = (0, react_1.memo)(function (_ref) {
  var h = _ref.h,
    colors = _ref.colors,
    title = _ref.title,
    oneColor = _ref.oneColor,
    textStyle = _ref.textStyle,
    textProps = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var _ref2 = (0, native_1.useTheme)(),
    _ref2$colors = _ref2.colors,
    primary = _ref2$colors.primary,
    text = _ref2$colors.text;
  var scheme = (0, react_native_1.useColorScheme)();
  var isDark = scheme === 'dark';
  var curColor = oneColor ? oneColor : colors ? isDark ? colors.light : colors.dark : text;
  var noShadowFonts = ['h7', 'h1', 'h10', 'h12', 'h4'];
  var hasShadow = h ? !noShadowFonts.includes(h) : false;
  var hStyle = h ? [Object.assign({}, exports.textStyles[h], {
    color: curColor
  }), hasShadow && {
    textShadowColor: primary
  }] : undefined;
  return (0, _jsxRuntime.jsx)(react_native_1.Text, Object.assign({
    style: [hStyle, textStyle]
  }, textProps, {
    testID: "text-component",
    children: title
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,