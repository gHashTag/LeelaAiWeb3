c9f33cbc83b851d75bd0a2d0334c5474
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('./Animated', function () {
  return Object.assign({}, jest.requireActual('./Animated'), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
describe('Dice Component', function () {
  var mockRandom = jest.fn();
  var mockUpdateStep = jest.fn();
  var mockProps = {
    count: 1,
    players: 2,
    disabled: false,
    canGo: true,
    isReported: false,
    updateStep: mockUpdateStep,
    random: mockRandom
  };
  it('calls the random function and updateStep on press when not disabled', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
    });
    expect(mockRandom).toHaveBeenCalledTimes(1);
    expect(mockUpdateStep).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX2pzeFJ1bnRpbWUiLCJyZXF1aXJlIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWFjdF9uYXRpdmVfMSIsIl8xIiwiZGVzY3JpYmUiLCJtb2NrUmFuZG9tIiwiZm4iLCJtb2NrVXBkYXRlU3RlcCIsIm1vY2tQcm9wcyIsImNvdW50IiwicGxheWVycyIsImRpc2FibGVkIiwiY2FuR28iLCJpc1JlcG9ydGVkIiwidXBkYXRlU3RlcCIsInJhbmRvbSIsIml0IiwiX3JlZiIsInJlbmRlciIsImpzeCIsIkRpY2UiLCJnZXRCeVRlc3RJZCIsImFjdCIsImZpcmVFdmVudCIsInByZXNzIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9EaWNlL0RpY2UudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudCwgYWN0fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7RGljZX0gZnJvbSAnLi8nXG5cbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbmltYXRlZC9OYXRpdmVBbmltYXRlZEhlbHBlcicpXG5qZXN0Lm1vY2soJy4vQW5pbWF0ZWQnLCAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCcuL0FuaW1hdGVkJyksXG4gICAgY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQ6IChjb21wb25lbnQ6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIGNvbXBvbmVudFxuICAgIH0sXG4gIH1cbn0pXG5cbmRlc2NyaWJlKCdEaWNlIENvbXBvbmVudCcsICgpID0+IHtcbiAgY29uc3QgbW9ja1JhbmRvbSA9IGplc3QuZm4oKVxuICBjb25zdCBtb2NrVXBkYXRlU3RlcCA9IGplc3QuZm4oKVxuXG4gIC8vINCf0LXRgNC10LTQsNC50YLQtSDQvNC+0LrQuCDRh9C10YDQtdC3IG1vY2tQcm9wc1xuICBjb25zdCBtb2NrUHJvcHMgPSB7XG4gICAgY291bnQ6IDEsXG4gICAgcGxheWVyczogMixcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgY2FuR286IHRydWUsXG4gICAgaXNSZXBvcnRlZDogZmFsc2UsXG4gICAgdXBkYXRlU3RlcDogbW9ja1VwZGF0ZVN0ZXAsXG4gICAgcmFuZG9tOiBtb2NrUmFuZG9tLFxuICB9XG5cbiAgLy8gICBpdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCB0aGUgcHJvdmlkZWQgcHJvcHMnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuICAvLyAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKS50b0JlRGVmaW5lZCgpXG4gIC8vICAgfSlcblxuICBpdCgnY2FsbHMgdGhlIHJhbmRvbSBmdW5jdGlvbiBhbmQgdXBkYXRlU3RlcCBvbiBwcmVzcyB3aGVuIG5vdCBkaXNhYmxlZCcsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuXG4gICAgLy8g0KHQuNC80YPQu9C40YDRg9C50YLQtSDQvdCw0LbQsNGC0LjQtSDQvdCwINC60L7QvNC/0L7QvdC10L3Rgiwg0L7QsdC10YDQvdGD0LIg0LXQs9C+INCyIGFjdCguLi4pXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgICB9KVxuXG4gICAgLy8g0J/RgNC+0LLQtdGA0YzRgtC1LCDRh9GC0L4g0YTRg9C90LrRhtC40LggcmFuZG9tINC4IHVwZGF0ZVN0ZXAg0LHRi9C70Lgg0LLRi9C30LLQsNC90Ysg0L/QviDQvtC00L3QvtC80YMg0YDQsNC30YNcbiAgICBleHBlY3QobW9ja1JhbmRvbSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gICAgZXhwZWN0KG1vY2tVcGRhdGVTdGVwKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgfSlcbiAgLy8gICBpdCgnZG9lcyBub3QgY2FsbCB0aGUgcmFuZG9tIGZ1bmN0aW9uIGFuZCB1cGRhdGVTdGVwIG9uIHByZXNzIHdoZW4gZGlzYWJsZWQnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IGRpc2FibGVkPXt0cnVlfSAvPilcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMucmFuZG9tKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMudXBkYXRlU3RlcCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApXG4gIC8vICAgfSlcblxuICAvLyAgIGl0KCdkb2VzIG5vdCBjYWxsIHRoZSByYW5kb20gZnVuY3Rpb24gYW5kIHVwZGF0ZVN0ZXAgb24gcHJlc3Mgd2hlbiBjYW5HbyBpcyBmYWxzZScsICgpID0+IHtcbiAgLy8gICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gY2FuR289e2ZhbHNlfSAvPilcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMucmFuZG9tKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMudXBkYXRlU3RlcCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApXG4gIC8vICAgfSlcblxuICAvLyAgIGl0KCdkb2VzIG5vdCBjYWxsIHRoZSByYW5kb20gZnVuY3Rpb24gYW5kIHVwZGF0ZVN0ZXAgb24gcHJlc3Mgd2hlbiBpc1JlcG9ydGVkIGlzIHRydWUnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IGlzUmVwb3J0ZWQ9e3RydWV9IC8+KVxuICAvLyAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy5yYW5kb20pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy51cGRhdGVTdGVwKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICB9KVxuXG4gIC8vIEFkZCBtb3JlIHRlc3RzIGJhc2VkIG9uIHlvdXIgY29tcG9uZW50J3MgYmVoYXZpb3IgYW5kIHJlcXVpcmVtZW50c1xufSlcbiJdLCJtYXBwaW5ncyI6Ijs7QUFJQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsc0RBQXNELENBQUM7QUFDakVELFdBQUEsR0FBS0MsSUFBSSxDQUFDLFlBQVksRUFBRSxZQUFLO0VBQzNCLE9BQUFDLE1BQUEsQ0FBQUMsTUFBQSxLQUNLQyxJQUFJLENBQUNDLGFBQWEsQ0FBQyxZQUFZLENBQUM7SUFDbkNDLHVCQUF1QixFQUFFLFNBQUFBLHdCQUFDQyxTQUFjLEVBQUk7TUFDMUMsT0FBT0EsU0FBUztJQUNsQjtFQUFDO0FBRUwsQ0FBQyxDQUFDO0FBQUEsSUFBQUMsV0FBQSxHQUFBQyxPQUFBO0FBQUEsSUFBQUMsS0FBQTtFQUFBQyxZQUFBO0FBQUEsU0FBQVgsWUFBQTtFQUFBLElBQUFZLFFBQUEsR0FBQUgsT0FBQTtJQUFBTCxJQUFBLEdBQUFRLFFBQUEsQ0FBQVIsSUFBQTtFQUFBSixXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBSSxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7Ozs7Ozs7OztBQVpGLElBQUFTLE9BQUEsR0FBQUMsZUFBQSxDQUFBTCxPQUFBO0FBQ0EsSUFBQU0sY0FBQSxHQUFBTixPQUFBO0FBQ0EsSUFBQU8sRUFBQSxHQUFBUCxPQUFBO0FBWUFRLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFLO0VBQzlCLElBQU1DLFVBQVUsR0FBR2QsSUFBSSxDQUFDZSxFQUFFLEVBQUU7RUFDNUIsSUFBTUMsY0FBYyxHQUFHaEIsSUFBSSxDQUFDZSxFQUFFLEVBQUU7RUFHaEMsSUFBTUUsU0FBUyxHQUFHO0lBQ2hCQyxLQUFLLEVBQUUsQ0FBQztJQUNSQyxPQUFPLEVBQUUsQ0FBQztJQUNWQyxRQUFRLEVBQUUsS0FBSztJQUNmQyxLQUFLLEVBQUUsSUFBSTtJQUNYQyxVQUFVLEVBQUUsS0FBSztJQUNqQkMsVUFBVSxFQUFFUCxjQUFjO0lBQzFCUSxNQUFNLEVBQUVWO0dBQ1Q7RUFPRFcsRUFBRSxDQUFDLHFFQUFxRSxFQUFFLFlBQUs7SUFDN0UsSUFBQUMsSUFBQSxHQUFzQixJQUFBZixjQUFBLENBQUFnQixNQUFNLEVBQUMsSUFBQXZCLFdBQUEsQ0FBQXdCLEdBQUEsRUFBQ2hCLEVBQUEsQ0FBQWlCLElBQUksRUFBQS9CLE1BQUEsQ0FBQUMsTUFBQSxLQUFLa0IsU0FBUyxDQUFDLENBQUcsQ0FBQztNQUE5Q2EsV0FBVyxHQUFBSixJQUFBLENBQVhJLFdBQVc7SUFHbEIsSUFBQW5CLGNBQUEsQ0FBQW9CLEdBQUcsRUFBQyxZQUFLO01BQ1BwQixjQUFBLENBQUFxQixTQUFTLENBQUNDLEtBQUssQ0FBQ0gsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDaEQsQ0FBQyxDQUFDO0lBR0ZJLE1BQU0sQ0FBQ3BCLFVBQVUsQ0FBQyxDQUFDcUIscUJBQXFCLENBQUMsQ0FBQyxDQUFDO0lBQzNDRCxNQUFNLENBQUNsQixjQUFjLENBQUMsQ0FBQ21CLHFCQUFxQixDQUFDLENBQUMsQ0FBQztFQUNqRCxDQUFDLENBQUM7QUF1QkosQ0FBQyxDQUFDIn0=