506372804e4f42be9b80ada2c6a80599
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withTiming = void 0;
var _Easing = require("../Easing");
var _util = require("./util");
var withTiming = function withTiming(toValue, userConfig, callback) {
  'worklet';

  return (0, _util.defineAnimation)(toValue, function () {
    'worklet';

    var config = {
      duration: 300,
      easing: _Easing.Easing.inOut(_Easing.Easing.quad)
    };
    if (userConfig) {
      Object.keys(userConfig).forEach(function (key) {
        return config[key] = userConfig[key];
      });
    }
    function timing(animation, now) {
      var toValue = animation.toValue,
        startTime = animation.startTime,
        startValue = animation.startValue;
      var runtime = now - startTime;
      if (runtime >= config.duration) {
        animation.startTime = 0;
        animation.current = toValue;
        return true;
      }
      var progress = animation.easing(runtime / config.duration);
      animation.current = startValue + (toValue - startValue) * progress;
      return false;
    }
    function onStart(animation, value, now, previousAnimation) {
      if (previousAnimation && previousAnimation.type === 'timing' && previousAnimation.toValue === toValue && previousAnimation.startTime) {
        animation.startTime = previousAnimation.startTime;
        animation.startValue = previousAnimation.startValue;
      } else {
        animation.startTime = now;
        animation.startValue = value;
      }
      animation.current = value;
      if (typeof config.easing === 'object') {
        animation.easing = config.easing.factory();
      } else {
        animation.easing = config.easing;
      }
    }
    return {
      type: 'timing',
      onFrame: timing,
      onStart: onStart,
      progress: 0,
      toValue: toValue,
      startValue: 0,
      startTime: 0,
      easing: function easing() {
        return 0;
      },
      current: toValue,
      callback: callback
    };
  });
};
exports.withTiming = withTiming;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfRWFzaW5nIiwicmVxdWlyZSIsIl91dGlsIiwid2l0aFRpbWluZyIsInRvVmFsdWUiLCJ1c2VyQ29uZmlnIiwiY2FsbGJhY2siLCJkZWZpbmVBbmltYXRpb24iLCJjb25maWciLCJkdXJhdGlvbiIsImVhc2luZyIsIkVhc2luZyIsImluT3V0IiwicXVhZCIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwia2V5IiwidGltaW5nIiwiYW5pbWF0aW9uIiwibm93Iiwic3RhcnRUaW1lIiwic3RhcnRWYWx1ZSIsInJ1bnRpbWUiLCJjdXJyZW50IiwicHJvZ3Jlc3MiLCJvblN0YXJ0IiwidmFsdWUiLCJwcmV2aW91c0FuaW1hdGlvbiIsInR5cGUiLCJmYWN0b3J5Iiwib25GcmFtZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ0aW1pbmcudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBFYXNpbmdGbiwgRWFzaW5nRmFjdG9yeUZuIH0gZnJvbSAnLi4vRWFzaW5nJztcbmltcG9ydCB7IEVhc2luZyB9IGZyb20gJy4uL0Vhc2luZyc7XG5pbXBvcnQgeyBkZWZpbmVBbmltYXRpb24gfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHR5cGUge1xuICBBbmltYXRpb24sXG4gIEFuaW1hdGlvbkNhbGxiYWNrLFxuICBUaW1lc3RhbXAsXG4gIEFuaW1hdGFibGVWYWx1ZSxcbn0gZnJvbSAnLi4vY29tbW9uVHlwZXMnO1xuXG5pbnRlcmZhY2UgVGltaW5nQ29uZmlnIHtcbiAgZHVyYXRpb24/OiBudW1iZXI7XG4gIGVhc2luZz86IEVhc2luZ0ZuIHwgRWFzaW5nRmFjdG9yeUZuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRpbWluZ0FuaW1hdGlvbiBleHRlbmRzIEFuaW1hdGlvbjxUaW1pbmdBbmltYXRpb24+IHtcbiAgdHlwZTogc3RyaW5nO1xuICBlYXNpbmc6IEVhc2luZ0ZuO1xuICBzdGFydFZhbHVlOiBBbmltYXRhYmxlVmFsdWU7XG4gIHN0YXJ0VGltZTogVGltZXN0YW1wO1xuICBwcm9ncmVzczogbnVtYmVyO1xuICB0b1ZhbHVlOiBBbmltYXRhYmxlVmFsdWU7XG4gIGN1cnJlbnQ6IEFuaW1hdGFibGVWYWx1ZTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbm5lclRpbWluZ0FuaW1hdGlvblxuICBleHRlbmRzIE9taXQ8VGltaW5nQW5pbWF0aW9uLCAndG9WYWx1ZScgfCAnY3VycmVudCc+IHtcbiAgdG9WYWx1ZTogbnVtYmVyO1xuICBjdXJyZW50OiBudW1iZXI7XG59XG5cbi8vIFRPRE8gVFlQRVNDUklQVCBUaGlzIGlzIHRlbXBvcmFyeSB0eXBlIHB1dCBpbiBoZXJlIHRvIGdldCByaWQgb2Ygb3VyIC5kLnRzIGZpbGVcbnR5cGUgd2l0aFRpbWluZ1R5cGUgPSA8VCBleHRlbmRzIEFuaW1hdGFibGVWYWx1ZT4oXG4gIHRvVmFsdWU6IFQsXG4gIHVzZXJDb25maWc/OiBUaW1pbmdDb25maWcsXG4gIGNhbGxiYWNrPzogQW5pbWF0aW9uQ2FsbGJhY2tcbikgPT4gVDtcblxuZXhwb3J0IGNvbnN0IHdpdGhUaW1pbmcgPSBmdW5jdGlvbiAoXG4gIHRvVmFsdWU6IEFuaW1hdGFibGVWYWx1ZSxcbiAgdXNlckNvbmZpZz86IFRpbWluZ0NvbmZpZyxcbiAgY2FsbGJhY2s/OiBBbmltYXRpb25DYWxsYmFja1xuKTogQW5pbWF0aW9uPFRpbWluZ0FuaW1hdGlvbj4ge1xuICAnd29ya2xldCc7XG5cbiAgcmV0dXJuIGRlZmluZUFuaW1hdGlvbjxUaW1pbmdBbmltYXRpb24+KHRvVmFsdWUsICgpID0+IHtcbiAgICAnd29ya2xldCc7XG4gICAgY29uc3QgY29uZmlnOiBSZXF1aXJlZDxUaW1pbmdDb25maWc+ID0ge1xuICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgIGVhc2luZzogRWFzaW5nLmluT3V0KEVhc2luZy5xdWFkKSxcbiAgICB9O1xuICAgIGlmICh1c2VyQ29uZmlnKSB7XG4gICAgICBPYmplY3Qua2V5cyh1c2VyQ29uZmlnKS5mb3JFYWNoKFxuICAgICAgICAoa2V5KSA9PlxuICAgICAgICAgICgoY29uZmlnIGFzIGFueSlba2V5XSA9IHVzZXJDb25maWdba2V5IGFzIGtleW9mIHR5cGVvZiB1c2VyQ29uZmlnXSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGltaW5nKGFuaW1hdGlvbjogSW5uZXJUaW1pbmdBbmltYXRpb24sIG5vdzogVGltZXN0YW1wKTogYm9vbGVhbiB7XG4gICAgICBjb25zdCB7IHRvVmFsdWUsIHN0YXJ0VGltZSwgc3RhcnRWYWx1ZSB9ID0gYW5pbWF0aW9uO1xuICAgICAgY29uc3QgcnVudGltZSA9IG5vdyAtIHN0YXJ0VGltZTtcblxuICAgICAgaWYgKHJ1bnRpbWUgPj0gY29uZmlnLmR1cmF0aW9uKSB7XG4gICAgICAgIC8vIHJlc2V0IHN0YXJ0VGltZSB0byBhdm9pZCByZXVzaW5nIGZpbmlzaGVkIGFuaW1hdGlvbiBjb25maWcgaW4gYHN0YXJ0YCBtZXRob2RcbiAgICAgICAgYW5pbWF0aW9uLnN0YXJ0VGltZSA9IDA7XG4gICAgICAgIGFuaW1hdGlvbi5jdXJyZW50ID0gdG9WYWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9ncmVzcyA9IGFuaW1hdGlvbi5lYXNpbmcocnVudGltZSAvIGNvbmZpZy5kdXJhdGlvbik7XG4gICAgICBhbmltYXRpb24uY3VycmVudCA9XG4gICAgICAgIChzdGFydFZhbHVlIGFzIG51bWJlcikgKyAodG9WYWx1ZSAtIChzdGFydFZhbHVlIGFzIG51bWJlcikpICogcHJvZ3Jlc3M7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25TdGFydChcbiAgICAgIGFuaW1hdGlvbjogVGltaW5nQW5pbWF0aW9uLFxuICAgICAgdmFsdWU6IG51bWJlcixcbiAgICAgIG5vdzogVGltZXN0YW1wLFxuICAgICAgcHJldmlvdXNBbmltYXRpb246IEFuaW1hdGlvbjxUaW1pbmdBbmltYXRpb24+XG4gICAgKTogdm9pZCB7XG4gICAgICBpZiAoXG4gICAgICAgIHByZXZpb3VzQW5pbWF0aW9uICYmXG4gICAgICAgIChwcmV2aW91c0FuaW1hdGlvbiBhcyBUaW1pbmdBbmltYXRpb24pLnR5cGUgPT09ICd0aW1pbmcnICYmXG4gICAgICAgIChwcmV2aW91c0FuaW1hdGlvbiBhcyBUaW1pbmdBbmltYXRpb24pLnRvVmFsdWUgPT09IHRvVmFsdWUgJiZcbiAgICAgICAgKHByZXZpb3VzQW5pbWF0aW9uIGFzIFRpbWluZ0FuaW1hdGlvbikuc3RhcnRUaW1lXG4gICAgICApIHtcbiAgICAgICAgLy8gdG8gbWFpbnRhaW4gY29udGludWl0eSBvZiB0aW1pbmcgYW5pbWF0aW9ucyB3ZSBjaGVjayBpZiB3ZSBhcmUgc3RhcnRpbmdcbiAgICAgICAgLy8gbmV3IHRpbWluZyBvdmVyIHRoZSBvbGQgb25lIHdpdGggdGhlIHNhbWUgcGFyYW1ldGVycy4gSWYgc28sIHdlIHdhbnRcbiAgICAgICAgLy8gdG8gY29weSBhbmltYXRpb24gdGltZWxpbmUgcHJvcGVydGllc1xuICAgICAgICBhbmltYXRpb24uc3RhcnRUaW1lID0gKHByZXZpb3VzQW5pbWF0aW9uIGFzIFRpbWluZ0FuaW1hdGlvbikuc3RhcnRUaW1lO1xuICAgICAgICBhbmltYXRpb24uc3RhcnRWYWx1ZSA9IChcbiAgICAgICAgICBwcmV2aW91c0FuaW1hdGlvbiBhcyBUaW1pbmdBbmltYXRpb25cbiAgICAgICAgKS5zdGFydFZhbHVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYW5pbWF0aW9uLnN0YXJ0VGltZSA9IG5vdztcbiAgICAgICAgYW5pbWF0aW9uLnN0YXJ0VmFsdWUgPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIGFuaW1hdGlvbi5jdXJyZW50ID0gdmFsdWU7XG4gICAgICBpZiAodHlwZW9mIGNvbmZpZy5lYXNpbmcgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGFuaW1hdGlvbi5lYXNpbmcgPSBjb25maWcuZWFzaW5nLmZhY3RvcnkoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuaW1hdGlvbi5lYXNpbmcgPSBjb25maWcuZWFzaW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAndGltaW5nJyxcbiAgICAgIG9uRnJhbWU6IHRpbWluZyxcbiAgICAgIG9uU3RhcnQ6IG9uU3RhcnQgYXMgKGFuaW1hdGlvbjogVGltaW5nQW5pbWF0aW9uLCBub3c6IG51bWJlcikgPT4gYm9vbGVhbixcbiAgICAgIHByb2dyZXNzOiAwLFxuICAgICAgdG9WYWx1ZSxcbiAgICAgIHN0YXJ0VmFsdWU6IDAsXG4gICAgICBzdGFydFRpbWU6IDAsXG4gICAgICBlYXNpbmc6ICgpID0+IDAsXG4gICAgICBjdXJyZW50OiB0b1ZhbHVlLFxuICAgICAgY2FsbGJhY2ssXG4gICAgfSBhcyBUaW1pbmdBbmltYXRpb247XG4gIH0pO1xufSBhcyB3aXRoVGltaW5nVHlwZTtcbiJdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLElBQUFBLE9BQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLEtBQUEsR0FBQUQsT0FBQTtBQW9DTyxJQUFNRSxVQUFVLEdBQUcsU0FBYkEsVUFBVUEsQ0FDckJDLE9BQXdCLEVBQ3hCQyxVQUF5QixFQUN6QkMsUUFBNEIsRUFDQTtFQUM1QixTQUFTOztFQUVULE9BQU8sSUFBQUMscUJBQWUsRUFBa0JILE9BQU8sRUFBRSxZQUFNO0lBQ3JELFNBQVM7O0lBQ1QsSUFBTUksTUFBOEIsR0FBRztNQUNyQ0MsUUFBUSxFQUFFLEdBQUc7TUFDYkMsTUFBTSxFQUFFQyxjQUFNLENBQUNDLEtBQUssQ0FBQ0QsY0FBTSxDQUFDRSxJQUFJO0lBQ2xDLENBQUM7SUFDRCxJQUFJUixVQUFVLEVBQUU7TUFDZFMsTUFBTSxDQUFDQyxJQUFJLENBQUNWLFVBQVUsQ0FBQyxDQUFDVyxPQUFPLENBQzVCLFVBQUFDLEdBQUc7UUFBQSxPQUNBVCxNQUFNLENBQVNTLEdBQUcsQ0FBQyxHQUFHWixVQUFVLENBQUNZLEdBQUcsQ0FBNkI7TUFBQSxFQUN0RTtJQUNIO0lBRUEsU0FBU0MsTUFBTUEsQ0FBQ0MsU0FBK0IsRUFBRUMsR0FBYyxFQUFXO01BQ3hFLElBQVFoQixPQUFPLEdBQTRCZSxTQUFTLENBQTVDZixPQUFPO1FBQUVpQixTQUFTLEdBQWlCRixTQUFTLENBQW5DRSxTQUFTO1FBQUVDLFVBQUEsR0FBZUgsU0FBUyxDQUF4QkcsVUFBQTtNQUM1QixJQUFNQyxPQUFPLEdBQUdILEdBQUcsR0FBR0MsU0FBUztNQUUvQixJQUFJRSxPQUFPLElBQUlmLE1BQU0sQ0FBQ0MsUUFBUSxFQUFFO1FBRTlCVSxTQUFTLENBQUNFLFNBQVMsR0FBRyxDQUFDO1FBQ3ZCRixTQUFTLENBQUNLLE9BQU8sR0FBR3BCLE9BQU87UUFDM0IsT0FBTyxJQUFJO01BQ2I7TUFDQSxJQUFNcUIsUUFBUSxHQUFHTixTQUFTLENBQUNULE1BQU0sQ0FBQ2EsT0FBTyxHQUFHZixNQUFNLENBQUNDLFFBQVEsQ0FBQztNQUM1RFUsU0FBUyxDQUFDSyxPQUFPLEdBQ2RGLFVBQVUsR0FBYyxDQUFDbEIsT0FBTyxHQUFJa0IsVUFBcUIsSUFBSUcsUUFBUTtNQUN4RSxPQUFPLEtBQUs7SUFDZDtJQUVBLFNBQVNDLE9BQU9BLENBQ2RQLFNBQTBCLEVBQzFCUSxLQUFhLEVBQ2JQLEdBQWMsRUFDZFEsaUJBQTZDLEVBQ3ZDO01BQ04sSUFDRUEsaUJBQWlCLElBQ2hCQSxpQkFBaUIsQ0FBcUJDLElBQUksS0FBSyxRQUFRLElBQ3ZERCxpQkFBaUIsQ0FBcUJ4QixPQUFPLEtBQUtBLE9BQU8sSUFDekR3QixpQkFBaUIsQ0FBcUJQLFNBQVMsRUFDaEQ7UUFJQUYsU0FBUyxDQUFDRSxTQUFTLEdBQUlPLGlCQUFpQixDQUFxQlAsU0FBUztRQUN0RUYsU0FBUyxDQUFDRyxVQUFVLEdBQ2xCTSxpQkFBaUIsQ0FDakJOLFVBQVU7TUFDZCxDQUFDLE1BQU07UUFDTEgsU0FBUyxDQUFDRSxTQUFTLEdBQUdELEdBQUc7UUFDekJELFNBQVMsQ0FBQ0csVUFBVSxHQUFHSyxLQUFLO01BQzlCO01BQ0FSLFNBQVMsQ0FBQ0ssT0FBTyxHQUFHRyxLQUFLO01BQ3pCLElBQUksT0FBT25CLE1BQU0sQ0FBQ0UsTUFBTSxLQUFLLFFBQVEsRUFBRTtRQUNyQ1MsU0FBUyxDQUFDVCxNQUFNLEdBQUdGLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDb0IsT0FBTyxFQUFFO01BQzVDLENBQUMsTUFBTTtRQUNMWCxTQUFTLENBQUNULE1BQU0sR0FBR0YsTUFBTSxDQUFDRSxNQUFNO01BQ2xDO0lBQ0Y7SUFFQSxPQUFPO01BQ0xtQixJQUFJLEVBQUUsUUFBUTtNQUNkRSxPQUFPLEVBQUViLE1BQU07TUFDZlEsT0FBTyxFQUFFQSxPQUErRDtNQUN4RUQsUUFBUSxFQUFFLENBQUM7TUFDWHJCLE9BQU8sRUFBUEEsT0FBTztNQUNQa0IsVUFBVSxFQUFFLENBQUM7TUFDYkQsU0FBUyxFQUFFLENBQUM7TUFDWlgsTUFBTSxFQUFFLFNBQUFBLE9BQUE7UUFBQSxPQUFNLENBQUM7TUFBQTtNQUNmYyxPQUFPLEVBQUVwQixPQUFPO01BQ2hCRSxRQUFBLEVBQUFBO0lBQ0YsQ0FBQztFQUNILENBQUMsQ0FBQztBQUNKLENBQW1CO0FBQUEwQixPQUFBLENBQUE3QixVQUFBLEdBQUFBLFVBQUEifQ==