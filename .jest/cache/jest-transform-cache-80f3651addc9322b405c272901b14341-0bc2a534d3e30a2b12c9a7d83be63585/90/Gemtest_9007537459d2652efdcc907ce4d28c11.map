{"version":3,"names":["_getJestObj","mock","Object","assign","jest","requireActual","runOnJS","fn","_jsxRuntime","require","_this","_jsxFileName","_require","react_1","__importDefault","react_native_1","react_native_reanimated_1","__1","images_1","describe","test","_ref","render","jsx","Gem","playerNumber","onPress","getByTestId","gemImage","expect","props","source","toEqual","ICONS","_ref2","onPressMock","_ref3","gestureHandler","fireEvent","toHaveBeenCalledWith"],"sources":["/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx"],"sourcesContent":["import React from 'react'\nimport {render, fireEvent} from '@testing-library/react-native'\nimport {Gesture} from 'react-native-gesture-handler'\nimport {runOnJS} from 'react-native-reanimated'\n\nimport {Gem} from '../'\nimport {ICONS} from './images' // Import the ICONS array from ./images\n\n// Mock the runOnJS function\njest.mock('react-native-reanimated', () => {\n  return {\n    ...jest.requireActual('react-native-reanimated'),\n    runOnJS: jest.fn(fn => fn()),\n  }\n})\n\ndescribe('Gem Component', () => {\n  test('should render the correct image based on playerNumber prop', () => {\n    const {getByTestId} = render(<Gem playerNumber={3} onPress={() => {}} />)\n    const gemImage = getByTestId('gem-image')\n    expect(gemImage.props.source).toEqual(ICONS[2]) // Check the correct image based on playerNumber prop\n  })\n\n  test('should render the default image if playerNumber prop is invalid', () => {\n    const {getByTestId} = render(<Gem playerNumber={10} onPress={() => {}} />)\n    const gemImage = getByTestId('gem-image')\n    expect(gemImage.props.source).toEqual(ICONS[0]) // Check the default image if playerNumber is invalid\n  })\n\n  test('should call the onPress function when pressed', () => {\n    const onPressMock = jest.fn()\n    const {getByTestId} = render(<Gem playerNumber={5} onPress={onPressMock} />)\n    const gestureHandler = getByTestId('gesture-handler')\n    fireEvent(gestureHandler, 'onGestureEvent')\n    expect(runOnJS).toHaveBeenCalledWith(onPressMock)\n  })\n})\n"],"mappings":";;AASAA,WAAA,GAAKC,IAAI,CAAC,yBAAyB,EAAE,YAAK;EACxC,OAAAC,MAAA,CAAAC,MAAA,KACKC,IAAI,CAACC,aAAa,CAAC,yBAAyB,CAAC;IAChDC,OAAO,EAAEF,IAAI,CAACG,EAAE,CAAC,UAAAA,EAAE;MAAA,OAAIA,EAAE,EAAE;IAAA;EAAC;AAEhC,CAAC,CAAC;AAAA,IAAAC,WAAA,GAAAC,OAAA;AAAA,IAAAC,KAAA;EAAAC,YAAA;AAAA,SAAAX,YAAA;EAAA,IAAAY,QAAA,GAAAH,OAAA;IAAAL,IAAA,GAAAQ,QAAA,CAAAR,IAAA;EAAAJ,WAAA,YAAAA,YAAA;IAAA,OAAAI,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;;;;;;;;;AAdF,IAAAS,OAAA,GAAAC,eAAA,CAAAL,OAAA;AACA,IAAAM,cAAA,GAAAN,OAAA;AAEA,IAAAO,yBAAA,GAAAP,OAAA;AAEA,IAAAQ,GAAA,GAAAR,OAAA;AACA,IAAAS,QAAA,GAAAT,OAAA;AAUAU,QAAQ,CAAC,eAAe,EAAE,YAAK;EAC7BC,IAAI,CAAC,4DAA4D,EAAE,YAAK;IACtE,IAAAC,IAAA,GAAsB,IAAAN,cAAA,CAAAO,MAAM,EAAC,IAAAd,WAAA,CAAAe,GAAA,EAACN,GAAA,CAAAO,GAAG;QAACC,YAAY,EAAE,CAAE;QAACC,OAAO,EAAE,SAAAA,QAAA,EAAK,CAAE;MAAE,EAAG,CAAC;MAAlEC,WAAW,GAAAN,IAAA,CAAXM,WAAW;IAClB,IAAMC,QAAQ,GAAGD,WAAW,CAAC,WAAW,CAAC;IACzCE,MAAM,CAACD,QAAQ,CAACE,KAAK,CAACC,MAAM,CAAC,CAACC,OAAO,CAACd,QAAA,CAAAe,KAAK,CAAC,CAAC,CAAC,CAAC;EACjD,CAAC,CAAC;EAEFb,IAAI,CAAC,iEAAiE,EAAE,YAAK;IAC3E,IAAAc,KAAA,GAAsB,IAAAnB,cAAA,CAAAO,MAAM,EAAC,IAAAd,WAAA,CAAAe,GAAA,EAACN,GAAA,CAAAO,GAAG;QAACC,YAAY,EAAE,EAAG;QAACC,OAAO,EAAE,SAAAA,QAAA,EAAK,CAAE;MAAE,EAAG,CAAC;MAAnEC,WAAW,GAAAO,KAAA,CAAXP,WAAW;IAClB,IAAMC,QAAQ,GAAGD,WAAW,CAAC,WAAW,CAAC;IACzCE,MAAM,CAACD,QAAQ,CAACE,KAAK,CAACC,MAAM,CAAC,CAACC,OAAO,CAACd,QAAA,CAAAe,KAAK,CAAC,CAAC,CAAC,CAAC;EACjD,CAAC,CAAC;EAEFb,IAAI,CAAC,+CAA+C,EAAE,YAAK;IACzD,IAAMe,WAAW,GAAG/B,IAAI,CAACG,EAAE,EAAE;IAC7B,IAAA6B,KAAA,GAAsB,IAAArB,cAAA,CAAAO,MAAM,EAAC,IAAAd,WAAA,CAAAe,GAAA,EAACN,GAAA,CAAAO,GAAG;QAACC,YAAY,EAAE,CAAE;QAACC,OAAO,EAAES;MAAY,EAAG,CAAC;MAArER,WAAW,GAAAS,KAAA,CAAXT,WAAW;IAClB,IAAMU,cAAc,GAAGV,WAAW,CAAC,iBAAiB,CAAC;IACrD,IAAAZ,cAAA,CAAAuB,SAAS,EAACD,cAAc,EAAE,gBAAgB,CAAC;IAC3CR,MAAM,CAACb,yBAAA,CAAAV,OAAO,CAAC,CAACiC,oBAAoB,CAACJ,WAAW,CAAC;EACnD,CAAC,CAAC;AACJ,CAAC,CAAC"}