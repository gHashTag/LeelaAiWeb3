7402f7cfbba8adf135239b9cbe08f327
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _PlatformChecker = require("../PlatformChecker");
var _commonTypes = require("../commonTypes");
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var JSReanimated = function () {
  function JSReanimated() {
    (0, _classCallCheck2.default)(this, JSReanimated);
    _defineProperty(this, "native", false);
    _defineProperty(this, "nextSensorId", 0);
    _defineProperty(this, "sensors", new Map());
    _defineProperty(this, "platform", undefined);
  }
  (0, _createClass2.default)(JSReanimated, [{
    key: "makeShareableClone",
    value: function makeShareableClone() {
      throw new Error('[Reanimated] makeShareableClone should never be called in JSReanimated.');
    }
  }, {
    key: "installCoreFunctions",
    value: function installCoreFunctions(_callGuard, _valueUnpacker) {}
  }, {
    key: "scheduleOnUI",
    value: function scheduleOnUI(worklet) {
      requestAnimationFrame(worklet);
    }
  }, {
    key: "registerEventHandler",
    value: function registerEventHandler(_eventHash, _eventHandler) {
      return -1;
    }
  }, {
    key: "unregisterEventHandler",
    value: function unregisterEventHandler(_) {}
  }, {
    key: "enableLayoutAnimations",
    value: function enableLayoutAnimations() {
      if ((0, _PlatformChecker.isWeb)()) {
        console.warn('[Reanimated] Layout Animations are not supported on web yet.');
      } else if ((0, _PlatformChecker.isChromeDebugger)()) {
        console.warn('[Reanimated] Layout Animations are no-ops when using Chrome Debugger.');
      } else if ((0, _PlatformChecker.isJest)()) {
        console.warn('[Reanimated] Layout Animations are no-ops when using Jest.');
      } else {
        console.warn('[Reanimated] Layout Animations are not supported on this configuration.');
      }
    }
  }, {
    key: "configureLayoutAnimation",
    value: function configureLayoutAnimation() {}
  }, {
    key: "registerSensor",
    value: function registerSensor(sensorType, interval, _iosReferenceFrame, eventHandler) {
      var _this = this;
      if (this.platform === undefined) {
        this.detectPlatform();
      }
      if (!(this.getSensorName(sensorType) in window)) {
        console.warn('[Reanimated] Sensor is not available.' + ((0, _PlatformChecker.isWeb)() && location.protocol !== 'https:' ? ' Make sure you use secure origin with `npx expo start --web --https`.' : '') + (this.platform === Platform.WEB_IOS ? ' For iOS web, you will also have to also grant permission in the browser: https://dev.to/li/how-to-requestpermission-for-devicemotion-and-deviceorientation-events-in-ios-13-46g2.' : ''));
        return -1;
      }
      if (this.platform === undefined) {
        this.detectPlatform();
      }
      var sensor = this.initializeSensor(sensorType, interval);
      var callback;
      if (sensorType === _commonTypes.SensorType.ROTATION) {
        callback = function callback() {
          var _sensor$quaternion = (0, _slicedToArray2.default)(sensor.quaternion, 4),
            qw = _sensor$quaternion[0],
            qx = _sensor$quaternion[1],
            qy = _sensor$quaternion[2],
            qz = _sensor$quaternion[3];
          if (_this.platform === Platform.WEB_ANDROID) {
            var _ref2 = [qz, -qy];
            qy = _ref2[0];
            qz = _ref2[1];
          }
          var yaw = Math.atan2(2.0 * (qy * qz + qw * qx), qw * qw - qx * qx - qy * qy + qz * qz);
          var pitch = Math.sin(-2.0 * (qx * qz - qw * qy));
          var roll = Math.atan2(2.0 * (qx * qy + qw * qz), qw * qw + qx * qx - qy * qy - qz * qz);
          eventHandler({
            qw: qw,
            qx: qx,
            qy: qy,
            qz: qz,
            yaw: yaw,
            pitch: pitch,
            roll: roll,
            interfaceOrientation: 0
          });
        };
      } else {
        callback = function callback() {
          var x = sensor.x,
            y = sensor.y,
            z = sensor.z;
          var _ref3 = _this.platform === Platform.WEB_ANDROID ? [-x, -y, -z] : [x, y, z];
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 3);
          x = _ref4[0];
          y = _ref4[1];
          z = _ref4[2];
          eventHandler({
            x: x,
            y: y,
            z: z,
            interfaceOrientation: 0
          });
        };
      }
      sensor.addEventListener('reading', callback);
      sensor.start();
      this.sensors.set(this.nextSensorId, sensor);
      return this.nextSensorId++;
    }
  }, {
    key: "unregisterSensor",
    value: function unregisterSensor(id) {
      var sensor = this.sensors.get(id);
      if (sensor !== undefined) {
        sensor.stop();
        this.sensors.delete(id);
      }
    }
  }, {
    key: "subscribeForKeyboardEvents",
    value: function subscribeForKeyboardEvents(_) {
      if ((0, _PlatformChecker.isWeb)()) {
        console.warn('[Reanimated] useAnimatedKeyboard is not available on web yet.');
      } else if ((0, _PlatformChecker.isChromeDebugger)()) {
        console.warn('[Reanimated] useAnimatedKeyboard is not available when using Chrome Debugger.');
      } else if ((0, _PlatformChecker.isJest)()) {
        console.warn('[Reanimated] useAnimatedKeyboard is not available when using Jest.');
      } else {
        console.warn('[Reanimated] useAnimatedKeyboard is not available on this configuration.');
      }
      return -1;
    }
  }, {
    key: "unsubscribeFromKeyboardEvents",
    value: function unsubscribeFromKeyboardEvents(_) {}
  }, {
    key: "initializeSensor",
    value: function initializeSensor(sensorType, interval) {
      var config = interval <= 0 ? {
        referenceFrame: 'device'
      } : {
        frequency: 1000 / interval
      };
      switch (sensorType) {
        case _commonTypes.SensorType.ACCELEROMETER:
          return new window.Accelerometer(config);
        case _commonTypes.SensorType.GYROSCOPE:
          return new window.Gyroscope(config);
        case _commonTypes.SensorType.GRAVITY:
          return new window.GravitySensor(config);
        case _commonTypes.SensorType.MAGNETIC_FIELD:
          return new window.Magnetometer(config);
        case _commonTypes.SensorType.ROTATION:
          return new window.AbsoluteOrientationSensor(config);
      }
    }
  }, {
    key: "getSensorName",
    value: function getSensorName(sensorType) {
      switch (sensorType) {
        case _commonTypes.SensorType.ACCELEROMETER:
          return 'Accelerometer';
        case _commonTypes.SensorType.GRAVITY:
          return 'GravitySensor';
        case _commonTypes.SensorType.GYROSCOPE:
          return 'Gyroscope';
        case _commonTypes.SensorType.MAGNETIC_FIELD:
          return 'Magnetometer';
        case _commonTypes.SensorType.ROTATION:
          return 'AbsoluteOrientationSensor';
      }
    }
  }, {
    key: "detectPlatform",
    value: function detectPlatform() {
      var userAgent = navigator.userAgent || navigator.vendor || window.opera;
      if (userAgent === undefined) {
        this.platform = Platform.UNKNOWN;
      } else if (/iPad|iPhone|iPod/.test(userAgent)) {
        this.platform = Platform.WEB_IOS;
      } else if (/android/i.test(userAgent)) {
        this.platform = Platform.WEB_ANDROID;
      } else {
        this.platform = Platform.WEB;
      }
    }
  }, {
    key: "makeSynchronizedDataHolder",
    value: function makeSynchronizedDataHolder(_valueRef) {
      throw new Error('[Reanimated] makeSynchronizedDataHolder is not available in JSReanimated.');
    }
  }, {
    key: "getDataSynchronously",
    value: function getDataSynchronously(_ref) {
      throw new Error('[Reanimated] getDataSynchronously is not available in JSReanimated.');
    }
  }, {
    key: "getViewProp",
    value: function getViewProp(_viewTag, _propName, _callback) {
      throw new Error('[Reanimated] getViewProp is not available in JSReanimated.');
    }
  }, {
    key: "configureProps",
    value: function configureProps() {
      throw new Error('[Reanimated] configureProps is not available in JSReanimated.');
    }
  }]);
  return JSReanimated;
}();
exports.default = JSReanimated;
var Platform = function (Platform) {
  Platform["WEB_IOS"] = "web iOS";
  Platform["WEB_ANDROID"] = "web Android";
  Platform["WEB"] = "web";
  Platform["UNKNOWN"] = "unknown";
  return Platform;
}(Platform || {});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,