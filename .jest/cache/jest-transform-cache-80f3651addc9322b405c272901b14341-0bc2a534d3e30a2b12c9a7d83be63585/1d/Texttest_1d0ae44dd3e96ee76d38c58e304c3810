e35122dbe50ab1fb2a99a24ccf6f37b4
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
var react_1 = __importDefault(require("react"));
var react_native_2 = require("react-native");
describe('Text Component', function () {
  it('applies the oneColor prop correctly', function () {
    var customTextStyle = {
      fontWeight: 'bold',
      fontStyle: 'italic'
    };
    var oneColor = 'blue';
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title",
        oneColor: oneColor,
        textStyle: customTextStyle
      })),
      getByTestId = _ref.getByTestId;
    var textComponent = getByTestId('text-component');
    console.log('Received Style:', textComponent.props.style);
    var receivedStyle = textComponent.props.style;
    var flatReceivedStyle = react_native_2.StyleSheet.flatten(receivedStyle);
    var hasCustomTextStyle = flatReceivedStyle.fontStyle === customTextStyle.fontStyle && flatReceivedStyle.fontWeight === customTextStyle.fontWeight;
    var hasOneColorStyle = flatReceivedStyle.color === oneColor;
    expect(hasCustomTextStyle).toBeTruthy();
    expect(hasOneColorStyle).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF9uYXRpdmVfMSIsInJlcXVpcmUiLCJfMSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWFjdF9uYXRpdmVfMiIsImRlc2NyaWJlIiwiaXQiLCJjdXN0b21UZXh0U3R5bGUiLCJmb250V2VpZ2h0IiwiZm9udFN0eWxlIiwib25lQ29sb3IiLCJfcmVmIiwicmVuZGVyIiwiX2pzeFJ1bnRpbWUiLCJqc3giLCJUZXh0IiwidGl0bGUiLCJ0ZXh0U3R5bGUiLCJnZXRCeVRlc3RJZCIsInRleHRDb21wb25lbnQiLCJjb25zb2xlIiwibG9nIiwicHJvcHMiLCJzdHlsZSIsInJlY2VpdmVkU3R5bGUiLCJmbGF0UmVjZWl2ZWRTdHlsZSIsIlN0eWxlU2hlZXQiLCJmbGF0dGVuIiwiaGFzQ3VzdG9tVGV4dFN0eWxlIiwiaGFzT25lQ29sb3JTdHlsZSIsImNvbG9yIiwiZXhwZWN0IiwidG9CZVRydXRoeSJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvVGV4dC9UZXh0LnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7cmVuZGVyfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7VGV4dCwgaFQsIHRleHRTdHlsZXN9IGZyb20gJy4vJyAvLyBSZXBsYWNlIHdpdGggeW91ciBhY3R1YWwgZmlsZSBwYXRoXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQge1N0eWxlUHJvcCwgU3R5bGVTaGVldCwgVGV4dFN0eWxlfSBmcm9tICdyZWFjdC1uYXRpdmUnXG5cbmRlc2NyaWJlKCdUZXh0IENvbXBvbmVudCcsICgpID0+IHtcbiAgLy8gICBpdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCBkZWZhdWx0IHByb3BzJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXIoPFRleHQgdGl0bGU9XCJUZXN0IFRpdGxlXCIgLz4pXG4gIC8vICAgICBleHBlY3QoZ2V0QnlUZXh0KCdUZXN0IFRpdGxlJykpLnRvQmVUcnV0aHkoKVxuICAvLyAgIH0pXG5cbiAgLy8gICBpdCgnYXBwbGllcyB0aGUgY29ycmVjdCBzdHlsZSBiYXNlZCBvbiB0aGUgXCJoXCIgcHJvcCcsICgpID0+IHtcbiAgLy8gICAgIGNvbnN0IHN0eWxlczogaFRbXSA9IFtcbiAgLy8gICAgICAgJ2gwJyxcbiAgLy8gICAgICAgJ2gxJyxcbiAgLy8gICAgICAgJ2gyJyxcbiAgLy8gICAgICAgJ2gzJyxcbiAgLy8gICAgICAgJ2g0JyxcbiAgLy8gICAgICAgJ2g1JyxcbiAgLy8gICAgICAgJ2g2JyxcbiAgLy8gICAgICAgJ2g3JyxcbiAgLy8gICAgICAgJ2g4JyxcbiAgLy8gICAgICAgJ2g5JyxcbiAgLy8gICAgICAgJ2gxMCcsXG4gIC8vICAgICAgICdoMTEnLFxuICAvLyAgICAgICAnaDEyJyxcbiAgLy8gICAgIF1cbiAgLy8gICAgIHN0eWxlcy5mb3JFYWNoKHN0eWxlID0+IHtcbiAgLy8gICAgICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8VGV4dCB0aXRsZT1cIlRlc3QgVGl0bGVcIiBoPXtzdHlsZX0gLz4pXG4gIC8vICAgICAgIGNvbnN0IHJlY2VpdmVkU3R5bGUgPSBnZXRCeVRlc3RJZCgndGV4dC1jb21wb25lbnQnKS5wcm9wcy5zdHlsZVxuICAvLyAgICAgICBleHBlY3QocmVjZWl2ZWRTdHlsZSkudG9FcXVhbChleHBlY3Qub2JqZWN0Q29udGFpbmluZyh0ZXh0U3R5bGVzW3N0eWxlXSkpXG4gIC8vICAgICB9KVxuICAvLyAgIH0pXG5cbiAgaXQoJ2FwcGxpZXMgdGhlIG9uZUNvbG9yIHByb3AgY29ycmVjdGx5JywgKCkgPT4ge1xuICAgIGNvbnN0IGN1c3RvbVRleHRTdHlsZTogVGV4dFN0eWxlID0ge2ZvbnRXZWlnaHQ6ICdib2xkJywgZm9udFN0eWxlOiAnaXRhbGljJ31cbiAgICBjb25zdCBvbmVDb2xvciA9ICdibHVlJ1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoXG4gICAgICA8VGV4dFxuICAgICAgICB0aXRsZT1cIlRlc3QgVGl0bGVcIlxuICAgICAgICBvbmVDb2xvcj17b25lQ29sb3J9XG4gICAgICAgIHRleHRTdHlsZT17Y3VzdG9tVGV4dFN0eWxlfVxuICAgICAgLz4sXG4gICAgKVxuICAgIGNvbnN0IHRleHRDb21wb25lbnQgPSBnZXRCeVRlc3RJZCgndGV4dC1jb21wb25lbnQnKVxuICAgIGNvbnNvbGUubG9nKCdSZWNlaXZlZCBTdHlsZTonLCB0ZXh0Q29tcG9uZW50LnByb3BzLnN0eWxlKVxuXG4gICAgY29uc3QgcmVjZWl2ZWRTdHlsZSA9IHRleHRDb21wb25lbnQucHJvcHMuc3R5bGUgYXMgU3R5bGVQcm9wPFRleHRTdHlsZT5cblxuICAgIGNvbnN0IGZsYXRSZWNlaXZlZFN0eWxlID0gU3R5bGVTaGVldC5mbGF0dGVuKHJlY2VpdmVkU3R5bGUpXG5cbiAgICAvLyBDaGVjayBpZiBjdXN0b21UZXh0U3R5bGUgaXMgaW4gcmVjZWl2ZWRTdHlsZVxuICAgIGNvbnN0IGhhc0N1c3RvbVRleHRTdHlsZSA9XG4gICAgICBmbGF0UmVjZWl2ZWRTdHlsZS5mb250U3R5bGUgPT09IGN1c3RvbVRleHRTdHlsZS5mb250U3R5bGUgJiZcbiAgICAgIGZsYXRSZWNlaXZlZFN0eWxlLmZvbnRXZWlnaHQgPT09IGN1c3RvbVRleHRTdHlsZS5mb250V2VpZ2h0XG5cbiAgICAvLyBDaGVjayBpZiBvbmVDb2xvciBzdHlsZSBpcyBpbiByZWNlaXZlZFN0eWxlXG4gICAgY29uc3QgaGFzT25lQ29sb3JTdHlsZSA9IGZsYXRSZWNlaXZlZFN0eWxlLmNvbG9yID09PSBvbmVDb2xvclxuXG4gICAgZXhwZWN0KGhhc0N1c3RvbVRleHRTdHlsZSkudG9CZVRydXRoeSgpXG4gICAgZXhwZWN0KGhhc09uZUNvbG9yU3R5bGUpLnRvQmVUcnV0aHkoKVxuICB9KVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLGNBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLEVBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUMsZUFBQSxDQUFBSCxPQUFBO0FBQ0EsSUFBQUksY0FBQSxHQUFBSixPQUFBO0FBRUFLLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFLO0VBNkI5QkMsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLFlBQUs7SUFDN0MsSUFBTUMsZUFBZSxHQUFjO01BQUNDLFVBQVUsRUFBRSxNQUFNO01BQUVDLFNBQVMsRUFBRTtJQUFRLENBQUM7SUFDNUUsSUFBTUMsUUFBUSxHQUFHLE1BQU07SUFDdkIsSUFBQUMsSUFBQSxHQUFzQixJQUFBWixjQUFBLENBQUFhLE1BQU0sRUFDMUIsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNiLEVBQUEsQ0FBQWMsSUFBSTtRQUNIQyxLQUFLLEVBQUMsWUFBWTtRQUNsQk4sUUFBUSxFQUFFQSxRQUFTO1FBQ25CTyxTQUFTLEVBQUVWO01BQWdCLEVBQzNCLENBQ0g7TUFOTVcsV0FBVyxHQUFBUCxJQUFBLENBQVhPLFdBQVc7SUFPbEIsSUFBTUMsYUFBYSxHQUFHRCxXQUFXLENBQUMsZ0JBQWdCLENBQUM7SUFDbkRFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQixFQUFFRixhQUFhLENBQUNHLEtBQUssQ0FBQ0MsS0FBSyxDQUFDO0lBRXpELElBQU1DLGFBQWEsR0FBR0wsYUFBYSxDQUFDRyxLQUFLLENBQUNDLEtBQTZCO0lBRXZFLElBQU1FLGlCQUFpQixHQUFHckIsY0FBQSxDQUFBc0IsVUFBVSxDQUFDQyxPQUFPLENBQUNILGFBQWEsQ0FBQztJQUczRCxJQUFNSSxrQkFBa0IsR0FDdEJILGlCQUFpQixDQUFDaEIsU0FBUyxLQUFLRixlQUFlLENBQUNFLFNBQVMsSUFDekRnQixpQkFBaUIsQ0FBQ2pCLFVBQVUsS0FBS0QsZUFBZSxDQUFDQyxVQUFVO0lBRzdELElBQU1xQixnQkFBZ0IsR0FBR0osaUJBQWlCLENBQUNLLEtBQUssS0FBS3BCLFFBQVE7SUFFN0RxQixNQUFNLENBQUNILGtCQUFrQixDQUFDLENBQUNJLFVBQVUsRUFBRTtJQUN2Q0QsTUFBTSxDQUFDRixnQkFBZ0IsQ0FBQyxDQUFDRyxVQUFVLEVBQUU7RUFDdkMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=