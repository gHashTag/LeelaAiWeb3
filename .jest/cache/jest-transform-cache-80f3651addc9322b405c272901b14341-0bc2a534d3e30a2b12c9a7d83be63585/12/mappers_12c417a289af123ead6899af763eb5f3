5ab6818bbf7cbc21e37a425cf5021c50
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMapperRegistry = createMapperRegistry;
exports.startMapper = startMapper;
exports.stopMapper = stopMapper;
var _PlatformChecker = require("./PlatformChecker");
var _threads = require("./threads");
var _utils = require("./utils");
var IS_JEST = (0, _PlatformChecker.isJest)();
function createMapperRegistry() {
  'worklet';

  var mappers = new Map();
  var sortedMappers = [];
  var runRequested = false;
  var processingMappers = false;
  function updateMappersOrder() {
    var pre = new Map();
    mappers.forEach(function (mapper) {
      if (mapper.outputs) {
        for (var output of mapper.outputs) {
          var preMappers = pre.get(output);
          if (preMappers === undefined) {
            pre.set(output, [mapper]);
          } else {
            preMappers.push(mapper);
          }
        }
      }
    });
    var visited = new Set();
    var newOrder = [];
    function dfs(mapper) {
      visited.add(mapper);
      for (var input of mapper.inputs) {
        var preMappers = pre.get(input);
        if (preMappers) {
          for (var preMapper of preMappers) {
            if (!visited.has(preMapper)) {
              dfs(preMapper);
            }
          }
        }
      }
      newOrder.push(mapper);
    }
    mappers.forEach(function (mapper) {
      if (!visited.has(mapper)) {
        dfs(mapper);
      }
    });
    sortedMappers = newOrder;
  }
  function mapperRun() {
    runRequested = false;
    if (processingMappers) {
      return;
    }
    processingMappers = true;
    if (mappers.size !== sortedMappers.length) {
      updateMappersOrder();
    }
    for (var mapper of sortedMappers) {
      if (mapper.dirty) {
        mapper.dirty = false;
        mapper.worklet();
      }
    }
    processingMappers = false;
  }
  function maybeRequestUpdates() {
    if (IS_JEST) {
      mapperRun();
    } else if (!runRequested) {
      if (processingMappers) {
        requestAnimationFrame(mapperRun);
      } else {
        queueMicrotask(mapperRun);
      }
      runRequested = true;
    }
  }
  function extractInputs(inputs, resultArray) {
    if (Array.isArray(inputs)) {
      for (var input of inputs) {
        input && extractInputs(input, resultArray);
      }
    } else if ((0, _utils.isSharedValue)(inputs)) {
      resultArray.push(inputs);
    } else if (Object.getPrototypeOf(inputs) === Object.prototype) {
      for (var element of Object.values(inputs)) {
        element && extractInputs(element, resultArray);
      }
    }
    return resultArray;
  }
  return {
    start: function start(mapperID, worklet, inputs, outputs) {
      var mapper = {
        id: mapperID,
        dirty: true,
        worklet: worklet,
        inputs: extractInputs(inputs, []),
        outputs: outputs
      };
      mappers.set(mapper.id, mapper);
      sortedMappers = [];
      for (var sv of mapper.inputs) {
        sv.addListener(mapper.id, function () {
          mapper.dirty = true;
          maybeRequestUpdates();
        });
      }
      maybeRequestUpdates();
    },
    stop: function stop(mapperID) {
      var mapper = mappers.get(mapperID);
      if (mapper) {
        mappers.delete(mapper.id);
        sortedMappers = [];
        for (var sv of mapper.inputs) {
          sv.removeListener(mapper.id);
        }
      }
    }
  };
}
var MAPPER_ID = 9999;
function startMapper(worklet) {
  var inputs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var outputs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var mapperID = MAPPER_ID += 1;
  (0, _threads.runOnUI)(function () {
    var mapperRegistry = global.__mapperRegistry;
    if (mapperRegistry === undefined) {
      mapperRegistry = global.__mapperRegistry = createMapperRegistry();
    }
    mapperRegistry.start(mapperID, worklet, inputs, outputs);
  })();
  return mapperID;
}
function stopMapper(mapperID) {
  (0, _threads.runOnUI)(function () {
    var mapperRegistry = global.__mapperRegistry;
    mapperRegistry === null || mapperRegistry === void 0 ? void 0 : mapperRegistry.stop(mapperID);
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,