124c0b58c9b94433106daccd86bf9abe
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withDecay = void 0;
var _util = require("./util");
var _PlatformChecker = require("../PlatformChecker");
var IS_WEB = (0, _PlatformChecker.isWeb)();
var withDecay = function withDecay(userConfig, callback) {
  'worklet';

  return (0, _util.defineAnimation)(0, function () {
    'worklet';

    var _config$velocity;
    var config = {
      deceleration: 0.998,
      velocityFactor: 1,
      velocity: 0,
      rubberBandFactor: 0.6
    };
    if (userConfig) {
      Object.keys(userConfig).forEach(function (key) {
        return config[key] = userConfig[key];
      });
    }
    var VELOCITY_EPS = IS_WEB ? 1 / 20 : 1;
    var SLOPE_FACTOR = 0.1;
    var decay;
    if (config.rubberBandEffect) {
      decay = function decay(animation, now) {
        var lastTimestamp = animation.lastTimestamp,
          startTimestamp = animation.startTimestamp,
          current = animation.current,
          velocity = animation.velocity;
        var deltaTime = Math.min(now - lastTimestamp, 64);
        var clampIndex = Math.abs(current - config.clamp[0]) < Math.abs(current - config.clamp[1]) ? 0 : 1;
        var derivative = 0;
        if (current < config.clamp[0] || current > config.clamp[1]) {
          derivative = current - config.clamp[clampIndex];
        }
        if (derivative !== 0) {
          animation.springActive = true;
        } else if (derivative === 0 && animation.springActive) {
          animation.current = config.clamp[clampIndex];
          return true;
        }
        var v = velocity * Math.exp(-(1 - config.deceleration) * (now - startTimestamp) * SLOPE_FACTOR) - derivative * config.rubberBandFactor;
        animation.current = current + v * config.velocityFactor * deltaTime / 1000;
        animation.velocity = v;
        animation.lastTimestamp = now;
        return false;
      };
    } else {
      decay = function decay(animation, now) {
        var lastTimestamp = animation.lastTimestamp,
          startTimestamp = animation.startTimestamp,
          initialVelocity = animation.initialVelocity,
          current = animation.current,
          velocity = animation.velocity;
        var deltaTime = Math.min(now - lastTimestamp, 64);
        var v = velocity * Math.exp(-(1 - config.deceleration) * (now - startTimestamp) * SLOPE_FACTOR);
        animation.current = current + v * config.velocityFactor * deltaTime / 1000;
        animation.velocity = v;
        animation.lastTimestamp = now;
        if (config.clamp) {
          if (initialVelocity < 0 && animation.current <= config.clamp[0]) {
            animation.current = config.clamp[0];
            return true;
          } else if (initialVelocity > 0 && animation.current >= config.clamp[1]) {
            animation.current = config.clamp[1];
            return true;
          }
        }
        return Math.abs(v) < VELOCITY_EPS;
      };
    }
    function validateConfig() {
      if (config.clamp) {
        if (!Array.isArray(config.clamp)) {
          throw Error(`config.clamp must be an array but is ${typeof config.clamp}`);
        }
        if (config.clamp.length !== 2) {
          throw Error(`clamp array must contain 2 items but is given ${config.clamp.length}`);
        }
      }
      if (config.velocityFactor <= 0) {
        throw Error(`config.velocityFactor must be greather then 0 but is ${config.velocityFactor}`);
      }
      if (config.rubberBandEffect && !config.clamp) {
        throw Error('You need to set `clamp` property when using `rubberBandEffect`.');
      }
    }
    function onStart(animation, value, now) {
      animation.current = value;
      animation.lastTimestamp = now;
      animation.startTimestamp = now;
      animation.initialVelocity = config.velocity;
      validateConfig();
    }
    return {
      onFrame: decay,
      onStart: onStart,
      callback: callback,
      velocity: (_config$velocity = config.velocity) != null ? _config$velocity : 0,
      initialVelocity: 0,
      current: 0,
      lastTimestamp: 0,
      startTimestamp: 0
    };
  });
};
exports.withDecay = withDecay;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,