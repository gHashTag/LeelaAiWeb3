adaf1d4a0975a911a1680d127f59b14b
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('./Animated', function () {
  return Object.assign({}, jest.requireActual('./Animated'), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
describe('Dice Component', function () {
  var mockProps = {
    count: 3,
    players: 4,
    disabled: false,
    canGo: true,
    isReported: false,
    updateStep: jest.fn(),
    random: jest.fn()
  };
  it('renders correctly with the provided props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('dice-component')).toBeDefined();
  });
  it('calls the random function and updateStep on press when not disabled', function () {
    var mockRandom = jest.fn();
    var mockUpdateStep = jest.fn();
    var mockProps = {
      count: 1,
      players: 2,
      disabled: false,
      canGo: true,
      isReported: false,
      updateStep: mockUpdateStep,
      random: mockRandom
    };
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref2.getByTestId;
    react_native_1.fireEvent.press(getByTestId('dice-component'));
    expect(mockRandom).toHaveBeenCalledTimes(1);
    expect(mockUpdateStep).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX2pzeFJ1bnRpbWUiLCJyZXF1aXJlIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWFjdF9uYXRpdmVfMSIsIl8xIiwiZGVzY3JpYmUiLCJtb2NrUHJvcHMiLCJjb3VudCIsInBsYXllcnMiLCJkaXNhYmxlZCIsImNhbkdvIiwiaXNSZXBvcnRlZCIsInVwZGF0ZVN0ZXAiLCJmbiIsInJhbmRvbSIsIml0IiwiX3JlZiIsInJlbmRlciIsImpzeCIsIkRpY2UiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwibW9ja1JhbmRvbSIsIm1vY2tVcGRhdGVTdGVwIiwiX3JlZjIiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvRGljZS9EaWNlLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHtEaWNlLCBEaWNlUHJvcHN9IGZyb20gJy4vJ1xuXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRIZWxwZXInKVxuamVzdC5tb2NrKCcuL0FuaW1hdGVkJywgKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnLi9BbmltYXRlZCcpLFxuICAgIGNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50OiAoY29tcG9uZW50OiBhbnkpID0+IHtcbiAgICAgIHJldHVybiBjb21wb25lbnRcbiAgICB9LFxuICB9XG59KVxuXG5kZXNjcmliZSgnRGljZSBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tQcm9wczogRGljZVByb3BzID0ge1xuICAgIGNvdW50OiAzLFxuICAgIHBsYXllcnM6IDQsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIGNhbkdvOiB0cnVlLFxuICAgIGlzUmVwb3J0ZWQ6IGZhbHNlLFxuICAgIHVwZGF0ZVN0ZXA6IGplc3QuZm4oKSxcbiAgICByYW5kb206IGplc3QuZm4oKSxcbiAgfVxuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIHRoZSBwcm92aWRlZCBwcm9wcycsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSkudG9CZURlZmluZWQoKVxuICB9KVxuXG4gIGl0KCdjYWxscyB0aGUgcmFuZG9tIGZ1bmN0aW9uIGFuZCB1cGRhdGVTdGVwIG9uIHByZXNzIHdoZW4gbm90IGRpc2FibGVkJywgKCkgPT4ge1xuICAgIC8vINCh0L7Qt9C00LDQudGC0LUg0LzQvtC60Lgg0LTQu9GPINGE0YPQvdC60YbQuNC5IHJhbmRvbSDQuCB1cGRhdGVTdGVwXG4gICAgY29uc3QgbW9ja1JhbmRvbSA9IGplc3QuZm4oKVxuICAgIGNvbnN0IG1vY2tVcGRhdGVTdGVwID0gamVzdC5mbigpXG5cbiAgICAvLyDQn9C10YDQtdC00LDQudGC0LUg0LzQvtC60Lgg0YfQtdGA0LXQtyBtb2NrUHJvcHNcbiAgICBjb25zdCBtb2NrUHJvcHMgPSB7XG4gICAgICBjb3VudDogMSxcbiAgICAgIHBsYXllcnM6IDIsXG4gICAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgICBjYW5HbzogdHJ1ZSxcbiAgICAgIGlzUmVwb3J0ZWQ6IGZhbHNlLFxuICAgICAgdXBkYXRlU3RlcDogbW9ja1VwZGF0ZVN0ZXAsXG4gICAgICByYW5kb206IG1vY2tSYW5kb20sXG4gICAgfVxuXG4gICAgLy8g0KDQtdC90LTQtdGAINC60L7QvNC/0L7QvdC10L3RgtCwINGBINC40YHQv9C+0LvRjNC30L7QstCw0L3QuNC10Lwg0LzQvtC60L7QslxuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gLz4pXG5cbiAgICAvLyDQodC40LzRg9C70LjRgNGD0LnRgtC1INC90LDQttCw0YLQuNC1INC90LAg0LrQvtC80L/QvtC90LXQvdGCXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuXG4gICAgLy8g0J/RgNC+0LLQtdGA0YzRgtC1LCDRh9GC0L4g0YTRg9C90LrRhtC40LggcmFuZG9tINC4IHVwZGF0ZVN0ZXAg0LHRi9C70Lgg0LLRi9C30LLQsNC90Ysg0L/QviDQvtC00L3QvtC80YMg0YDQsNC30YNcbiAgICBleHBlY3QobW9ja1JhbmRvbSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gICAgZXhwZWN0KG1vY2tVcGRhdGVTdGVwKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgfSlcbiAgLy8gICBpdCgnZG9lcyBub3QgY2FsbCB0aGUgcmFuZG9tIGZ1bmN0aW9uIGFuZCB1cGRhdGVTdGVwIG9uIHByZXNzIHdoZW4gZGlzYWJsZWQnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IGRpc2FibGVkPXt0cnVlfSAvPilcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMucmFuZG9tKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMudXBkYXRlU3RlcCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApXG4gIC8vICAgfSlcblxuICAvLyAgIGl0KCdkb2VzIG5vdCBjYWxsIHRoZSByYW5kb20gZnVuY3Rpb24gYW5kIHVwZGF0ZVN0ZXAgb24gcHJlc3Mgd2hlbiBjYW5HbyBpcyBmYWxzZScsICgpID0+IHtcbiAgLy8gICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gY2FuR289e2ZhbHNlfSAvPilcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMucmFuZG9tKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMudXBkYXRlU3RlcCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApXG4gIC8vICAgfSlcblxuICAvLyAgIGl0KCdkb2VzIG5vdCBjYWxsIHRoZSByYW5kb20gZnVuY3Rpb24gYW5kIHVwZGF0ZVN0ZXAgb24gcHJlc3Mgd2hlbiBpc1JlcG9ydGVkIGlzIHRydWUnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IGlzUmVwb3J0ZWQ9e3RydWV9IC8+KVxuICAvLyAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy5yYW5kb20pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy51cGRhdGVTdGVwKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICB9KVxuXG4gIC8vIEFkZCBtb3JlIHRlc3RzIGJhc2VkIG9uIHlvdXIgY29tcG9uZW50J3MgYmVoYXZpb3IgYW5kIHJlcXVpcmVtZW50c1xufSlcbiJdLCJtYXBwaW5ncyI6Ijs7QUFJQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMs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