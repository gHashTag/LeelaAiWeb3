128ada7c7e9660fff49d6158b5ef45c2
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeShareable = makeShareable;
exports.makeShareableCloneOnUIRecursive = makeShareableCloneOnUIRecursive;
exports.makeShareableCloneRecursive = makeShareableCloneRecursive;
exports.registerShareableMapping = registerShareableMapping;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _PlatformChecker = require("./PlatformChecker");
var _errors = require("./errors");
var _jsVersion = require("./platform-specific/jsVersion");
var USE_STUB_IMPLEMENTATION = (0, _PlatformChecker.shouldBeUseWeb)();
var _shareableCache = new WeakMap();
var _shareableFlag = Symbol('shareable flag');
var MAGIC_KEY = 'REANIMATED_MAGIC_KEY';
function isHostObject(value) {
  return MAGIC_KEY in value;
}
function registerShareableMapping(shareable, shareableRef) {
  if (USE_STUB_IMPLEMENTATION) {
    return;
  }
  _shareableCache.set(shareable, shareableRef || _shareableFlag);
}
function isPlainJSObject(object) {
  return Object.getPrototypeOf(object) === Object.prototype;
}
var INACCESSIBLE_OBJECT = {
  __init: function __init() {
    'worklet';

    return new Proxy({}, {
      get: function get(_, prop) {
        if (prop === '_isReanimatedSharedValue') {
          return false;
        }
        throw new Error(`Trying to access property \`${String(prop)}\` of an object which cannot be sent to the UI runtime.`);
      },
      set: function set() {
        throw new Error('Trying to write to an object which cannot be sent to the UI runtime.');
      }
    });
  }
};
var DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD = 30;
var processedObjectAtThresholdDepth;
function makeShareableCloneRecursive(value) {
  var shouldPersistRemote = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  if (USE_STUB_IMPLEMENTATION) {
    return value;
  }
  if (depth >= DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {
    if (depth === DETECT_CYCLIC_OBJECT_DEPTH_THRESHOLD) {
      processedObjectAtThresholdDepth = value;
    } else if (value === processedObjectAtThresholdDepth) {
      throw new Error('Trying to convert a cyclic object to a shareable. This is not supported.');
    }
  } else {
    processedObjectAtThresholdDepth = undefined;
  }
  var type = typeof value;
  var isTypeObject = type === 'object';
  var isTypeFunction = type === 'function';
  if ((isTypeObject || isTypeFunction) && value !== null) {
    var cached = _shareableCache.get(value);
    if (cached === _shareableFlag) {
      return value;
    } else if (cached !== undefined) {
      return cached;
    } else {
      var toAdapt;
      if (Array.isArray(value)) {
        toAdapt = value.map(function (element) {
          return makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);
        });
      } else if (isTypeFunction && value.__workletHash === undefined) {
        toAdapt = value;
      } else if (isHostObject(value)) {
        toAdapt = value;
      } else if (isPlainJSObject(value) || isTypeFunction) {
        toAdapt = {};
        if (value.__workletHash !== undefined) {
          if (__DEV__) {
            var babelVersion = value.__initData.version;
            if (babelVersion === undefined) {
              throw new Error(`[Reanimated] Unknown version of Reanimated Babel plugin.
1. Try resetting your Metro bundler cache with \`yarn start --reset-cache\`, \`npm start -- --reset-cache\` or \`expo start -c\` and run the app again.
2. Make sure that none of your dependencies contains already transformed worklets bundled with an outdated version of the Reanimated Babel plugin.
3. Using release bundle with debug build of the app is not supported.
Offending code was: \`${getWorkletCode(value)}\``);
            } else if (babelVersion !== _jsVersion.jsVersion) {
              throw new Error(`[Reanimated] Mismatch between JavaScript code version and Reanimated Babel plugin version (${_jsVersion.jsVersion} vs. ${babelVersion}).        
1. Try resetting your Metro bundler cache with \`yarn start --reset-cache\`, \`npm start -- --reset-cache\` or \`expo start -c\` and run the app again.
2. Make sure that none of your dependencies contains already transformed worklets bundled with an outdated version of the Reanimated Babel plugin.
Offending code was: \`${getWorkletCode(value)}\``);
            }
            (0, _errors.registerWorkletStackDetails)(value.__workletHash, value.__stackDetails);
            delete value.__stackDetails;
          } else if (value.__stackDetails) {
            throw new Error('[Reanimated] Using dev bundle in a release app build is not supported. Visit https://github.com/software-mansion/react-native-reanimated/issues/4737 to find more information on how to fix this issue.');
          }
          toAdapt.__initData = makeShareableCloneRecursive(value.__initData, true, depth + 1);
          delete value.__initData;
        }
        for (var _ref of Object.entries(value)) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2);
          var key = _ref2[0];
          var element = _ref2[1];
          toAdapt[key] = makeShareableCloneRecursive(element, shouldPersistRemote, depth + 1);
        }
      } else if (value instanceof RegExp) {
        var pattern = value.source;
        var flags = value.flags;
        var handle = makeShareableCloneRecursive({
          __init: function __init() {
            'worklet';

            return new RegExp(pattern, flags);
          }
        });
        registerShareableMapping(value, handle);
        return handle;
      } else {
        var inaccessibleObject = makeShareableCloneRecursive(INACCESSIBLE_OBJECT);
        _shareableCache.set(value, inaccessibleObject);
        return inaccessibleObject;
      }
      if (__DEV__) {
        Object.freeze(value);
      }
      var adopted = _NativeReanimated.default.makeShareableClone(toAdapt, shouldPersistRemote);
      _shareableCache.set(value, adopted);
      _shareableCache.set(adopted, _shareableFlag);
      return adopted;
    }
  }
  return _NativeReanimated.default.makeShareableClone(value, shouldPersistRemote);
}
var WORKLET_CODE_THRESHOLD = 255;
function getWorkletCode(value) {
  var _value$__initData;
  var code = value === null || value === void 0 ? void 0 : (_value$__initData = value.__initData) === null || _value$__initData === void 0 ? void 0 : _value$__initData.code;
  if (!code) {
    return 'unknown';
  }
  if (code.length > WORKLET_CODE_THRESHOLD) {
    return `${code.substring(0, WORKLET_CODE_THRESHOLD)}...`;
  }
  return code;
}
function makeShareableCloneOnUIRecursive(value) {
  'worklet';

  if (USE_STUB_IMPLEMENTATION) {
    return value;
  }
  function cloneRecursive(value) {
    var type = typeof value;
    if ((type === 'object' || type === 'function') && value !== null) {
      var toAdapt;
      if (Array.isArray(value)) {
        toAdapt = value.map(function (element) {
          return cloneRecursive(element);
        });
      } else if (value !== undefined) {
        toAdapt = {};
        for (var _ref3 of Object.entries(value)) {
          var _ref4 = (0, _slicedToArray2.default)(_ref3, 2);
          var key = _ref4[0];
          var element = _ref4[1];
          toAdapt[key] = cloneRecursive(element);
        }
      }
      return _makeShareableClone(toAdapt);
    }
    return _makeShareableClone(value);
  }
  return cloneRecursive(value);
}
function makeShareable(value) {
  if (USE_STUB_IMPLEMENTATION) {
    return value;
  }
  var handle = makeShareableCloneRecursive({
    __init: function __init() {
      'worklet';

      return value;
    }
  });
  registerShareableMapping(value, handle);
  return value;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,