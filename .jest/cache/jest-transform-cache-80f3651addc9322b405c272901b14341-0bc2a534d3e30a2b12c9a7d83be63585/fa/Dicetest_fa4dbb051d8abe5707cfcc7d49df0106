5ceb6acb524096a38c576fc5090e2c37
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('./Animated', function () {
  return Object.assign({}, jest.requireActual('./Animated'), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
describe('Dice Component', function () {
  var mockProps = {
    count: 3,
    players: 4,
    disabled: false,
    canGo: true,
    isReported: false,
    updateStep: jest.fn(),
    random: jest.fn()
  };
  it('renders correctly with the provided props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('dice-component')).toBeDefined();
  });
  it('calls the random function and updateStep on press when not disabled', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref2.getByTestId;
    react_native_1.fireEvent.press(getByTestId('dice-component'));
    expect(mockProps.random).toHaveBeenCalledTimes(1);
    expect(mockProps.updateStep).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX2pzeFJ1bnRpbWUiLCJyZXF1aXJlIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWFjdF9uYXRpdmVfMSIsIl8xIiwiZGVzY3JpYmUiLCJtb2NrUHJvcHMiLCJjb3VudCIsInBsYXllcnMiLCJkaXNhYmxlZCIsImNhbkdvIiwiaXNSZXBvcnRlZCIsInVwZGF0ZVN0ZXAiLCJmbiIsInJhbmRvbSIsIml0IiwiX3JlZiIsInJlbmRlciIsImpzeCIsIkRpY2UiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwiX3JlZjIiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvRGljZS9EaWNlLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHtEaWNlLCBEaWNlUHJvcHN9IGZyb20gJy4vJ1xuXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRIZWxwZXInKVxuamVzdC5tb2NrKCcuL0FuaW1hdGVkJywgKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnLi9BbmltYXRlZCcpLFxuICAgIGNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50OiAoY29tcG9uZW50OiBhbnkpID0+IHtcbiAgICAgIHJldHVybiBjb21wb25lbnRcbiAgICB9LFxuICB9XG59KVxuXG5kZXNjcmliZSgnRGljZSBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tQcm9wczogRGljZVByb3BzID0ge1xuICAgIGNvdW50OiAzLFxuICAgIHBsYXllcnM6IDQsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIGNhbkdvOiB0cnVlLFxuICAgIGlzUmVwb3J0ZWQ6IGZhbHNlLFxuICAgIHVwZGF0ZVN0ZXA6IGplc3QuZm4oKSxcbiAgICByYW5kb206IGplc3QuZm4oKSxcbiAgfVxuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIHRoZSBwcm92aWRlZCBwcm9wcycsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSkudG9CZURlZmluZWQoKVxuICB9KVxuXG4gIGl0KCdjYWxscyB0aGUgcmFuZG9tIGZ1bmN0aW9uIGFuZCB1cGRhdGVTdGVwIG9uIHByZXNzIHdoZW4gbm90IGRpc2FibGVkJywgKCkgPT4ge1xuICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gLz4pXG4gICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuICAgIGV4cGVjdChtb2NrUHJvcHMucmFuZG9tKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgICBleHBlY3QobW9ja1Byb3BzLnVwZGF0ZVN0ZXApLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICB9KVxuXG4gIC8vICAgaXQoJ2RvZXMgbm90IGNhbGwgdGhlIHJhbmRvbSBmdW5jdGlvbiBhbmQgdXBkYXRlU3RlcCBvbiBwcmVzcyB3aGVuIGRpc2FibGVkJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSBkaXNhYmxlZD17dHJ1ZX0gLz4pXG4gIC8vICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnJhbmRvbSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnVwZGF0ZVN0ZXApLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgIH0pXG5cbiAgLy8gICBpdCgnZG9lcyBub3QgY2FsbCB0aGUgcmFuZG9tIGZ1bmN0aW9uIGFuZCB1cGRhdGVTdGVwIG9uIHByZXNzIHdoZW4gY2FuR28gaXMgZmFsc2UnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IGNhbkdvPXtmYWxzZX0gLz4pXG4gIC8vICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnJhbmRvbSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnVwZGF0ZVN0ZXApLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgIH0pXG5cbiAgLy8gICBpdCgnZG9lcyBub3QgY2FsbCB0aGUgcmFuZG9tIGZ1bmN0aW9uIGFuZCB1cGRhdGVTdGVwIG9uIHByZXNzIHdoZW4gaXNSZXBvcnRlZCBpcyB0cnVlJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSBpc1JlcG9ydGVkPXt0cnVlfSAvPilcbiAgLy8gICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMucmFuZG9tKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICAgIGV4cGVjdChtb2NrUHJvcHMudXBkYXRlU3RlcCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApXG4gIC8vICAgfSlcblxuICAvLyBBZGQgbW9yZSB0ZXN0cyBiYXNlZCBvbiB5b3VyIGNvbXBvbmVudCdzIGJlaGF2aW9yIGFuZCByZXF1aXJlbWVudHNcbn0pXG4iXSwibWFwcGluZ3MiOiI7O0FBSUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHNEQUFzRCxDQUFDO0FBQ2pFRCxXQUFBLEdBQUtDLElBQUksQ0FBQyxZQUFZLEVBQUUsWUFBSztFQUMzQixPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDS0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQ25DQyx1QkFBdUIsRUFBRSxTQUFBQSx3QkFBQ0MsU0FBYyxFQUFJO01BQzFDLE9BQU9BLFNBQVM7SUFDbEI7RUFBQztBQUVMLENBQUMsQ0FBQztBQUFBLElBQUFDLFdBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLEtBQUE7RUFBQUMsWUFBQTtBQUFBLFNBQUFYLFlBQUE7RUFBQSxJQUFBWSxRQUFBLEdBQUFILE9BQUE7SUFBQUwsSUFBQSxHQUFBUSxRQUFBLENBQUFSLElBQUE7RUFBQUosV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUksSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBOzs7Ozs7Ozs7QUFaRixJQUFBUyxPQUFBLEdBQUFDLGVBQUEsQ0FBQUwsT0FBQTtBQUNBLElBQUFNLGNBQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLEVBQUEsR0FBQVAsT0FBQTtBQVlBUSxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBSztFQUM5QixJQUFNQyxTQUFTLEdBQWM7SUFDM0JDLEtBQUssRUFBRSxDQUFDO0lBQ1JDLE9BQU8sRUFBRSxDQUFDO0lBQ1ZDLFFBQVEsRUFBRSxLQUFLO0lBQ2ZDLEtBQUssRUFBRSxJQUFJO0lBQ1hDLFVBQVUsRUFBRSxLQUFLO0lBQ2pCQyxVQUFVLEVBQUVwQixJQUFJLENBQUNxQixFQUFFLEVBQUU7SUFDckJDLE1BQU0sRUFBRXRCLElBQUksQ0FBQ3FCLEVBQUU7R0FDaEI7RUFFREUsRUFBRSxDQUFDLDJDQUEyQyxFQUFFLFlBQUs7SUFDbkQsSUFBQUMsSUFBQSxHQUFzQixJQUFBYixjQUFBLENBQUFjLE1BQU0sRUFBQyxJQUFBckIsV0FBQSxDQUFBc0IsR0FBQSxFQUFDZCxFQUFBLENBQUFlLElBQUksRUFBQTdCLE1BQUEsQ0FBQUMsTUFBQSxLQUFLZSxTQUFTLENBQUMsQ0FBRyxDQUFDO01BQTlDYyxXQUFXLEdBQUFKLElBQUEsQ0FBWEksV0FBVztJQUNsQkMsTUFBTSxDQUFDRCxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDRSxXQUFXLEVBQUU7RUFDckQsQ0FBQyxDQUFDO0VBRUZQLEVBQUUsQ0FBQyxxRUFBcUUsRUFBRSxZQUFLO0lBQzdFLElBQUFRLEtBQUEsR0FBc0IsSUFBQXBCLGNBQUEsQ0FBQWMsTUFBTSxFQUFDLElBQUFyQixXQUFBLENBQUFzQixHQUFBLEVBQUNkLEVBQUEsQ0FBQWUsSUFBSSxFQUFBN0IsTUFBQSxDQUFBQyxNQUFBLEtBQUtlLFNBQVMsQ0FBQyxDQUFHLENBQUM7TUFBOUNjLFdBQVcsR0FBQUcsS0FBQSxDQUFYSCxXQUFXO0lBQ2xCakIsY0FBQSxDQUFBcUIsU0FBUyxDQUFDQyxLQUFLLENBQUNMLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzlDQyxNQUFNLENBQUNmLFNBQVMsQ0FBQ1EsTUFBTSxDQUFDLENBQUNZLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUNqREwsTUFBTSxDQUFDZixTQUFTLENBQUNNLFVBQVUsQ0FBQyxDQUFDYyxxQkFBcUIsQ0FBQyxDQUFDLENBQUM7RUFDdkQsQ0FBQyxDQUFDO0FBd0JKLENBQUMsQ0FBQyJ9