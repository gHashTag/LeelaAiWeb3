0477d9fa5e200fa3d2922472f10a0b59
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('./Animated', function () {
  return Object.assign({}, jest.requireActual('./Animated'), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
describe('Dice Component', function () {
  var mockRandom = jest.fn();
  var mockUpdateStep = jest.fn();
  var mockProps = {
    count: 1,
    players: 2,
    disabled: false,
    canGo: true,
    isReported: false,
    updateStep: mockUpdateStep,
    random: mockRandom
  };
  it('renders correctly with the provided props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('dice-component')).toBeDefined();
  });
  it('calls the random function and updateStep on press when not disabled', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref2.getByTestId;
    react_native_1.fireEvent.press(getByTestId('dice-component'));
    expect(mockRandom).toHaveBeenCalledTimes(1);
    expect(mockUpdateStep).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX2pzeFJ1bnRpbWUiLCJyZXF1aXJlIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWFjdF9uYXRpdmVfMSIsIl8xIiwiZGVzY3JpYmUiLCJtb2NrUmFuZG9tIiwiZm4iLCJtb2NrVXBkYXRlU3RlcCIsIm1vY2tQcm9wcyIsImNvdW50IiwicGxheWVycyIsImRpc2FibGVkIiwiY2FuR28iLCJpc1JlcG9ydGVkIiwidXBkYXRlU3RlcCIsInJhbmRvbSIsIml0IiwiX3JlZiIsInJlbmRlciIsImpzeCIsIkRpY2UiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwiX3JlZjIiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyJdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wbGF5cmEvTGVlbGFBaVdlYjMvc3JjL2NvbXBvbmVudHMvRGljZS9EaWNlLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7cmVuZGVyLCBmaXJlRXZlbnR9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJ1xuaW1wb3J0IHtEaWNlLCBEaWNlUHJvcHN9IGZyb20gJy4vJ1xuXG5qZXN0Lm1vY2soJ3JlYWN0LW5hdGl2ZS9MaWJyYXJpZXMvQW5pbWF0ZWQvTmF0aXZlQW5pbWF0ZWRIZWxwZXInKVxuamVzdC5tb2NrKCcuL0FuaW1hdGVkJywgKCkgPT4ge1xuICByZXR1cm4ge1xuICAgIC4uLmplc3QucmVxdWlyZUFjdHVhbCgnLi9BbmltYXRlZCcpLFxuICAgIGNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50OiAoY29tcG9uZW50OiBhbnkpID0+IHtcbiAgICAgIHJldHVybiBjb21wb25lbnRcbiAgICB9LFxuICB9XG59KVxuXG5kZXNjcmliZSgnRGljZSBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGNvbnN0IG1vY2tSYW5kb20gPSBqZXN0LmZuKClcbiAgY29uc3QgbW9ja1VwZGF0ZVN0ZXAgPSBqZXN0LmZuKClcblxuICAvLyDQn9C10YDQtdC00LDQudGC0LUg0LzQvtC60Lgg0YfQtdGA0LXQtyBtb2NrUHJvcHNcbiAgY29uc3QgbW9ja1Byb3BzID0ge1xuICAgIGNvdW50OiAxLFxuICAgIHBsYXllcnM6IDIsXG4gICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgIGNhbkdvOiB0cnVlLFxuICAgIGlzUmVwb3J0ZWQ6IGZhbHNlLFxuICAgIHVwZGF0ZVN0ZXA6IG1vY2tVcGRhdGVTdGVwLFxuICAgIHJhbmRvbTogbW9ja1JhbmRvbSxcbiAgfVxuXG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIHRoZSBwcm92aWRlZCBwcm9wcycsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuICAgIGV4cGVjdChnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSkudG9CZURlZmluZWQoKVxuICB9KVxuXG4gIGl0KCdjYWxscyB0aGUgcmFuZG9tIGZ1bmN0aW9uIGFuZCB1cGRhdGVTdGVwIG9uIHByZXNzIHdoZW4gbm90IGRpc2FibGVkJywgKCkgPT4ge1xuICAgIC8vINCh0L7Qt9C00LDQudGC0LUg0LzQvtC60Lgg0LTQu9GPINGE0YPQvdC60YbQuNC5IHJhbmRvbSDQuCB1cGRhdGVTdGVwXG5cbiAgICAvLyDQoNC10L3QtNC10YAg0LrQvtC80L/QvtC90LXQvdGC0LAg0YEg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LXQvCDQvNC+0LrQvtCyXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSAvPilcblxuICAgIC8vINCh0LjQvNGD0LvQuNGA0YPQudGC0LUg0L3QsNC20LDRgtC40LUg0L3QsCDQutC+0LzQv9C+0L3QtdC90YJcbiAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpXG5cbiAgICAvLyDQn9GA0L7QstC10YDRjNGC0LUsINGH0YLQviDRhNGD0L3QutGG0LjQuCByYW5kb20g0LggdXBkYXRlU3RlcCDQsdGL0LvQuCDQstGL0LfQstCw0L3RiyDQv9C+INC+0LTQvdC+0LzRgyDRgNCw0LfRg1xuICAgIGV4cGVjdChtb2NrUmFuZG9tKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgICBleHBlY3QobW9ja1VwZGF0ZVN0ZXApLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICB9KVxuICAvLyAgIGl0KCdkb2VzIG5vdCBjYWxsIHRoZSByYW5kb20gZnVuY3Rpb24gYW5kIHVwZGF0ZVN0ZXAgb24gcHJlc3Mgd2hlbiBkaXNhYmxlZCcsICgpID0+IHtcbiAgLy8gICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gZGlzYWJsZWQ9e3RydWV9IC8+KVxuICAvLyAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy5yYW5kb20pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy51cGRhdGVTdGVwKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICB9KVxuXG4gIC8vICAgaXQoJ2RvZXMgbm90IGNhbGwgdGhlIHJhbmRvbSBmdW5jdGlvbiBhbmQgdXBkYXRlU3RlcCBvbiBwcmVzcyB3aGVuIGNhbkdvIGlzIGZhbHNlJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSBjYW5Hbz17ZmFsc2V9IC8+KVxuICAvLyAgICAgZmlyZUV2ZW50LnByZXNzKGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy5yYW5kb20pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgICAgZXhwZWN0KG1vY2tQcm9wcy51cGRhdGVTdGVwKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMClcbiAgLy8gICB9KVxuXG4gIC8vICAgaXQoJ2RvZXMgbm90IGNhbGwgdGhlIHJhbmRvbSBmdW5jdGlvbiBhbmQgdXBkYXRlU3RlcCBvbiBwcmVzcyB3aGVuIGlzUmVwb3J0ZWQgaXMgdHJ1ZScsICgpID0+IHtcbiAgLy8gICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPERpY2Ugey4uLm1vY2tQcm9wc30gaXNSZXBvcnRlZD17dHJ1ZX0gLz4pXG4gIC8vICAgICBmaXJlRXZlbnQucHJlc3MoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnJhbmRvbSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDApXG4gIC8vICAgICBleHBlY3QobW9ja1Byb3BzLnVwZGF0ZVN0ZXApLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygwKVxuICAvLyAgIH0pXG5cbiAgLy8gQWRkIG1vcmUgdGVzdHMgYmFzZWQgb24geW91ciBjb21wb25lbnQncyBiZWhhdmlvciBhbmQgcmVxdWlyZW1lbnRzXG59KVxuIl0sIm1hcHBpbmdzIjoiOztBQUlBQSxXQUFBLEdBQUtDLElBQUksQ0FBQyxzREFBc0QsQ0FBQztBQUNqRUQsV0FBQSxHQUFLQyxJQUFJLENBQUMsWUFBWSxFQUFFLFlBQUs7RUFDM0IsT0FBQUMsTUFBQSxDQUFBQyxNQUFBLEtBQ0tDLElBQUksQ0FBQ0MsYUFBYSxDQUFDLFlBQVksQ0FBQztJQUNuQ0MsdUJBQXVCLEVBQUUsU0FBQUEsd0JBQUNDLFNBQWMsRUFBSTtNQUMxQyxPQUFPQSxTQUFTO0lBQ2xCO0VBQUM7QUFFTCxDQUFDLENBQUM7QUFBQSxJQUFBQyxXQUFBLEdBQUFDLE9BQUE7QUFBQSxJQUFBQyxLQUFBO0VBQUFDLFlBQUE7QUFBQSxTQUFBWCxZQUFBO0VBQUEsSUFBQVksUUFBQSxHQUFBSCxPQUFBO0lBQUFMLElBQUEsR0FBQVEsUUFBQSxDQUFBUixJQUFBO0VBQUFKLFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFJLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTs7Ozs7Ozs7O0FBWkYsSUFBQVMsT0FBQSxHQUFBQyxlQUFBLENBQUFMLE9BQUE7QUFDQSxJQUFBTSxjQUFBLEdBQUFOLE9BQUE7QUFDQSxJQUFBTyxFQUFBLEdBQUFQLE9BQUE7QUFZQVEsUUFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQUs7RUFDOUIsSUFBTUMsVUFBVSxHQUFHZCxJQUFJLENBQUNlLEVBQUUsRUFBRTtFQUM1QixJQUFNQyxjQUFjLEdBQUdoQixJQUFJLENBQUNlLEVBQUUsRUFBRTtFQUdoQyxJQUFNRSxTQUFTLEdBQUc7SUFDaEJDLEtBQUssRUFBRSxDQUFDO0lBQ1JDLE9BQU8sRUFBRSxDQUFDO0lBQ1ZDLFFBQVEsRUFBRSxLQUFLO0lBQ2ZDLEtBQUssRUFBRSxJQUFJO0lBQ1hDLFVBQVUsRUFBRSxLQUFLO0lBQ2pCQyxVQUFVLEVBQUVQLGNBQWM7SUFDMUJRLE1BQU0sRUFBRVY7R0FDVDtFQUVEVyxFQUFFLENBQUMsMkNBQTJDLEVBQUUsWUFBSztJQUNuRCxJQUFBQyxJQUFBLEdBQXNCLElBQUFmLGNBQUEsQ0FBQWdCLE1BQU0sRUFBQyxJQUFBdkIsV0FBQSxDQUFBd0IsR0FBQSxFQUFDaEIsRUFBQSxDQUFBaUIsSUFBSSxFQUFBL0IsTUFBQSxDQUFBQyxNQUFBLEtBQUtrQixTQUFTLENBQUMsQ0FBRyxDQUFDO01BQTlDYSxXQUFXLEdBQUFKLElBQUEsQ0FBWEksV0FBVztJQUNsQkMsTUFBTSxDQUFDRCxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDRSxXQUFXLEVBQUU7RUFDckQsQ0FBQyxDQUFDO0VBRUZQLEVBQUUsQ0FBQyxxRUFBcUUsRUFBRSxZQUFLO0lBSTdFLElBQUFRLEtBQUEsR0FBc0IsSUFBQXRCLGNBQUEsQ0FBQWdCLE1BQU0sRUFBQyxJQUFBdkIsV0FBQSxDQUFBd0IsR0FBQSxFQUFDaEIsRUFBQSxDQUFBaUIsSUFBSSxFQUFBL0IsTUFBQSxDQUFBQyxNQUFBLEtBQUtrQixTQUFTLENBQUMsQ0FBRyxDQUFDO01BQTlDYSxXQUFXLEdBQUFHLEtBQUEsQ0FBWEgsV0FBVztJQUdsQm5CLGNBQUEsQ0FBQXVCLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDTCxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUc5Q0MsTUFBTSxDQUFDakIsVUFBVSxDQUFDLENBQUNzQixxQkFBcUIsQ0FBQyxDQUFDLENBQUM7SUFDM0NMLE1BQU0sQ0FBQ2YsY0FBYyxDQUFDLENBQUNvQixxQkFBcUIsQ0FBQyxDQUFDLENBQUM7RUFDakQsQ0FBQyxDQUFDO0FBdUJKLENBQUMsQ0FBQyJ9