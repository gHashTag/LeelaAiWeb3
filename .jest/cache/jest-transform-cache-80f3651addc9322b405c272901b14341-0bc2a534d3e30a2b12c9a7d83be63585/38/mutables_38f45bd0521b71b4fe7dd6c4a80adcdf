43dbe91976f453a1440630ba239bd22c
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.makeMutable = makeMutable;
exports.makeRemote = makeRemote;
exports.makeUIMutable = makeUIMutable;
Object.defineProperty(exports, "stopMapper", {
  enumerable: true,
  get: function get() {
    return _mappers.stopMapper;
  }
});
var _NativeReanimated = _interopRequireDefault(require("./NativeReanimated"));
var _shareables = require("./shareables");
var _threads = require("./threads");
var _valueSetter = require("./valueSetter");
var _mappers = require("./mappers");
function makeUIMutable(initial, syncDataHolder) {
  'worklet';

  var listeners = new Map();
  var value = initial;
  var self = {
    set value(newValue) {
      (0, _valueSetter.valueSetter)(self, newValue);
    },
    get value() {
      return value;
    },
    set _value(newValue) {
      value = newValue;
      if (syncDataHolder) {
        _updateDataSynchronously(syncDataHolder, (0, _shareables.makeShareableCloneOnUIRecursive)(newValue));
      }
      listeners.forEach(function (listener) {
        listener(newValue);
      });
    },
    get _value() {
      return value;
    },
    addListener: function addListener(id, listener) {
      listeners.set(id, listener);
    },
    removeListener: function removeListener(id) {
      listeners.delete(id);
    },
    _animation: null,
    _isReanimatedSharedValue: true
  };
  return self;
}
function makeMutable(initial) {
  var oneWayReadsOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var value = initial;
  var syncDataHolder;
  if (!oneWayReadsOnly && _NativeReanimated.default.native) {
    syncDataHolder = _NativeReanimated.default.makeSynchronizedDataHolder((0, _shareables.makeShareableCloneRecursive)(value));
    (0, _shareables.registerShareableMapping)(syncDataHolder);
  }
  var handle = (0, _shareables.makeShareableCloneRecursive)({
    __init: function __init() {
      'worklet';

      return makeUIMutable(initial, syncDataHolder);
    }
  });
  var listeners = _NativeReanimated.default.native ? undefined : new Map();
  var mutable = {
    set value(newValue) {
      if (_NativeReanimated.default.native) {
        (0, _threads.runOnUI)(function () {
          mutable.value = newValue;
        })();
      } else {
        (0, _valueSetter.valueSetter)(mutable, newValue);
      }
    },
    get value() {
      if (syncDataHolder) {
        return _NativeReanimated.default.getDataSynchronously(syncDataHolder);
      }
      return value;
    },
    set _value(newValue) {
      if (_NativeReanimated.default.native) {
        throw new Error('Setting `_value` directly is only possible on the UI runtime');
      }
      value = newValue;
      listeners.forEach(function (listener) {
        listener(newValue);
      });
    },
    get _value() {
      if (_NativeReanimated.default.native) {
        throw new Error('Reading from `_value` directly is only possible on the UI runtime');
      }
      return value;
    },
    modify: function modify(modifier) {
      (0, _threads.runOnUI)(function () {
        mutable.value = modifier(mutable.value);
      })();
    },
    addListener: function addListener(id, listener) {
      if (_NativeReanimated.default.native) {
        throw new Error('adding listeners is only possible on the UI runtime');
      }
      listeners.set(id, listener);
    },
    removeListener: function removeListener(id) {
      if (_NativeReanimated.default.native) {
        throw new Error('removing listeners is only possible on the UI runtime');
      }
      listeners.delete(id);
    },
    _isReanimatedSharedValue: true
  };
  (0, _shareables.registerShareableMapping)(mutable, handle);
  return mutable;
}
function makeRemote() {
  var initial = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var handle = (0, _shareables.makeShareableCloneRecursive)({
    __init: function __init() {
      'worklet';

      return initial;
    }
  });
  (0, _shareables.registerShareableMapping)(initial, handle);
  return initial;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,