7ff1f231801940d9040a2773f043fde7
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
var react_1 = __importDefault(require("react"));
describe('Text Component', function () {
  it('renders correctly with default props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title"
      })),
      getByText = _ref.getByText;
    expect(getByText('Test Title')).toBeTruthy();
  });
  it('applies the correct style based on the "h" prop', function () {
    var styles = ['h0'];
    styles.forEach(function (style) {
      var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
          title: "Test Title",
          h: style
        })),
        getByTestId = _ref2.getByTestId;
      expect(getByTestId('text-component').props.style).toContainEqual(expect.objectContaining(_1.textStyles[style]));
    });
  });
  it('applies the correct color based on the "oneColor" prop', function () {
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title",
        oneColor: "red"
      })),
      getByTestId = _ref3.getByTestId;
    console.log(getByTestId('text-component').props);
    expect(getByTestId('text-component').props.style[0]).toEqual(expect.objectContaining({
      color: 'red'
    }));
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF9uYXRpdmVfMSIsInJlcXVpcmUiLCJfMSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJkZXNjcmliZSIsIml0IiwiX3JlZiIsInJlbmRlciIsIl9qc3hSdW50aW1lIiwianN4IiwiVGV4dCIsInRpdGxlIiwiZ2V0QnlUZXh0IiwiZXhwZWN0IiwidG9CZVRydXRoeSIsInN0eWxlcyIsImZvckVhY2giLCJzdHlsZSIsIl9yZWYyIiwiaCIsImdldEJ5VGVzdElkIiwicHJvcHMiLCJ0b0NvbnRhaW5FcXVhbCIsIm9iamVjdENvbnRhaW5pbmciLCJ0ZXh0U3R5bGVzIiwiX3JlZjMiLCJvbmVDb2xvciIsImNvbnNvbGUiLCJsb2ciLCJ0b0VxdWFsIiwiY29sb3IiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL1RleHQvVGV4dC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3JlbmRlcn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnXG5pbXBvcnQge1RleHQsIGhULCB0ZXh0U3R5bGVzfSBmcm9tICcuLycgLy8gUmVwbGFjZSB3aXRoIHlvdXIgYWN0dWFsIGZpbGUgcGF0aFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5kZXNjcmliZSgnVGV4dCBDb21wb25lbnQnLCAoKSA9PiB7XG4gIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIGRlZmF1bHQgcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGV4dH0gPSByZW5kZXIoPFRleHQgdGl0bGU9XCJUZXN0IFRpdGxlXCIgLz4pXG4gICAgZXhwZWN0KGdldEJ5VGV4dCgnVGVzdCBUaXRsZScpKS50b0JlVHJ1dGh5KClcbiAgfSlcblxuICBpdCgnYXBwbGllcyB0aGUgY29ycmVjdCBzdHlsZSBiYXNlZCBvbiB0aGUgXCJoXCIgcHJvcCcsICgpID0+IHtcbiAgICBjb25zdCBzdHlsZXM6IGhUW10gPSBbJ2gwJ11cbiAgICBzdHlsZXMuZm9yRWFjaChzdHlsZSA9PiB7XG4gICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxUZXh0IHRpdGxlPVwiVGVzdCBUaXRsZVwiIGg9e3N0eWxlfSAvPilcbiAgICAgIGV4cGVjdChnZXRCeVRlc3RJZCgndGV4dC1jb21wb25lbnQnKS5wcm9wcy5zdHlsZSkudG9Db250YWluRXF1YWwoXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHRleHRTdHlsZXNbc3R5bGVdKSxcbiAgICAgIClcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdhcHBsaWVzIHRoZSBjb3JyZWN0IGNvbG9yIGJhc2VkIG9uIHRoZSBcIm9uZUNvbG9yXCIgcHJvcCcsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxUZXh0IHRpdGxlPVwiVGVzdCBUaXRsZVwiIG9uZUNvbG9yPVwicmVkXCIgLz4pXG4gICAgY29uc29sZS5sb2coZ2V0QnlUZXN0SWQoJ3RleHQtY29tcG9uZW50JykucHJvcHMpXG4gICAgZXhwZWN0KGdldEJ5VGVzdElkKCd0ZXh0LWNvbXBvbmVudCcpLnByb3BzLnN0eWxlWzBdKS50b0VxdWFsKFxuICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe2NvbG9yOiAncmVkJ30pLFxuICAgIClcbiAgfSlcblxuICAvLyAgIGl0KCdhcHBsaWVzIHRoZSBjb3JyZWN0IGNvbG9yIGJhc2VkIG9uIHRoZSBcImNvbG9yc1wiIHByb3AgYW5kIHRoZW1lJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3QgY29sb3JzOiBJY29sb3JzID0ge2Rhcms6ICdkYXJrJywgbGlnaHQ6ICdsaWdodCd9XG4gIC8vICAgICAvLyBZb3Ugd291bGQgbmVlZCB0byBtb2NrIHVzZVRoZW1lIGFuZCB1c2VDb2xvclNjaGVtZSBoZXJlIHRvIHJldHVybiB0aGUgdmFsdWVzIHlvdSB3YW50IHRvIHRlc3RcbiAgLy8gICAgIGNvbnN0IHtnZXRCeVRlc3RJZH0gPSByZW5kZXIoPFRleHQgdGl0bGU9XCJUZXN0IFRpdGxlXCIgY29sb3JzPXtjb2xvcnN9IC8+KVxuICAvLyAgICAgLy8gRXhwZWN0IHRoZSBjb2xvciB0byBiZSAnbGlnaHQnIG9yICdkYXJrJyBkZXBlbmRpbmcgb24gd2hhdCB1c2VDb2xvclNjaGVtZSByZXR1cm5zXG4gIC8vICAgfSlcblxuICAvLyBBZGQgbW9yZSB0ZXN0cyBhcyBuZWVkZWQgZm9yIG90aGVyIHByb3BzXG59KVxuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQUEsY0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsRUFBQSxHQUFBRCxPQUFBO0FBQ0EsSUFBQUUsT0FBQSxHQUFBQyxlQUFBLENBQUFILE9BQUE7QUFFQUksUUFBUSxDQUFDLGdCQUFnQixFQUFFLFlBQUs7RUFDOUJDLEVBQUUsQ0FBQyxzQ0FBc0MsRUFBRSxZQUFLO0lBQzlDLElBQUFDLElBQUEsR0FBb0IsSUFBQVAsY0FBQSxDQUFBUSxNQUFNLEVBQUMsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNSLEVBQUEsQ0FBQVMsSUFBSTtRQUFDQyxLQUFLLEVBQUM7TUFBWSxFQUFHLENBQUM7TUFBaERDLFNBQVMsR0FBQU4sSUFBQSxDQUFUTSxTQUFTO0lBQ2hCQyxNQUFNLENBQUNELFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDRSxVQUFVLEVBQUU7RUFDOUMsQ0FBQyxDQUFDO0VBRUZULEVBQUUsQ0FBQyxpREFBaUQsRUFBRSxZQUFLO0lBQ3pELElBQU1VLE1BQU0sR0FBUyxDQUFDLElBQUksQ0FBQztJQUMzQkEsTUFBTSxDQUFDQyxPQUFPLENBQUMsVUFBQUMsS0FBSyxFQUFHO01BQ3JCLElBQUFDLEtBQUEsR0FBc0IsSUFBQW5CLGNBQUEsQ0FBQVEsTUFBTSxFQUFDLElBQUFDLFdBQUEsQ0FBQUMsR0FBQSxFQUFDUixFQUFBLENBQUFTLElBQUk7VUFBQ0MsS0FBSyxFQUFDLFlBQVk7VUFBQ1EsQ0FBQyxFQUFFRjtRQUFNLEVBQUcsQ0FBQztRQUE1REcsV0FBVyxHQUFBRixLQUFBLENBQVhFLFdBQVc7TUFDbEJQLE1BQU0sQ0FBQ08sV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUNDLEtBQUssQ0FBQ0osS0FBSyxDQUFDLENBQUNLLGNBQWMsQ0FDOURULE1BQU0sQ0FBQ1UsZ0JBQWdCLENBQUN0QixFQUFBLENBQUF1QixVQUFVLENBQUNQLEtBQUssQ0FBQyxDQUFDLENBQzNDO0lBQ0gsQ0FBQyxDQUFDO0VBQ0osQ0FBQyxDQUFDO0VBRUZaLEVBQUUsQ0FBQyx3REFBd0QsRUFBRSxZQUFLO0lBQ2hFLElBQUFvQixLQUFBLEdBQXNCLElBQUExQixjQUFBLENBQUFRLE1BQU0sRUFBQyxJQUFBQyxXQUFBLENBQUFDLEdBQUEsRUFBQ1IsRUFBQSxDQUFBUyxJQUFJO1FBQUNDLEtBQUssRUFBQyxZQUFZO1FBQUNlLFFBQVEsRUFBQztNQUFLLEVBQUcsQ0FBQztNQUFqRU4sV0FBVyxHQUFBSyxLQUFBLENBQVhMLFdBQVc7SUFDbEJPLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDUixXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQ0MsS0FBSyxDQUFDO0lBQ2hEUixNQUFNLENBQUNPLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDQyxLQUFLLENBQUNKLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDWSxPQUFPLENBQzFEaEIsTUFBTSxDQUFDVSxnQkFBZ0IsQ0FBQztNQUFDTyxLQUFLLEVBQUU7SUFBSyxDQUFDLENBQUMsQ0FDeEM7RUFDSCxDQUFDLENBQUM7QUFVSixDQUFDLENBQUMifQ==