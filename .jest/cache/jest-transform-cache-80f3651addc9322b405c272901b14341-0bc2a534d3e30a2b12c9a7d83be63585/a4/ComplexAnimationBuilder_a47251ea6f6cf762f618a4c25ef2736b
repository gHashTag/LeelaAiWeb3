cb97aaa0cb7100c954212e3c0bc7271f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComplexAnimationBuilder = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _animation = require("../../animation");
var _BaseAnimationBuilder2 = require("./BaseAnimationBuilder");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
var ComplexAnimationBuilder = function (_BaseAnimationBuilder) {
  (0, _inherits2.default)(ComplexAnimationBuilder, _BaseAnimationBuilder);
  var _super = _createSuper(ComplexAnimationBuilder);
  function ComplexAnimationBuilder() {
    var _this;
    (0, _classCallCheck2.default)(this, ComplexAnimationBuilder);
    _this = _super.apply(this, arguments);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "easingV", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "rotateV", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "type", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "dampingV", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "dampingRatioV", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "massV", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "stiffnessV", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "overshootClampingV", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "restDisplacementThresholdV", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "restSpeedThresholdV", void 0);
    _defineProperty((0, _assertThisInitialized2.default)(_this), "initialValues", void 0);
    return _this;
  }
  (0, _createClass2.default)(ComplexAnimationBuilder, [{
    key: "easing",
    value: function easing(easingFunction) {
      this.easingV = easingFunction;
      return this;
    }
  }, {
    key: "rotate",
    value: function rotate(degree) {
      this.rotateV = degree;
      return this;
    }
  }, {
    key: "springify",
    value: function springify(duration) {
      this.durationV = duration;
      this.type = _animation.withSpring;
      return this;
    }
  }, {
    key: "dampingRatio",
    value: function dampingRatio(_dampingRatio2) {
      this.dampingRatioV = _dampingRatio2;
      return this;
    }
  }, {
    key: "damping",
    value: function damping(_damping2) {
      this.dampingV = _damping2;
      return this;
    }
  }, {
    key: "mass",
    value: function mass(_mass2) {
      this.massV = _mass2;
      return this;
    }
  }, {
    key: "stiffness",
    value: function stiffness(_stiffness2) {
      this.stiffnessV = _stiffness2;
      return this;
    }
  }, {
    key: "overshootClamping",
    value: function overshootClamping(_overshootClamping2) {
      this.overshootClampingV = _overshootClamping2;
      return this;
    }
  }, {
    key: "restDisplacementThreshold",
    value: function restDisplacementThreshold(_restDisplacementThreshold2) {
      this.restDisplacementThresholdV = _restDisplacementThreshold2;
      return this;
    }
  }, {
    key: "restSpeedThreshold",
    value: function restSpeedThreshold(_restSpeedThreshold2) {
      this.restSpeedThresholdV = _restSpeedThreshold2;
      return this;
    }
  }, {
    key: "withInitialValues",
    value: function withInitialValues(values) {
      this.initialValues = values;
      return this;
    }
  }, {
    key: "getAnimationAndConfig",
    value: function getAnimationAndConfig() {
      var duration = this.durationV;
      var easing = this.easingV;
      var rotate = this.rotateV;
      var type = this.type ? this.type : _animation.withTiming;
      var damping = this.dampingV;
      var dampingRatio = this.dampingRatioV;
      var mass = this.massV;
      var stiffness = this.stiffnessV;
      var overshootClamping = this.overshootClampingV;
      var restDisplacementThreshold = this.restDisplacementThresholdV;
      var restSpeedThreshold = this.restSpeedThresholdV;
      var animation = type;
      var config = {};
      function maybeSetConfigValue(value, variableName) {
        if (value) {
          config[variableName] = value;
        }
      }
      if (type === _animation.withTiming) {
        maybeSetConfigValue(easing, 'easing');
      }
      [{
        variableName: 'damping',
        value: damping
      }, {
        variableName: 'dampingRatio',
        value: dampingRatio
      }, {
        variableName: 'mass',
        value: mass
      }, {
        variableName: 'stiffness',
        value: stiffness
      }, {
        variableName: 'overshootClamping',
        value: overshootClamping
      }, {
        variableName: 'restDisplacementThreshold',
        value: restDisplacementThreshold
      }, {
        variableName: 'restSpeedThreshold',
        value: restSpeedThreshold
      }, {
        variableName: 'duration',
        value: duration
      }, {
        variableName: 'rotate',
        value: rotate
      }].forEach(function (_ref) {
        var value = _ref.value,
          variableName = _ref.variableName;
        return maybeSetConfigValue(value, variableName);
      });
      return [animation, config];
    }
  }], [{
    key: "easing",
    value: function easing(easingFunction) {
      var instance = this.createInstance();
      return instance.easing(easingFunction);
    }
  }, {
    key: "rotate",
    value: function rotate(degree) {
      var instance = this.createInstance();
      return instance.rotate(degree);
    }
  }, {
    key: "springify",
    value: function springify(duration) {
      var instance = this.createInstance();
      return instance.springify(duration);
    }
  }, {
    key: "dampingRatio",
    value: function dampingRatio(_dampingRatio) {
      var instance = this.createInstance();
      return instance.dampingRatio(_dampingRatio);
    }
  }, {
    key: "damping",
    value: function damping(_damping) {
      var instance = this.createInstance();
      return instance.damping(_damping);
    }
  }, {
    key: "mass",
    value: function mass(_mass) {
      var instance = this.createInstance();
      return instance.mass(_mass);
    }
  }, {
    key: "stiffness",
    value: function stiffness(_stiffness) {
      var instance = this.createInstance();
      return instance.stiffness(_stiffness);
    }
  }, {
    key: "overshootClamping",
    value: function overshootClamping(_overshootClamping) {
      var instance = this.createInstance();
      return instance.overshootClamping(_overshootClamping);
    }
  }, {
    key: "restDisplacementThreshold",
    value: function restDisplacementThreshold(_restDisplacementThreshold) {
      var instance = this.createInstance();
      return instance.restDisplacementThreshold(_restDisplacementThreshold);
    }
  }, {
    key: "restSpeedThreshold",
    value: function restSpeedThreshold(_restSpeedThreshold) {
      var instance = this.createInstance();
      return instance.restSpeedThreshold(_restSpeedThreshold);
    }
  }, {
    key: "withInitialValues",
    value: function withInitialValues(values) {
      var instance = this.createInstance();
      return instance.withInitialValues(values);
    }
  }]);
  return ComplexAnimationBuilder;
}(_BaseAnimationBuilder2.BaseAnimationBuilder);
exports.ComplexAnimationBuilder = ComplexAnimationBuilder;
_defineProperty(ComplexAnimationBuilder, "createInstance", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,