86123602fb5d84959acd7d5a9c126daf
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useAnimatedStyle = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _react = require("react");
var _core = require("../core");
var _UpdateProps = _interopRequireWildcard(require("../UpdateProps"));
var _animation = require("../animation");
var _NativeReanimated = _interopRequireDefault(require("../NativeReanimated"));
var _useSharedValue = require("./useSharedValue");
var _utils = require("./utils");
var _ViewDescriptorsSet = require("../ViewDescriptorsSet");
var _PlatformChecker = require("../PlatformChecker");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function prepareAnimation(frameTimestamp, animatedProp, lastAnimation, lastValue) {
  'worklet';

  if (Array.isArray(animatedProp)) {
    animatedProp.forEach(function (prop, index) {
      prepareAnimation(frameTimestamp, prop, lastAnimation && lastAnimation[index], lastValue && lastValue[index]);
    });
  }
  if (typeof animatedProp === 'object' && animatedProp.onFrame) {
    var animation = animatedProp;
    var value = animation.current;
    if (lastValue !== undefined) {
      if (typeof lastValue === 'object') {
        if (lastValue.value !== undefined) {
          value = lastValue.value;
        } else if (lastValue.onFrame !== undefined) {
          if ((lastAnimation === null || lastAnimation === void 0 ? void 0 : lastAnimation.current) !== undefined) {
            value = lastAnimation.current;
          } else if ((lastValue === null || lastValue === void 0 ? void 0 : lastValue.current) !== undefined) {
            value = lastValue.current;
          }
        }
      } else {
        value = lastValue;
      }
    }
    animation.callStart = function (timestamp) {
      animation.onStart(animation, value, timestamp, lastAnimation);
    };
    animation.callStart(frameTimestamp);
    animation.callStart = null;
  } else if (typeof animatedProp === 'object') {
    Object.keys(animatedProp).forEach(function (key) {
      return prepareAnimation(frameTimestamp, animatedProp[key], lastAnimation && lastAnimation[key], lastValue && lastValue[key]);
    });
  }
}
function runAnimations(animation, timestamp, key, result, animationsActive) {
  'worklet';

  if (!animationsActive.value) {
    return true;
  }
  if (Array.isArray(animation)) {
    result[key] = [];
    var allFinished = true;
    animation.forEach(function (entry, index) {
      if (!runAnimations(entry, timestamp, index, result[key], animationsActive)) {
        allFinished = false;
      }
    });
    return allFinished;
  } else if (typeof animation === 'object' && animation.onFrame) {
    var finished = true;
    if (!animation.finished) {
      if (animation.callStart) {
        animation.callStart(timestamp);
        animation.callStart = null;
      }
      finished = animation.onFrame(animation, timestamp);
      animation.timestamp = timestamp;
      if (finished) {
        animation.finished = true;
        animation.callback && animation.callback(true);
      }
    }
    result[key] = animation.current;
    return finished;
  } else if (typeof animation === 'object') {
    result[key] = {};
    var _allFinished = true;
    Object.keys(animation).forEach(function (k) {
      if (!runAnimations(animation[k], timestamp, k, result[key], animationsActive)) {
        _allFinished = false;
      }
    });
    return _allFinished;
  } else {
    result[key] = animation;
    return true;
  }
}
function styleUpdater(viewDescriptors, updater, state, maybeViewRef, animationsActive) {
  'worklet';

  var _state$animations, _updater;
  var animations = (_state$animations = state.animations) != null ? _state$animations : {};
  var newValues = (_updater = updater()) != null ? _updater : {};
  var oldValues = state.last;
  var nonAnimatedNewValues = {};
  var hasAnimations = false;
  var frameTimestamp;
  var hasNonAnimatedValues = false;
  for (var key in newValues) {
    var value = newValues[key];
    if ((0, _utils.isAnimated)(value)) {
      frameTimestamp = global.__frameTimestamp || performance.now();
      prepareAnimation(frameTimestamp, value, animations[key], oldValues[key]);
      animations[key] = value;
      hasAnimations = true;
    } else {
      hasNonAnimatedValues = true;
      nonAnimatedNewValues[key] = value;
      delete animations[key];
    }
  }
  if (hasAnimations) {
    var frame = function frame(timestamp) {
      var animations = state.animations,
        last = state.last,
        isAnimationCancelled = state.isAnimationCancelled;
      if (isAnimationCancelled) {
        state.isAnimationRunning = false;
        return;
      }
      var updates = {};
      var allFinished = true;
      for (var propName in animations) {
        var finished = runAnimations(animations[propName], timestamp, propName, updates, animationsActive);
        if (finished) {
          last[propName] = updates[propName];
          delete animations[propName];
        } else {
          allFinished = false;
        }
      }
      if (updates) {
        (0, _UpdateProps.default)(viewDescriptors, updates, maybeViewRef);
      }
      if (!allFinished) {
        requestAnimationFrame(frame);
      } else {
        state.isAnimationRunning = false;
      }
    };
    state.animations = animations;
    if (!state.isAnimationRunning) {
      state.isAnimationCancelled = false;
      state.isAnimationRunning = true;
      frame(frameTimestamp);
    }
    if (hasNonAnimatedValues) {
      (0, _UpdateProps.default)(viewDescriptors, nonAnimatedNewValues, maybeViewRef);
    }
  } else {
    state.isAnimationCancelled = true;
    state.animations = [];
    if (!(0, _utils.shallowEqual)(oldValues, newValues)) {
      (0, _UpdateProps.default)(viewDescriptors, newValues, maybeViewRef);
    }
  }
  state.last = newValues;
}
function jestStyleUpdater(viewDescriptors, updater, state, maybeViewRef, animationsActive, animatedStyle) {
  'worklet';

  var _state$animations2, _updater2;
  var adapters = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : [];
  var animations = (_state$animations2 = state.animations) != null ? _state$animations2 : {};
  var newValues = (_updater2 = updater()) != null ? _updater2 : {};
  var oldValues = state.last;
  var hasAnimations = false;
  var frameTimestamp;
  Object.keys(animations).forEach(function (key) {
    var value = newValues[key];
    if (!(0, _utils.isAnimated)(value)) {
      delete animations[key];
    }
  });
  Object.keys(newValues).forEach(function (key) {
    var value = newValues[key];
    if ((0, _utils.isAnimated)(value)) {
      frameTimestamp = global.__frameTimestamp || performance.now();
      prepareAnimation(frameTimestamp, value, animations[key], oldValues[key]);
      animations[key] = value;
      hasAnimations = true;
    }
  });
  function frame(timestamp) {
    var animations = state.animations,
      last = state.last,
      isAnimationCancelled = state.isAnimationCancelled;
    if (isAnimationCancelled) {
      state.isAnimationRunning = false;
      return;
    }
    var updates = {};
    var allFinished = true;
    Object.keys(animations).forEach(function (propName) {
      var finished = runAnimations(animations[propName], timestamp, propName, updates, animationsActive);
      if (finished) {
        last[propName] = updates[propName];
        delete animations[propName];
      } else {
        allFinished = false;
      }
    });
    if (Object.keys(updates).length) {
      (0, _UpdateProps.updatePropsJestWrapper)(viewDescriptors, updates, maybeViewRef, animatedStyle, adapters);
    }
    if (!allFinished) {
      requestAnimationFrame(frame);
    } else {
      state.isAnimationRunning = false;
    }
  }
  if (hasAnimations) {
    state.animations = animations;
    if (!state.isAnimationRunning) {
      state.isAnimationCancelled = false;
      state.isAnimationRunning = true;
      frame(frameTimestamp);
    }
  } else {
    state.isAnimationCancelled = true;
    state.animations = [];
  }
  state.last = newValues;
  if (!(0, _utils.shallowEqual)(oldValues, newValues)) {
    (0, _UpdateProps.updatePropsJestWrapper)(viewDescriptors, newValues, maybeViewRef, animatedStyle, adapters);
  }
}
function checkSharedValueUsage(prop, currentKey) {
  if (Array.isArray(prop)) {
    for (var element of prop) {
      checkSharedValueUsage(element, currentKey);
    }
  } else if (typeof prop === 'object' && prop !== null && prop.value === undefined) {
    for (var key of Object.keys(prop)) {
      checkSharedValueUsage(prop[key], key);
    }
  } else if (currentKey !== undefined && typeof prop === 'object' && prop !== null && prop.value !== undefined) {
    throw new Error(`invalid value passed to \`${currentKey}\`, maybe you forgot to use \`.value\`?`);
  }
}
var useAnimatedStyle = function useAnimatedStyle(updater, dependencies, adapters) {
  var _updater$_closure;
  var viewsRef = (0, _ViewDescriptorsSet.makeViewsRefSet)();
  var initRef = (0, _react.useRef)();
  var inputs = Object.values((_updater$_closure = updater._closure) != null ? _updater$_closure : {});
  if ((0, _PlatformChecker.shouldBeUseWeb)()) {
    var _dependencies;
    if (!inputs.length && (_dependencies = dependencies) !== null && _dependencies !== void 0 && _dependencies.length) {
      inputs = dependencies;
    }
    if (__DEV__ && !inputs.length && !dependencies && !updater.__workletHash) {
      throw new Error(`useAnimatedStyle was used without a dependency array or Babel plugin. Please explicitly pass a dependency array, or enable the Babel/SWC plugin.

For more, see the docs: https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/web-support#web-without-a-babel-plugin`);
    }
  }
  var adaptersArray = adapters ? Array.isArray(adapters) ? adapters : [adapters] : [];
  var adaptersHash = adapters ? (0, _utils.buildWorkletsHash)(adaptersArray) : null;
  var animationsActive = (0, _useSharedValue.useSharedValue)(true);
  var animatedStyle = (0, _react.useRef)({});
  if (!dependencies) {
    dependencies = [].concat((0, _toConsumableArray2.default)(inputs), [updater.__workletHash]);
  } else {
    dependencies.push(updater.__workletHash);
  }
  adaptersHash && dependencies.push(adaptersHash);
  if (!initRef.current) {
    var initialStyle = (0, _animation.initialUpdaterRun)(updater);
    (0, _utils.validateAnimatedStyles)(initialStyle);
    initRef.current = {
      initial: {
        value: initialStyle,
        updater: updater
      },
      remoteState: (0, _core.makeRemote)({
        last: initialStyle,
        animations: {},
        isAnimationCancelled: false,
        isAnimationRunning: false
      }),
      viewDescriptors: (0, _ViewDescriptorsSet.makeViewDescriptorsSet)()
    };
  }
  var _initRef$current = initRef.current,
    initial = _initRef$current.initial,
    remoteState = _initRef$current.remoteState,
    viewDescriptors = _initRef$current.viewDescriptors;
  var sharableViewDescriptors = viewDescriptors.sharableViewDescriptors;
  var maybeViewRef = _NativeReanimated.default.native ? undefined : viewsRef;
  dependencies.push(sharableViewDescriptors);
  (0, _react.useEffect)(function () {
    var fun;
    var updaterFn = updater;
    if (adapters) {
      updaterFn = function updaterFn() {
        'worklet';

        var newValues = updater();
        adaptersArray.forEach(function (adapter) {
          adapter(newValues);
        });
        return newValues;
      };
    }
    if ((0, _PlatformChecker.isJest)()) {
      fun = function fun() {
        'worklet';

        jestStyleUpdater(sharableViewDescriptors, updater, remoteState, maybeViewRef, animationsActive, animatedStyle, adaptersArray);
      };
    } else {
      fun = function fun() {
        'worklet';

        styleUpdater(sharableViewDescriptors, updaterFn, remoteState, maybeViewRef, animationsActive);
      };
    }
    var mapperId = (0, _core.startMapper)(fun, inputs);
    return function () {
      (0, _core.stopMapper)(mapperId);
    };
  }, dependencies);
  (0, _react.useEffect)(function () {
    animationsActive.value = true;
    return function () {
      animationsActive.value = false;
    };
  }, []);
  checkSharedValueUsage(initial.value);
  if ((0, _PlatformChecker.isJest)()) {
    return {
      viewDescriptors: viewDescriptors,
      initial: initial,
      viewsRef: viewsRef,
      animatedStyle: animatedStyle
    };
  } else {
    return {
      viewDescriptors: viewDescriptors,
      initial: initial,
      viewsRef: viewsRef
    };
  }
};
exports.useAnimatedStyle = useAnimatedStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,