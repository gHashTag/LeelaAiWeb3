e71dd4667fd4e921ba1a1fb4325f230f
"use strict";

var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx";
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
var react_1 = __importDefault(require("react"));
describe('Text Component', function () {
  it('applies the oneColor prop correctly', function () {
    var customTextStyle = {
      fontWeight: 'bold',
      fontStyle: 'italic'
    };
    var oneColor = 'blue';
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Text, {
        title: "Test Title",
        oneColor: oneColor,
        textStyle: customTextStyle
      })),
      getByTestId = _ref.getByTestId;
    var textComponent = getByTestId('text-component');
    console.log('Received Style:', textComponent.props.style);
    var receivedStyle = textComponent.props.style;
    var hasCustomTextStyle = receivedStyle.some(function (style) {
      return style.fontStyle === customTextStyle.fontStyle && style.fontWeight === customTextStyle.fontWeight;
    });
    var hasOneColorStyle = receivedStyle.some(function (style) {
      return style.color === oneColor;
    });
    expect(hasCustomTextStyle).toBeTruthy();
    expect(hasOneColorStyle).toBeTruthy();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF9uYXRpdmVfMSIsInJlcXVpcmUiLCJfMSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJkZXNjcmliZSIsIml0IiwiY3VzdG9tVGV4dFN0eWxlIiwiZm9udFdlaWdodCIsImZvbnRTdHlsZSIsIm9uZUNvbG9yIiwiX3JlZiIsInJlbmRlciIsIl9qc3hSdW50aW1lIiwianN4IiwiVGV4dCIsInRpdGxlIiwidGV4dFN0eWxlIiwiZ2V0QnlUZXN0SWQiLCJ0ZXh0Q29tcG9uZW50IiwiY29uc29sZSIsImxvZyIsInByb3BzIiwic3R5bGUiLCJyZWNlaXZlZFN0eWxlIiwiaGFzQ3VzdG9tVGV4dFN0eWxlIiwic29tZSIsImhhc09uZUNvbG9yU3R5bGUiLCJjb2xvciIsImV4cGVjdCIsInRvQmVUcnV0aHkiXSwic291cmNlcyI6WyIvVXNlcnMvcGxheXJhL0xlZWxhQWlXZWIzL3NyYy9jb21wb25lbnRzL1RleHQvVGV4dC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3JlbmRlcn0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9yZWFjdC1uYXRpdmUnXG5pbXBvcnQge1RleHQsIGhULCB0ZXh0U3R5bGVzfSBmcm9tICcuLycgLy8gUmVwbGFjZSB3aXRoIHlvdXIgYWN0dWFsIGZpbGUgcGF0aFxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtUZXh0U3R5bGV9IGZyb20gJ3JlYWN0LW5hdGl2ZSdcblxuZGVzY3JpYmUoJ1RleHQgQ29tcG9uZW50JywgKCkgPT4ge1xuICAvLyAgIGl0KCdyZW5kZXJzIGNvcnJlY3RseSB3aXRoIGRlZmF1bHQgcHJvcHMnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCB7Z2V0QnlUZXh0fSA9IHJlbmRlcig8VGV4dCB0aXRsZT1cIlRlc3QgVGl0bGVcIiAvPilcbiAgLy8gICAgIGV4cGVjdChnZXRCeVRleHQoJ1Rlc3QgVGl0bGUnKSkudG9CZVRydXRoeSgpXG4gIC8vICAgfSlcblxuICAvLyAgIGl0KCdhcHBsaWVzIHRoZSBjb3JyZWN0IHN0eWxlIGJhc2VkIG9uIHRoZSBcImhcIiBwcm9wJywgKCkgPT4ge1xuICAvLyAgICAgY29uc3Qgc3R5bGVzOiBoVFtdID0gW1xuICAvLyAgICAgICAnaDAnLFxuICAvLyAgICAgICAnaDEnLFxuICAvLyAgICAgICAnaDInLFxuICAvLyAgICAgICAnaDMnLFxuICAvLyAgICAgICAnaDQnLFxuICAvLyAgICAgICAnaDUnLFxuICAvLyAgICAgICAnaDYnLFxuICAvLyAgICAgICAnaDcnLFxuICAvLyAgICAgICAnaDgnLFxuICAvLyAgICAgICAnaDknLFxuICAvLyAgICAgICAnaDEwJyxcbiAgLy8gICAgICAgJ2gxMScsXG4gIC8vICAgICAgICdoMTInLFxuICAvLyAgICAgXVxuICAvLyAgICAgc3R5bGVzLmZvckVhY2goc3R5bGUgPT4ge1xuICAvLyAgICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxUZXh0IHRpdGxlPVwiVGVzdCBUaXRsZVwiIGg9e3N0eWxlfSAvPilcbiAgLy8gICAgICAgY29uc3QgcmVjZWl2ZWRTdHlsZSA9IGdldEJ5VGVzdElkKCd0ZXh0LWNvbXBvbmVudCcpLnByb3BzLnN0eWxlXG4gIC8vICAgICAgIGV4cGVjdChyZWNlaXZlZFN0eWxlKS50b0VxdWFsKGV4cGVjdC5vYmplY3RDb250YWluaW5nKHRleHRTdHlsZXNbc3R5bGVdKSlcbiAgLy8gICAgIH0pXG4gIC8vICAgfSlcblxuICBpdCgnYXBwbGllcyB0aGUgb25lQ29sb3IgcHJvcCBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgY29uc3QgY3VzdG9tVGV4dFN0eWxlOiBUZXh0U3R5bGUgPSB7Zm9udFdlaWdodDogJ2JvbGQnLCBmb250U3R5bGU6ICdpdGFsaWMnfVxuICAgIGNvbnN0IG9uZUNvbG9yID0gJ2JsdWUnXG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcihcbiAgICAgIDxUZXh0XG4gICAgICAgIHRpdGxlPVwiVGVzdCBUaXRsZVwiXG4gICAgICAgIG9uZUNvbG9yPXtvbmVDb2xvcn1cbiAgICAgICAgdGV4dFN0eWxlPXtjdXN0b21UZXh0U3R5bGV9XG4gICAgICAvPixcbiAgICApXG4gICAgY29uc3QgdGV4dENvbXBvbmVudCA9IGdldEJ5VGVzdElkKCd0ZXh0LWNvbXBvbmVudCcpXG4gICAgY29uc29sZS5sb2coJ1JlY2VpdmVkIFN0eWxlOicsIHRleHRDb21wb25lbnQucHJvcHMuc3R5bGUpXG5cbiAgICBjb25zdCByZWNlaXZlZFN0eWxlID0gdGV4dENvbXBvbmVudC5wcm9wcy5zdHlsZSBhcyBUZXh0U3R5bGVbXVxuXG4gICAgLy8gQ2hlY2sgaWYgY3VzdG9tVGV4dFN0eWxlIGlzIGluIHJlY2VpdmVkU3R5bGVcbiAgICBjb25zdCBoYXNDdXN0b21UZXh0U3R5bGUgPSByZWNlaXZlZFN0eWxlLnNvbWUoc3R5bGUgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgc3R5bGUuZm9udFN0eWxlID09PSBjdXN0b21UZXh0U3R5bGUuZm9udFN0eWxlICYmXG4gICAgICAgIHN0eWxlLmZvbnRXZWlnaHQgPT09IGN1c3RvbVRleHRTdHlsZS5mb250V2VpZ2h0XG4gICAgICApXG4gICAgfSlcblxuICAgIC8vIENoZWNrIGlmIG9uZUNvbG9yIHN0eWxlIGlzIGluIHJlY2VpdmVkU3R5bGVcbiAgICBjb25zdCBoYXNPbmVDb2xvclN0eWxlID0gcmVjZWl2ZWRTdHlsZS5zb21lKHN0eWxlID0+IHtcbiAgICAgIHJldHVybiBzdHlsZS5jb2xvciA9PT0gb25lQ29sb3JcbiAgICB9KVxuXG4gICAgZXhwZWN0KGhhc0N1c3RvbVRleHRTdHlsZSkudG9CZVRydXRoeSgpXG4gICAgZXhwZWN0KGhhc09uZUNvbG9yU3R5bGUpLnRvQmVUcnV0aHkoKVxuICB9KVxufSlcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLGNBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLEVBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUMsZUFBQSxDQUFBSCxPQUFBO0FBR0FJLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxZQUFLO0VBNkI5QkMsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLFlBQUs7SUFDN0MsSUFBTUMsZUFBZSxHQUFjO01BQUNDLFVBQVUsRUFBRSxNQUFNO01BQUVDLFNBQVMsRUFBRTtJQUFRLENBQUM7SUFDNUUsSUFBTUMsUUFBUSxHQUFHLE1BQU07SUFDdkIsSUFBQUMsSUFBQSxHQUFzQixJQUFBWCxjQUFBLENBQUFZLE1BQU0sRUFDMUIsSUFBQUMsV0FBQSxDQUFBQyxHQUFBLEVBQUNaLEVBQUEsQ0FBQWEsSUFBSTtRQUNIQyxLQUFLLEVBQUMsWUFBWTtRQUNsQk4sUUFBUSxFQUFFQSxRQUFTO1FBQ25CTyxTQUFTLEVBQUVWO01BQWdCLEVBQzNCLENBQ0g7TUFOTVcsV0FBVyxHQUFBUCxJQUFBLENBQVhPLFdBQVc7SUFPbEIsSUFBTUMsYUFBYSxHQUFHRCxXQUFXLENBQUMsZ0JBQWdCLENBQUM7SUFDbkRFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLGlCQUFpQixFQUFFRixhQUFhLENBQUNHLEtBQUssQ0FBQ0MsS0FBSyxDQUFDO0lBRXpELElBQU1DLGFBQWEsR0FBR0wsYUFBYSxDQUFDRyxLQUFLLENBQUNDLEtBQW9CO0lBRzlELElBQU1FLGtCQUFrQixHQUFHRCxhQUFhLENBQUNFLElBQUksQ0FBQyxVQUFBSCxLQUFLLEVBQUc7TUFDcEQsT0FDRUEsS0FBSyxDQUFDZCxTQUFTLEtBQUtGLGVBQWUsQ0FBQ0UsU0FBUyxJQUM3Q2MsS0FBSyxDQUFDZixVQUFVLEtBQUtELGVBQWUsQ0FBQ0MsVUFBVTtJQUVuRCxDQUFDLENBQUM7SUFHRixJQUFNbUIsZ0JBQWdCLEdBQUdILGFBQWEsQ0FBQ0UsSUFBSSxDQUFDLFVBQUFILEtBQUssRUFBRztNQUNsRCxPQUFPQSxLQUFLLENBQUNLLEtBQUssS0FBS2xCLFFBQVE7SUFDakMsQ0FBQyxDQUFDO0lBRUZtQixNQUFNLENBQUNKLGtCQUFrQixDQUFDLENBQUNLLFVBQVUsRUFBRTtJQUN2Q0QsTUFBTSxDQUFDRixnQkFBZ0IsQ0FBQyxDQUFDRyxVQUFVLEVBQUU7RUFDdkMsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=