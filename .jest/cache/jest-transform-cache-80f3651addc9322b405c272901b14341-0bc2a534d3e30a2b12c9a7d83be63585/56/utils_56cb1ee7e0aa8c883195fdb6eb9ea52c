0dd844566edee1968b796abf93990e48
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.areDependenciesEqual = areDependenciesEqual;
exports.buildDependencies = buildDependencies;
exports.buildWorkletsHash = buildWorkletsHash;
exports.hasColorProps = hasColorProps;
exports.isAnimated = isAnimated;
exports.parseColors = parseColors;
exports.shallowEqual = shallowEqual;
exports.validateAnimatedStyles = exports.useHandler = exports.useEvent = void 0;
var _react = require("react");
var _Colors = require("../Colors");
var _core = require("../core");
var _PlatformChecker = require("../PlatformChecker");
var _UpdateProps = require("../UpdateProps");
var _WorkletEventHandler = _interopRequireDefault(require("../WorkletEventHandler"));
var useEvent = function useEvent(handler) {
  var eventNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var rebuild = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var initRef = (0, _react.useRef)(null);
  if (initRef.current === null) {
    initRef.current = new _WorkletEventHandler.default(handler, eventNames);
  } else if (rebuild) {
    initRef.current.updateWorklet(handler);
  }
  return initRef;
};
exports.useEvent = useEvent;
var useHandler = function useHandler(handlers, dependencies) {
  var initRef = (0, _react.useRef)(null);
  if (initRef.current === null) {
    initRef.current = {
      context: (0, _core.makeRemote)({}),
      savedDependencies: []
    };
  }
  (0, _react.useEffect)(function () {
    return function () {
      initRef.current = null;
    };
  }, []);
  var _initRef$current = initRef.current,
    context = _initRef$current.context,
    savedDependencies = _initRef$current.savedDependencies;
  dependencies = buildDependencies(dependencies, handlers);
  var doDependenciesDiffer = !areDependenciesEqual(dependencies, savedDependencies);
  initRef.current.savedDependencies = dependencies;
  var useWeb = (0, _PlatformChecker.isWeb)() || (0, _PlatformChecker.isJest)();
  return {
    context: context,
    doDependenciesDiffer: doDependenciesDiffer,
    useWeb: useWeb
  };
};
exports.useHandler = useHandler;
function buildWorkletsHash(handlers) {
  return Object.values(handlers).reduce(function (acc, worklet) {
    return acc + worklet.__workletHash.toString();
  }, '');
}
function buildDependencies(dependencies, handlers) {
  var handlersList = Object.values(handlers).filter(function (handler) {
    return handler !== undefined;
  });
  if (!dependencies) {
    dependencies = handlersList.map(function (handler) {
      return {
        workletHash: handler.__workletHash,
        closure: handler._closure
      };
    });
  } else {
    dependencies.push(buildWorkletsHash(handlersList));
  }
  return dependencies;
}
function areDependenciesEqual(nextDeps, prevDeps) {
  function is(x, y) {
    return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
  }
  var objectIs = typeof Object.is === 'function' ? Object.is : is;
  function areHookInputsEqual(nextDeps, prevDeps) {
    if (!nextDeps || !prevDeps || prevDeps.length !== nextDeps.length) {
      return false;
    }
    for (var i = 0; i < prevDeps.length; ++i) {
      if (!objectIs(nextDeps[i], prevDeps[i])) {
        return false;
      }
    }
    return true;
  }
  return areHookInputsEqual(nextDeps, prevDeps);
}
function hasColorProps(updates) {
  var colorPropsSet = new Set(_UpdateProps.colorProps);
  for (var key in updates) {
    if (colorPropsSet.has(key)) {
      return true;
    }
  }
  return false;
}
function parseColors(updates) {
  'worklet';

  for (var key in updates) {
    if (_UpdateProps.colorProps.indexOf(key) !== -1) {
      var processedColor = (0, _Colors.processColor)(updates[key]);
      if (processedColor !== undefined) {
        updates[key] = processedColor;
      }
    }
  }
}
function isAnimated(prop) {
  'worklet';

  if (Array.isArray(prop)) {
    return prop.some(isAnimated);
  } else if (typeof prop === 'object' && prop !== null) {
    if (prop.onFrame !== undefined) {
      return true;
    } else {
      return Object.values(prop).some(isAnimated);
    }
  }
  return false;
}
function shallowEqual(a, b) {
  'worklet';

  var aKeys = Object.keys(a);
  var bKeys = Object.keys(b);
  if (aKeys.length !== bKeys.length) {
    return false;
  }
  for (var i = 0; i < aKeys.length; i++) {
    if (a[aKeys[i]] !== b[aKeys[i]]) {
      return false;
    }
  }
  return true;
}
var validateAnimatedStyles = function validateAnimatedStyles(styles) {
  'worklet';

  if (typeof styles !== 'object') {
    throw new Error(`useAnimatedStyle has to return an object, found ${typeof styles} instead`);
  } else if (Array.isArray(styles)) {
    throw new Error('useAnimatedStyle has to return an object and cannot return static styles combined with dynamic ones. Please do merging where a component receives props.');
  }
};
exports.validateAnimatedStyles = validateAnimatedStyles;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,