1ecb3e294ae90b0db4848c394d38cbe5
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('./Animated', function () {
  return Object.assign({}, jest.requireActual('./Animated'), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
describe('Dice Component', function () {
  var mockProps;
  beforeEach(function () {
    mockProps = {
      count: 1,
      players: 2,
      disabled: false,
      canGo: true,
      isReported: false,
      updateStep: jest.fn(),
      random: jest.fn()
    };
    jest.useFakeTimers();
  });
  afterEach(function () {
    jest.useRealTimers();
  });
  it('renders correctly with the provided props', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    expect(getByTestId('dice-component')).toBeDefined();
  });
  it('calls the random function and updateStep on press when not disabled', function () {
    var _ref2 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref2.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.random).toHaveBeenCalledTimes(1);
    expect(mockProps.updateStep).toHaveBeenCalledTimes(1);
  });
  it('does not call the random function and updateStep on press when disabled', function () {
    mockProps.disabled = true;
    var _ref3 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref3.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.random).not.toHaveBeenCalled();
    expect(mockProps.updateStep).not.toHaveBeenCalled();
  });
  it('does not call the random function and updateStep on press when canGo is false', function () {
    mockProps.canGo = false;
    var _ref4 = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref4.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
      jest.runAllTimers();
    });
    expect(mockProps.random).not.toHaveBeenCalled();
    expect(mockProps.updateStep).not.toHaveBeenCalled();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX2pzeFJ1bnRpbWUiLCJyZXF1aXJlIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWFjdF9uYXRpdmVfMSIsIl8xIiwiZGVzY3JpYmUiLCJtb2NrUHJvcHMiLCJiZWZvcmVFYWNoIiwiY291bnQiLCJwbGF5ZXJzIiwiZGlzYWJsZWQiLCJjYW5HbyIsImlzUmVwb3J0ZWQiLCJ1cGRhdGVTdGVwIiwiZm4iLCJyYW5kb20iLCJ1c2VGYWtlVGltZXJzIiwiYWZ0ZXJFYWNoIiwidXNlUmVhbFRpbWVycyIsIml0IiwiX3JlZiIsInJlbmRlciIsImpzeCIsIkRpY2UiLCJnZXRCeVRlc3RJZCIsImV4cGVjdCIsInRvQmVEZWZpbmVkIiwiX3JlZjIiLCJhY3QiLCJmaXJlRXZlbnQiLCJwcmVzcyIsInJ1bkFsbFRpbWVycyIsInRvSGF2ZUJlZW5DYWxsZWRUaW1lcyIsIl9yZWYzIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIl9yZWY0Il0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9EaWNlL0RpY2UudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudCwgYWN0fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7RGljZSwgRGljZVByb3BzfSBmcm9tICcuLydcblxuamVzdC5tb2NrKCdyZWFjdC1uYXRpdmUvTGlicmFyaWVzL0FuaW1hdGVkL05hdGl2ZUFuaW1hdGVkSGVscGVyJylcbmplc3QubW9jaygnLi9BbmltYXRlZCcsICgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICAuLi5qZXN0LnJlcXVpcmVBY3R1YWwoJy4vQW5pbWF0ZWQnKSxcbiAgICBjcmVhdGVBbmltYXRlZENvbXBvbmVudDogKGNvbXBvbmVudDogYW55KSA9PiB7XG4gICAgICByZXR1cm4gY29tcG9uZW50XG4gICAgfSxcbiAgfVxufSlcblxuZGVzY3JpYmUoJ0RpY2UgQ29tcG9uZW50JywgKCkgPT4ge1xuICBsZXQgbW9ja1Byb3BzOiBEaWNlUHJvcHNcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgbW9ja1Byb3BzID0ge1xuICAgICAgY291bnQ6IDEsXG4gICAgICBwbGF5ZXJzOiAyLFxuICAgICAgZGlzYWJsZWQ6IGZhbHNlLFxuICAgICAgY2FuR286IHRydWUsXG4gICAgICBpc1JlcG9ydGVkOiBmYWxzZSxcbiAgICAgIHVwZGF0ZVN0ZXA6IGplc3QuZm4oKSxcbiAgICAgIHJhbmRvbTogamVzdC5mbigpLFxuICAgIH1cbiAgICBqZXN0LnVzZUZha2VUaW1lcnMoKVxuICB9KVxuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC51c2VSZWFsVGltZXJzKClcbiAgfSlcblxuICBpdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCB0aGUgcHJvdmlkZWQgcHJvcHMnLCAoKSA9PiB7XG4gICAgY29uc3Qge2dldEJ5VGVzdElkfSA9IHJlbmRlcig8RGljZSB7Li4ubW9ja1Byb3BzfSAvPilcbiAgICBleHBlY3QoZ2V0QnlUZXN0SWQoJ2RpY2UtY29tcG9uZW50JykpLnRvQmVEZWZpbmVkKClcbiAgfSlcblxuICBpdCgnY2FsbHMgdGhlIHJhbmRvbSBmdW5jdGlvbiBhbmQgdXBkYXRlU3RlcCBvbiBwcmVzcyB3aGVuIG5vdCBkaXNhYmxlZCcsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKClcbiAgICB9KVxuXG4gICAgZXhwZWN0KG1vY2tQcm9wcy5yYW5kb20pLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKVxuICAgIGV4cGVjdChtb2NrUHJvcHMudXBkYXRlU3RlcCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gIH0pXG5cbiAgaXQoJ2RvZXMgbm90IGNhbGwgdGhlIHJhbmRvbSBmdW5jdGlvbiBhbmQgdXBkYXRlU3RlcCBvbiBwcmVzcyB3aGVuIGRpc2FibGVkJywgKCkgPT4ge1xuICAgIG1vY2tQcm9wcy5kaXNhYmxlZCA9IHRydWVcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKClcbiAgICB9KVxuXG4gICAgZXhwZWN0KG1vY2tQcm9wcy5yYW5kb20pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKClcbiAgICBleHBlY3QobW9ja1Byb3BzLnVwZGF0ZVN0ZXApLm5vdC50b0hhdmVCZWVuQ2FsbGVkKClcbiAgfSlcblxuICBpdCgnZG9lcyBub3QgY2FsbCB0aGUgcmFuZG9tIGZ1bmN0aW9uIGFuZCB1cGRhdGVTdGVwIG9uIHByZXNzIHdoZW4gY2FuR28gaXMgZmFsc2UnLCAoKSA9PiB7XG4gICAgbW9ja1Byb3BzLmNhbkdvID0gZmFsc2UgLy8g0KPRgdGC0LDQvdCw0LLQu9C40LLQsNC10LwgY2FuR28g0LIgZmFsc2VcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgICAgIGplc3QucnVuQWxsVGltZXJzKClcbiAgICB9KVxuXG4gICAgZXhwZWN0KG1vY2tQcm9wcy5yYW5kb20pLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCkgLy8g0KPQsdC10LbQtNCw0LXQvNGB0Y8sINGH0YLQviByYW5kb20oKSDQvdC1INCy0YvQt9GL0LLQsNC10YLRgdGPXG4gICAgZXhwZWN0KG1vY2tQcm9wcy51cGRhdGVTdGVwKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpIC8vINCj0LHQtdC20LTQsNC10LzRgdGPLCDRh9GC0L4gdXBkYXRlU3RlcCgpINC90LUg0LLRi9C30YvQstCw0LXRgtGB0Y9cbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7O0FBSUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHNEQUFzRCxDQUFDO0FBQ2pFRCxXQUFBLEdBQUtDLElBQUksQ0FBQyxZQUFZLEVBQUUsWUFBSztFQUMzQixPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDS0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQ25DQyx1QkFBdUIsRUFBRSxTQUFBQSx3QkFBQ0MsU0FBYyxFQUFJO01BQzFDLE9BQU9BLFNBQVM7SUFDbEI7RUFBQztBQUVMLENBQUMsQ0FBQztBQUFBLElBQUFDLFdBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLEtBQUE7RUFBQUMsWUFBQTtBQUFBLFNBQUFYLFlBQUE7RUFBQSxJQUFBWSxRQUFBLEdBQUFILE9BQUE7SUFBQUwsSUFBQSxHQUFBUSxRQUFBLENBQUFSLElBQUE7RUFBQUosV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUksSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBOzs7Ozs7Ozs7QUFaRixJQUFBUyxPQUFBLEdBQUFDLGVBQUEsQ0FBQUwsT0FBQTtBQUNBLElBQUFNLGNBQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLEVBQUEsR0FBQVAsT0FBQTtBQVlBUSxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBSztFQUM5QixJQUFJQyxTQUFvQjtFQUN4QkMsVUFBVSxDQUFDLFlBQUs7SUFDZEQsU0FB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