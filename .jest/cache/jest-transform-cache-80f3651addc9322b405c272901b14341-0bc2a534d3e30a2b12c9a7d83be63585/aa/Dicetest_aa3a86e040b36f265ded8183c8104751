92590ba41f95c3e01ffe4906cff5f182
"use strict";

_getJestObj().mock('react-native/Libraries/Animated/NativeAnimatedHelper');
_getJestObj().mock('./Animated', function () {
  return Object.assign({}, jest.requireActual('./Animated'), {
    createAnimatedComponent: function createAnimatedComponent(component) {
      return component;
    }
  });
});
var _jsxRuntime = require("react/jsx-runtime");
var _this = this,
  _jsxFileName = "/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx";
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
var react_1 = __importDefault(require("react"));
var react_native_1 = require("@testing-library/react-native");
var _1 = require("./");
describe('Dice Component', function () {
  var mockRandom = jest.fn();
  var mockUpdateStep = jest.fn();
  var mockProps = {
    count: 1,
    players: 2,
    disabled: false,
    canGo: true,
    isReported: false,
    updateStep: mockUpdateStep,
    random: mockRandom
  };
  it('calls the random function and updateStep on press when not disabled', function () {
    var _ref = (0, react_native_1.render)((0, _jsxRuntime.jsx)(_1.Dice, Object.assign({}, mockProps))),
      getByTestId = _ref.getByTestId;
    (0, react_native_1.act)(function () {
      react_native_1.fireEvent.press(getByTestId('dice-component'));
    });
    expect(mockRandom).toHaveBeenCalledTimes(1);
    expect(mockUpdateStep).toHaveBeenCalledTimes(1);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJPYmplY3QiLCJhc3NpZ24iLCJqZXN0IiwicmVxdWlyZUFjdHVhbCIsImNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50IiwiY29tcG9uZW50IiwiX2pzeFJ1bnRpbWUiLCJyZXF1aXJlIiwiX3RoaXMiLCJfanN4RmlsZU5hbWUiLCJfcmVxdWlyZSIsInJlYWN0XzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZWFjdF9uYXRpdmVfMSIsIl8xIiwiZGVzY3JpYmUiLCJtb2NrUmFuZG9tIiwiZm4iLCJtb2NrVXBkYXRlU3RlcCIsIm1vY2tQcm9wcyIsImNvdW50IiwicGxheWVycyIsImRpc2FibGVkIiwiY2FuR28iLCJpc1JlcG9ydGVkIiwidXBkYXRlU3RlcCIsInJhbmRvbSIsIml0IiwiX3JlZiIsInJlbmRlciIsImpzeCIsIkRpY2UiLCJnZXRCeVRlc3RJZCIsImFjdCIsImZpcmVFdmVudCIsInByZXNzIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFRpbWVzIl0sInNvdXJjZXMiOlsiL1VzZXJzL3BsYXlyYS9MZWVsYUFpV2ViMy9zcmMvY29tcG9uZW50cy9EaWNlL0RpY2UudGVzdC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHtyZW5kZXIsIGZpcmVFdmVudCwgYWN0fSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSdcbmltcG9ydCB7RGljZX0gZnJvbSAnLi8nXG5cbmplc3QubW9jaygncmVhY3QtbmF0aXZlL0xpYnJhcmllcy9BbmltYXRlZC9OYXRpdmVBbmltYXRlZEhlbHBlcicpXG5qZXN0Lm1vY2soJy4vQW5pbWF0ZWQnLCAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgLi4uamVzdC5yZXF1aXJlQWN0dWFsKCcuL0FuaW1hdGVkJyksXG4gICAgY3JlYXRlQW5pbWF0ZWRDb21wb25lbnQ6IChjb21wb25lbnQ6IGFueSkgPT4ge1xuICAgICAgcmV0dXJuIGNvbXBvbmVudFxuICAgIH0sXG4gIH1cbn0pXG5cbmRlc2NyaWJlKCdEaWNlIENvbXBvbmVudCcsICgpID0+IHtcbiAgY29uc3QgbW9ja1JhbmRvbSA9IGplc3QuZm4oKVxuICBjb25zdCBtb2NrVXBkYXRlU3RlcCA9IGplc3QuZm4oKVxuXG4gIC8vINCf0LXRgNC10LTQsNC50YLQtSDQvNC+0LrQuCDRh9C10YDQtdC3IG1vY2tQcm9wc1xuICBjb25zdCBtb2NrUHJvcHMgPSB7XG4gICAgY291bnQ6IDEsXG4gICAgcGxheWVyczogMixcbiAgICBkaXNhYmxlZDogZmFsc2UsXG4gICAgY2FuR286IHRydWUsXG4gICAgaXNSZXBvcnRlZDogZmFsc2UsXG4gICAgdXBkYXRlU3RlcDogbW9ja1VwZGF0ZVN0ZXAsXG4gICAgcmFuZG9tOiBtb2NrUmFuZG9tLFxuICB9XG5cbiAgLy8gICBpdCgncmVuZGVycyBjb3JyZWN0bHkgd2l0aCB0aGUgcHJvdmlkZWQgcHJvcHMnLCAoKSA9PiB7XG4gIC8vICAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuICAvLyAgICAgZXhwZWN0KGdldEJ5VGVzdElkKCdkaWNlLWNvbXBvbmVudCcpKS50b0JlRGVmaW5lZCgpXG4gIC8vICAgfSlcblxuICBpdCgnY2FsbHMgdGhlIHJhbmRvbSBmdW5jdGlvbiBhbmQgdXBkYXRlU3RlcCBvbiBwcmVzcyB3aGVuIG5vdCBkaXNhYmxlZCcsICgpID0+IHtcbiAgICBjb25zdCB7Z2V0QnlUZXN0SWR9ID0gcmVuZGVyKDxEaWNlIHsuLi5tb2NrUHJvcHN9IC8+KVxuXG4gICAgYWN0KCgpID0+IHtcbiAgICAgIGZpcmVFdmVudC5wcmVzcyhnZXRCeVRlc3RJZCgnZGljZS1jb21wb25lbnQnKSlcbiAgICB9KVxuXG4gICAgLy8g0J/RgNC+0LLQtdGA0YzRgtC1LCDRh9GC0L4g0YTRg9C90LrRhtC40LggcmFuZG9tINC4IHVwZGF0ZVN0ZXAg0LHRi9C70Lgg0LLRi9C30LLQsNC90Ysg0L/QviDQvtC00L3QvtC80YMg0YDQsNC30YNcbiAgICBleHBlY3QobW9ja1JhbmRvbSkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpXG4gICAgZXhwZWN0KG1vY2tVcGRhdGVTdGVwKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSlcbiAgfSlcbn0pXG4iXSwibWFwcGluZ3MiOiI7O0FBSUFBLFdBQUEsR0FBS0MsSUFBSSxDQUFDLHNEQUFzRCxDQUFDO0FBQ2pFRCxXQUFBLEdBQUtDLElBQUksQ0FBQyxZQUFZLEVBQUUsWUFBSztFQUMzQixPQUFBQyxNQUFBLENBQUFDLE1BQUEsS0FDS0MsSUFBSSxDQUFDQyxhQUFhLENBQUMsWUFBWSxDQUFDO0lBQ25DQyx1QkFBdUIsRUFBRSxTQUFBQSx3QkFBQ0MsU0FBYyxFQUFJO01BQzFDLE9BQU9BLFNBQVM7SUFDbEI7RUFBQztBQUVMLENBQUMsQ0FBQztBQUFBLElBQUFDLFdBQUEsR0FBQUMsT0FBQTtBQUFBLElBQUFDLEtBQUE7RUFBQUMsWUFBQTtBQUFBLFNBQUFYLFlBQUE7RUFBQSxJQUFBWSxRQUFBLEdBQUFILE9BQUE7SUFBQUwsSUFBQSxHQUFBUSxRQUFBLENBQUFSLElBQUE7RUFBQUosV0FBQSxZQUFBQSxZQUFBO0lBQUEsT0FBQUksSUFBQTtFQUFBO0VBQUEsT0FBQUEsSUFBQTtBQUFBOzs7Ozs7Ozs7QUFaRixJQUFBUyxPQUFBLEdBQUFDLGVBQUEsQ0FBQUwsT0FBQTtBQUNBLElBQUFNLGNBQUEsR0FBQU4sT0FBQTtBQUNBLElBQUFPLEVBQUEsR0FBQVAsT0FBQTtBQVlBUSxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsWUFBSztFQUM5QixJQUFNQyxVQUFVLEdBQUdkLElBQUksQ0FBQ2UsRUFBRSxFQUFFO0VBQzVCLElBQU1DLGNBQWMsR0FBR2hCLElBQUksQ0FBQ2UsRUFBRSxFQUFFO0VBR2hDLElBQU1FLFNBQVMsR0FBRztJQUNoQkMsS0FBSyxFQUFFLENBQUM7SUFDUkMsT0FBTyxFQUFFLENBQUM7SUFDVkMsUUFBUSxFQUFFLEtBQUs7SUFDZkMsS0FBSyxFQUFFLElBQUk7SUFDWEMsVUFBVSxFQUFFLEtBQUs7SUFDakJDLFVBQVUsRUFBRVAsY0FBYztJQUMxQlEsTUFBTSxFQUFFVjtHQUNUO0VBT0RXLEVBQUUsQ0FBQyxxRUFBcUUsRUFBRSxZQUFLO0lBQzdFLElBQUFDLElBQUEsR0FBc0IsSUFBQWYsY0FBQSxDQUFBZ0IsTUFBTSxFQUFDLElBQUF2QixXQUFBLENBQUF3QixHQUFBLEVBQUNoQixFQUFBLENBQUFpQixJQUFJLEVBQUEvQixNQUFBLENBQUFDLE1BQUEsS0FBS2tCLFNBQVMsQ0FBQyxDQUFHLENBQUM7TUFBOUNhLFdBQVcsR0FBQUosSUFBQSxDQUFYSSxXQUFXO0lBRWxCLElBQUFuQixjQUFBLENBQUFvQixHQUFHLEVBQUMsWUFBSztNQUNQcEIsY0FBQSxDQUFBcUIsU0FBUyxDQUFDQyxLQUFLLENBQUNILFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQztJQUdGSSxNQUFNLENBQUNwQixVQUFVLENBQUMsQ0FBQ3FCLHFCQUFxQixDQUFDLENBQUMsQ0FBQztJQUMzQ0QsTUFBTSxDQUFDbEIsY0FBYyxDQUFDLENBQUNtQixxQkFBcUIsQ0FBQyxDQUFDLENBQUM7RUFDakQsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=