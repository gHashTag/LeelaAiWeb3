[["/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx",{"fileContent":"import React from 'react'\nimport {render, fireEvent} from '@testing-library/react-native'\nimport {Gem} from '../'\nimport {ICONS} from './images'\n\ndescribe('Gem Component', () => {\n  test('should render the correct image based on playerNumber prop', () => {\n    const {getByTestId} = render(<Gem playerNumber={3} onPress={() => {}} />)\n    const gemImage = getByTestId('gem-image')\n    expect(gemImage.props.source).toEqual(ICONS[2]) // Check the correct image based on playerNumber prop\n  })\n\n  test('should render the default image if playerNumber prop is invalid', () => {\n    const {getByTestId} = render(<Gem playerNumber={10} onPress={() => {}} />)\n    const gemImage = getByTestId('gem-image')\n    expect(gemImage.props.source).toEqual(ICONS[0]) // Check the default image if playerNumber is invalid\n  })\n\n  test('should call the onPress function when pressed', () => {\n    const onPressMock = jest.fn()\n    const {getByTestId} = render(<Gem playerNumber={5} onPress={onPressMock} />)\n    const gemContainer = getByTestId('gem-container')\n    fireEvent.press(gemContainer)\n    expect(onPressMock).toHaveBeenCalled()\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/Gem/images/index.ts","/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/index.ts",{"fileContent":"// export * from './AppContainer'\n// export * from './Avatar'\n// export * from './Input'\n// export * from './VerticalLine'\n// export * from './Space'\n// export * from './GameBoard'\n// export * from './Background'\nexport * from './Dice'\n// export * from './Tab'\n// export * from './Header'\n// export * from './RenderPlanItem'\n// export * from './EmojiText'\nexport * from './Gem'\n// export * from './Row'\n// export * from './CenterView'\n// export * from './IconLeela'\n// export * from './Loading'\n// export * from './Spin'\n// export * from './HeaderMaster'\n// export * from './VideoPlayer'\n// export * from './CreatePost'\n// export * from './ImageSwiper'\n// export * from './PlanAvatar'\n// export * from './Buttons'\n// export * from './Cards'\nexport * from './Text'\n// export * from './Fallback'\n// export * from './SocialLinks'\n// export * from './KeyboardContainer'\n// export * from './EmptyComments'\n// export * from './HeaderMessage'\n// export * from './HistoryStep'\n// export * from './YouTubePlayer'\n// export * from './Img'\n// export * from './SecondaryTab'\n// export * from './OwnTabView'\n// export * from './Pressable'\n// export * from './PurchaseButton'\n// export * from './CustomBubble'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx","/Users/playra/LeelaAiWeb3/src/components/Gem/images/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx",{"fileContent":"import React, {useRef, useState} from 'react'\nimport {Animated, Easing, Pressable, StyleSheet} from 'react-native'\nimport {vs} from 'react-native-size-matters'\n\nexport interface DiceProps {\n  count: number\n  players: number\n  disabled: boolean\n  canGo: boolean\n  isReported: boolean\n  updateStep: (index?: number) => void\n  random: () => void\n}\n\nconst getImage = (number: number) => {\n  // Замените путь на действительное расположение ресурсов\n  switch (number) {\n    case 1:\n      return require('./assets/1.png')\n    case 2:\n      return require('./assets/2.png')\n    case 3:\n      return require('./assets/3.png')\n    case 4:\n      return require('./assets/4.png')\n    case 5:\n      return require('./assets/5.png')\n    case 6:\n      return require('./assets/6.png')\n  }\n}\n\nconst Dice = ({\n  count,\n  players,\n  disabled,\n  canGo,\n  isReported,\n  updateStep,\n  random,\n}: DiceProps) => {\n  const [canRoll, setCanRoll] = useState<boolean>(true)\n  const spinValue = useRef(new Animated.Value(0)).current\n\n  const handleSpin = (value: number) => {\n    const duration = (value / 2) * 500\n    spinValue.setValue(0)\n    Animated.timing(spinValue, {\n      toValue: value,\n      duration: duration,\n      easing: Easing.linear,\n      useNativeDriver: true,\n    }).start(() => {\n      disabled ? updateStep() : updateStep(players - 1)\n      setTimeout(() => setCanRoll(true), 200)\n    })\n  }\n\n  const isOpacity = (!canGo && disabled) || (disabled && !isReported)\n\n  const spin = spinValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '360deg'],\n  })\n\n  const rollDice = (): void => {\n    if (isOpacity) {\n      return\n    }\n    setCanRoll(false)\n    random()\n    handleSpin(count)\n  }\n\n  return (\n    <Pressable\n      onPress={() => {\n        canRoll && rollDice()\n      }}\n      style={[styles.diceContainer, isOpacity && styles.opacityCube]}\n      testID=\"dice-component\">\n      <Animated.Image\n        style={[styles.image, {transform: [{rotate: spin}]}]}\n        source={getImage(count)}\n      />\n    </Pressable>\n  )\n}\n\nconst styles = StyleSheet.create({\n  diceContainer: {\n    alignItems: 'center',\n    alignSelf: 'center',\n    marginVertical: vs(12),\n  },\n  image: {\n    height: vs(65),\n    width: vs(65),\n  },\n  opacityCube: {\n    opacity: 0.4,\n  },\n})\n\nexport {Dice}\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/Gem/index.tsx",{"fileContent":"import React from 'react'\nimport {Image, Pressable, View} from 'react-native'\nimport {ScaledSheet, ms} from 'react-native-size-matters'\nimport {ICONS} from './images'\n\ninterface GemProps {\n  playerNumber: number\n  onPress: () => void\n}\n\nconst Gem: React.FC<GemProps> = ({playerNumber, onPress}) => {\n  const {container, gems} = styles\n\n  const source = () => {\n    if (playerNumber >= 1 && playerNumber <= 6) {\n      return ICONS[playerNumber - 1]\n    } else {\n      return ICONS[0] // Replace with the default image\n    }\n  }\n\n  return (\n    <Pressable onPress={onPress} testID=\"gem-container\">\n      <View style={container}>\n        <Image style={gems} source={source()} testID=\"gem-image\" />\n      </View>\n    </Pressable>\n  )\n}\n\nconst styles = ScaledSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 2,\n  },\n  gems: {\n    width: ms(42, 0.5),\n    height: ms(42, 0.5),\n    borderRadius: ms(42, 0.5) / 2,\n  },\n})\n\nexport {Gem}\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Gem/images/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Gem/images/index.ts",{"fileContent":"export const ICONS = [\n  require('./one.png'),\n  require('./two.png'),\n  require('./three.png'),\n  require('./four.png'),\n  require('./five.png'),\n  require('./six.png'),\n]\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx",{"fileContent":"import {useTheme} from '@react-navigation/native'\nimport React, {memo} from 'react'\nimport {\n  Platform,\n  Text as RNText,\n  StyleProp,\n  StyleSheet,\n  TextProps,\n  TextStyle,\n  useColorScheme,\n} from 'react-native'\nimport {ms, s} from 'react-native-size-matters'\n\nexport const textStyles = StyleSheet.create({\n  h0: {\n    fontFamily: Platform.OS === 'ios' ? 'Etna' : 'etna-free-font',\n    textShadowOffset: {width: 1, height: 1},\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(95, 0.5) : ms(95, 0.3),\n  },\n  h1: {\n    fontFamily: Platform.OS === 'ios' ? 'Etna' : 'etna-free-font',\n    textShadowOffset: {width: 1, height: 1},\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(35, 0.3) : ms(35, 0.6),\n  },\n  h2: {\n    fontSize: Platform.OS === 'ios' ? s(20) : s(20),\n    fontFamily: 'Montserrat',\n  },\n  h3: {\n    fontFamily: 'Montserrat',\n    textShadowOffset: {width: 1, height: 1},\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(18, 0.6) : ms(18, 0.6),\n  },\n  h4: {\n    fontFamily: 'Montserrat',\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(15, 0.8) : s(15),\n  },\n  h5: {\n    fontSize: Platform.OS === 'ios' ? s(15) : s(15),\n    fontFamily: Platform.OS === 'ios' ? 'Avenir Next' : 'Montserrat',\n  },\n  h6: {\n    fontSize: Platform.OS === 'ios' ? s(15) : s(15),\n    fontFamily: 'Montserrat',\n  },\n  h7: {\n    fontSize: ms(15, 0.6),\n    fontFamily: 'Montserrat',\n    letterSpacing: 0.2,\n    lineHeight: ms(18.5, 0.6),\n  },\n  h8: {\n    fontSize: Platform.OS === 'ios' ? s(14) : s(14),\n    fontFamily: 'Montserrat',\n  },\n  h9: {\n    fontSize: Platform.OS === 'ios' ? s(13) : s(13),\n    fontFamily: 'NeutraText-Bold',\n  },\n  h10: {\n    fontSize: Platform.OS === 'ios' ? s(12) : s(12),\n    fontFamily: 'Montserrat',\n  },\n  h11: {\n    fontSize: Platform.OS === 'ios' ? s(10) : s(10),\n    fontFamily: 'Montserrat',\n  },\n  h12: {\n    fontSize: Platform.OS === 'ios' ? s(10) : s(10),\n    fontFamily: 'OxygenMono-Regular',\n  },\n})\n\nexport interface Icolors {\n  dark: string\n  light: string\n}\n\nexport type hT =\n  | 'h0'\n  | 'h1'\n  | 'h2'\n  | 'h3'\n  | 'h4'\n  | 'h5'\n  | 'h6'\n  | 'h7'\n  | 'h8'\n  | 'h9'\n  | 'h10'\n  | 'h11'\n  | 'h12'\n\nexport interface TxtT extends TextProps {\n  title: string\n  h?: hT\n  colors?: Icolors\n  oneColor?: string\n  textStyle?: StyleProp<TextStyle>\n}\n\nexport const Text = memo<TxtT>(\n  ({h, colors, title, oneColor, textStyle, ...textProps}) => {\n    const {\n      colors: {primary, text},\n    } = useTheme()\n    const scheme = useColorScheme()\n    const isDark = scheme === 'dark'\n    const curColor = oneColor\n      ? oneColor\n      : colors\n      ? isDark\n        ? colors.light\n        : colors.dark\n      : text\n\n    // если добавлен шрифт и у к нему не нужна тень\n    const noShadowFonts = ['h7', 'h1', 'h10', 'h12', 'h4']\n    const hasShadow = h ? !noShadowFonts.includes(h) : false\n\n    const hStyle = h\n      ? [\n          {...textStyles[h], color: curColor},\n          hasShadow && {textShadowColor: primary},\n        ]\n      : undefined\n\n    const mergedStyles = StyleSheet.flatten([hStyle, textStyle])\n\n    return (\n      <RNText style={mergedStyles} {...textProps} testID=\"text-component\">\n        {title}\n      </RNText>\n    )\n  },\n)\n","resolvedModuleNames":[]}]]