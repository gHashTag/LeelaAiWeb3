[["/Users/playra/LeelaAiWeb3/src/components/Space/Space.test.tsx",{"fileContent":"// Import libraries\nimport React from 'react'\nimport {render} from '@testing-library/react-native'\n\n// Import the component to be tested\nimport {Space} from './'\n\ndescribe('Space', () => {\n  it('renders correctly with default props', () => {\n    const {getByTestId} = render(<Space />)\n    const spaceComponent = getByTestId('space-component')\n\n    expect(spaceComponent.props.style).toEqual({height: 0, width: 0})\n  })\n\n  it('renders correctly with given height and width', () => {\n    const {getByTestId} = render(<Space height={10} width={20} />)\n    const spaceComponent = getByTestId('space-component')\n\n    expect(spaceComponent.props.style).toEqual({height: 10, width: 20})\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Space/index.tsx",{"fileContent":"import React, {memo} from 'react'\n\nimport {View} from 'react-native'\n\ninterface SpaceT {\n  height?: number | string\n  width?: number | string\n}\n\nconst Space = memo<SpaceT>(({height, width}) => (\n  <View\n    testID=\"space-component\"\n    style={{height: Number(height) || 0, width: Number(width) || 0}}\n  />\n))\n\nexport {Space}\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/AppContainer/AppContainer.test.tsx",{"fileContent":"import React from 'react'\nimport {render, fireEvent} from '@testing-library/react-native'\n\nimport {AppContainer} from './'\nimport {Text} from 'react-native'\n\ndescribe('<AppContainer />', () => {\n  it('renders correctly', () => {\n    const {getByText} = render(\n      <AppContainer title=\"Test Title\">\n        <Text>Child Component</Text>\n      </AppContainer>,\n    )\n\n    expect(getByText('Test Title')).toBeTruthy()\n    expect(getByText('Child Component')).toBeTruthy()\n  })\n\n  it('calls onPress when header is clicked', () => {\n    const onPressMock = jest.fn()\n\n    const {getByTestId} = render(\n      <AppContainer title=\"Test Title\" onPress={onPressMock}>\n        <Text>Child Component</Text>\n      </AppContainer>,\n    )\n\n    fireEvent.press(getByTestId('header'))\n    expect(onPressMock).toHaveBeenCalled()\n  })\n\n  it('does not render header if header prop is false', () => {\n    const {queryByText} = render(\n      <AppContainer title=\"Test Title\" header={false}>\n        <Text>Child Component</Text>\n      </AppContainer>,\n    )\n\n    expect(queryByText('Test Title')).toBeNull()\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/AppContainer/index.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/AppContainer/index.tsx",{"fileContent":"import React from 'react'\nimport { StyleSheet, View } from 'react-native'\n\nimport { Background } from '../Background'\nimport { Header } from '../Header'\n\ninterface AppContainerT {\n  iconLeft?: string | null\n  colorLeft?: string\n  onPress?: () => void\n  onPressRight?: () => void\n  iconRight?: string | null\n  children: React.ReactNode\n  message?: string\n  title?: string\n  displayStatus?: boolean\n  enableBackgroundBottomInsets?: boolean\n  enableBackgroundTopInsets?: boolean\n  header?: boolean\n  iconLeftOpacity?: number\n  textAlign?: 'center' | 'auto' | 'left' | 'right' | 'justify'\n  status?: 'bg' | 'clean' | '1x1'\n  hidestar?: boolean\n}\n\nexport function AppContainer({\n  iconLeft = null,\n  onPress,\n  onPressRight,\n  header = true,\n  iconRight = null,\n  children,\n  title,\n  enableBackgroundBottomInsets,\n  enableBackgroundTopInsets,\n  displayStatus,\n  iconLeftOpacity = 1,\n  textAlign = 'left',\n  status,\n  hidestar = true\n}: AppContainerT) {\n  return (\n    <View style={styles.container}>\n      {title && header && (\n        <Header\n          displayStatus={displayStatus}\n          textAlign={textAlign}\n          title={title}\n          onPress={onPress}\n          iconLeftOpacity={iconLeftOpacity}\n          onPressRight={onPressRight}\n          iconLeft={iconLeft}\n          iconRight={iconRight}\n          hidestar={hidestar}\n        />\n      )}\n      <Background\n        enableTopInsets={enableBackgroundTopInsets}\n        enableBottomInsets={enableBackgroundBottomInsets}\n        status={status}\n      >\n        {children}\n      </Background>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    width: '100%',\n    height: '100%'\n  }\n})\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx",{"fileContent":"import {render} from '@testing-library/react-native'\nimport {Text, hT, textStyles} from './' // Replace with your actual file path\nimport React from 'react'\n\ndescribe('Text Component', () => {\n  it('renders correctly with default props', () => {\n    const {getByText} = render(<Text title=\"Test Title\" />)\n    expect(getByText('Test Title')).toBeTruthy()\n  })\n  it('applies the correct style based on the \"h\" prop', () => {\n    const styles: hT[] = [\n      'h0',\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'h5',\n      'h6',\n      'h7',\n      'h8',\n      'h9',\n      'h10',\n      'h11',\n      'h12',\n    ]\n    styles.forEach(style => {\n      const {getByTestId} = render(<Text title=\"Test Title\" h={style} />)\n      const receivedStyle = getByTestId('text-component').props.style\n      expect(receivedStyle).toEqual(expect.objectContaining(textStyles[style]))\n    })\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Text/index.tsx",{"fileContent":"import {useTheme} from '@react-navigation/native'\nimport React, {memo} from 'react'\nimport {\n  Platform,\n  Text as RNText,\n  StyleProp,\n  StyleSheet,\n  TextProps,\n  TextStyle,\n  useColorScheme,\n} from 'react-native'\nimport {ms, s} from 'react-native-size-matters'\n\nexport const textStyles = StyleSheet.create({\n  h0: {\n    fontFamily: Platform.OS === 'ios' ? 'Etna' : 'etna-free-font',\n    textShadowOffset: {width: 1, height: 1},\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(95, 0.5) : ms(95, 0.3),\n  },\n  h1: {\n    fontFamily: Platform.OS === 'ios' ? 'Etna' : 'etna-free-font',\n    textShadowOffset: {width: 1, height: 1},\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(35, 0.3) : ms(35, 0.6),\n  },\n  h2: {\n    fontSize: Platform.OS === 'ios' ? s(20) : s(20),\n    fontFamily: 'Montserrat',\n  },\n  h3: {\n    fontFamily: 'Montserrat',\n    textShadowOffset: {width: 1, height: 1},\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(18, 0.6) : ms(18, 0.6),\n  },\n  h4: {\n    fontFamily: 'Montserrat',\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(15, 0.8) : s(15),\n  },\n  h5: {\n    fontSize: Platform.OS === 'ios' ? s(15) : s(15),\n    fontFamily: Platform.OS === 'ios' ? 'Avenir Next' : 'Montserrat',\n  },\n  h6: {\n    fontSize: Platform.OS === 'ios' ? s(15) : s(15),\n    fontFamily: 'Montserrat',\n  },\n  h7: {\n    fontSize: ms(15, 0.6),\n    fontFamily: 'Montserrat',\n    letterSpacing: 0.2,\n    lineHeight: ms(18.5, 0.6),\n  },\n  h8: {\n    fontSize: Platform.OS === 'ios' ? s(14) : s(14),\n    fontFamily: 'Montserrat',\n  },\n  h9: {\n    fontSize: Platform.OS === 'ios' ? s(13) : s(13),\n    fontFamily: 'NeutraText-Bold',\n  },\n  h10: {\n    fontSize: Platform.OS === 'ios' ? s(12) : s(12),\n    fontFamily: 'Montserrat',\n  },\n  h11: {\n    fontSize: Platform.OS === 'ios' ? s(10) : s(10),\n    fontFamily: 'Montserrat',\n  },\n  h12: {\n    fontSize: Platform.OS === 'ios' ? s(10) : s(10),\n    fontFamily: 'OxygenMono-Regular',\n  },\n})\n\nexport interface Icolors {\n  dark: string\n  light: string\n}\n\nexport type hT =\n  | 'h0'\n  | 'h1'\n  | 'h2'\n  | 'h3'\n  | 'h4'\n  | 'h5'\n  | 'h6'\n  | 'h7'\n  | 'h8'\n  | 'h9'\n  | 'h10'\n  | 'h11'\n  | 'h12'\n\nexport interface TxtT extends TextProps {\n  title: string\n  h?: hT\n  colors?: Icolors\n  oneColor?: string\n  textStyle?: StyleProp<TextStyle>\n}\n\nexport const Text = memo<TxtT>(\n  ({h, colors, title, oneColor, textStyle, ...textProps}) => {\n    const {\n      colors: {primary, text},\n    } = useTheme()\n    const scheme = useColorScheme()\n    const isDark = scheme === 'dark'\n    const curColor = oneColor\n      ? oneColor\n      : colors\n      ? isDark\n        ? colors.light\n        : colors.dark\n      : text\n\n    // если добавлен шрифт и у к нему не нужна тень\n    const noShadowFonts = ['h7', 'h1', 'h10', 'h12', 'h4']\n    const hasShadow = h ? !noShadowFonts.includes(h) : false\n\n    const hStyle = h\n      ? [\n          {...textStyles[h], color: curColor},\n          hasShadow && {textShadowColor: primary},\n        ]\n      : undefined\n\n    const mergedStyles = StyleSheet.flatten([hStyle, textStyle])\n\n    return (\n      <RNText style={mergedStyles} {...textProps} testID=\"text-component\">\n        {title}\n      </RNText>\n    )\n  },\n)\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx",{"fileContent":"import React from 'react'\nimport {render, fireEvent, act} from '@testing-library/react-native'\nimport {Dice, DiceProps} from './'\n\njest.mock('react-native/Libraries/Animated/NativeAnimatedHelper')\njest.mock('./Animated', () => {\n  return {\n    ...jest.requireActual('./Animated'),\n    createAnimatedComponent: (component: any) => {\n      return component\n    },\n  }\n})\n\ndescribe('Dice Component', () => {\n  let mockProps: DiceProps\n  beforeEach(() => {\n    mockProps = {\n      count: 1,\n      players: 2,\n      disabled: false,\n      canGo: true,\n      isReported: false,\n      updateStep: jest.fn(),\n      random: jest.fn(),\n    }\n    jest.useFakeTimers()\n  })\n\n  afterEach(() => {\n    jest.useRealTimers()\n  })\n\n  it('renders correctly with the provided props', () => {\n    const {getByTestId} = render(<Dice {...mockProps} />)\n    expect(getByTestId('dice-component')).toBeDefined()\n  })\n\n  it('calls the random function and updateStep on press when not disabled', () => {\n    const {getByTestId} = render(<Dice {...mockProps} />)\n\n    act(() => {\n      fireEvent.press(getByTestId('dice-component'))\n      jest.runAllTimers()\n    })\n\n    expect(mockProps.random).toHaveBeenCalledTimes(1)\n    expect(mockProps.updateStep).toHaveBeenCalledTimes(1)\n  })\n\n  it('does not call the random function and updateStep on press when disabled', () => {\n    mockProps.disabled = true\n    const {getByTestId} = render(<Dice {...mockProps} />)\n\n    act(() => {\n      fireEvent.press(getByTestId('dice-component'))\n      jest.runAllTimers()\n    })\n\n    expect(mockProps.random).not.toHaveBeenCalled()\n    expect(mockProps.updateStep).not.toHaveBeenCalled()\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Dice/index.tsx",{"fileContent":"import React, {useRef, useState} from 'react'\nimport {Animated, Easing, Pressable, StyleSheet} from 'react-native'\nimport {vs} from 'react-native-size-matters'\n\nexport interface DiceProps {\n  count: number\n  players: number\n  disabled: boolean\n  canGo: boolean\n  isReported: boolean\n  updateStep: (index?: number) => void\n  random: () => void\n}\n\nconst getImage = (number: number) => {\n  // Замените путь на действительное расположение ресурсов\n  switch (number) {\n    case 1:\n      return require('./assets/1.png')\n    case 2:\n      return require('./assets/2.png')\n    case 3:\n      return require('./assets/3.png')\n    case 4:\n      return require('./assets/4.png')\n    case 5:\n      return require('./assets/5.png')\n    case 6:\n      return require('./assets/6.png')\n  }\n}\n\nconst Dice = ({\n  count,\n  players,\n  disabled,\n  canGo,\n  isReported,\n  updateStep,\n  random,\n}: DiceProps) => {\n  const [canRoll, setCanRoll] = useState<boolean>(true)\n  const spinValue = useRef(new Animated.Value(0)).current\n\n  const handleSpin = (value: number) => {\n    const duration = (value / 2) * 500\n    spinValue.setValue(0)\n    Animated.timing(spinValue, {\n      toValue: value,\n      duration: duration,\n      easing: Easing.linear,\n      useNativeDriver: true,\n    }).start(() => {\n      disabled ? updateStep() : updateStep(players - 1)\n      setTimeout(() => setCanRoll(true), 200)\n    })\n  }\n\n  const isOpacity = (!canGo && disabled) || (disabled && !isReported)\n\n  const spin = spinValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '360deg'],\n  })\n\n  const rollDice = (): void => {\n    if (isOpacity) {\n      return\n    }\n    setCanRoll(false)\n    random()\n    handleSpin(count)\n  }\n\n  return (\n    <Pressable\n      onPress={() => {\n        canRoll && rollDice()\n      }}\n      style={[styles.diceContainer, isOpacity && styles.opacityCube]}\n      testID=\"dice-component\">\n      <Animated.Image\n        style={[styles.image, {transform: [{rotate: spin}]}]}\n        source={getImage(count)}\n      />\n    </Pressable>\n  )\n}\n\nconst styles = StyleSheet.create({\n  diceContainer: {\n    alignItems: 'center',\n    alignSelf: 'center',\n    marginVertical: vs(12),\n  },\n  image: {\n    height: vs(65),\n    width: vs(65),\n  },\n  opacityCube: {\n    opacity: 0.4,\n  },\n})\n\nexport {Dice}\n","resolvedModuleNames":[]}]]