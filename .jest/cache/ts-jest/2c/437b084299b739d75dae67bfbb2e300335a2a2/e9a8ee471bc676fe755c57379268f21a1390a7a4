[["/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.test.tsx",{"fileContent":"// src/components/Gem/Gem.test.tsx\nimport React from 'react'\n\nimport { render, fireEvent } from '@testing-library/react-native'\n\nimport { Gem } from '../'\n\ndescribe('Gem Component', () => {\n  test('should have the correct testID prop', () => {\n    const { getByTestId } = render(<Gem planNumber={5} onPress={() => {}} />)\n    const gemImage = getByTestId('gem-image')\n    expect(gemImage).toBeDefined()\n  })\n\n  test('should call the onPress function when pressed', () => {\n    const onPressMock = jest.fn()\n    const { getByTestId } = render(<Gem planNumber={5} onPress={onPressMock} />)\n    const gemContainer = getByTestId('gem-container')\n    fireEvent.press(gemContainer)\n    expect(onPressMock).toHaveBeenCalled()\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/ShadowView/ShadowView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/Buttons.ts","/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/index.ts",{"fileContent":"export * from './Gem/Gem'\nexport * from './ActionButtons/ActionButtons'\nexport * from './Space/Space'\nexport * from './GameBoard/GameBoard'\nexport * from './MarkdownView/MarkdownView'\nexport * from './ShadowView/ShadowView'\nexport * from './NeomorphCircle/NeomorphCircle'\nexport * from './NeomorphBlurView/NeomorphBlurView'\nexport * from './NeomorphFlexView/NeomorphFlexView'\nexport * from './NeomorphView/NeomorphView'\nexport * from './Avatar/Avatar'\nexport * from './Buttons/Buttons'\nexport * from './Background/Background'\nexport * from './CenterView/CenterView'\nexport * from './CommentBubbleLeft/CommentBubbleLeft'\nexport * from './CommentBubbleRight/CommentBubbleRight'\nexport * from './Dice/Dice'\nexport * from './Display/Display'\nexport * from './ReportCard/ReportCard'\nexport * from './TextInputField/TextInputField'\nexport * from './Text/Text'\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/ShadowView/ShadowView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/Buttons.ts","/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/components/GameBoard/images/index.ts","/Users/playra/LeelaAiWeb3/src/components/Buttons/Button/Button.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonEdit/ButtonEdit.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonLink/ButtonLink.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/ButtonVectorIcon/ButtonVectorIcon.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx",{"fileContent":"import React from 'react'\n\nimport { View, Image, Pressable } from 'react-native'\n\nimport { gray } from 'cons'\nimport { ScaledSheet, ms } from 'react-native-size-matters'\nimport { GemProps } from 'types'\n\nimport { Text } from '../Text/Text'\n\nconst Gem: React.FC<GemProps> = ({ player, planNumber, onPress }) => {\n  const { container, gems, circle } = styles\n\n  let source\n\n  if (player?.avatar) {\n    if (typeof player.avatar === 'string' && player.avatar !== '') {\n      source = { uri: player.avatar }\n    } else if (typeof player.avatar === 'number') {\n      source = player.avatar\n    }\n  }\n\n  const isNumberVisible = !player && planNumber !== 68\n\n  return (\n    <Pressable onPress={onPress} testID=\"gem-container\">\n      <View style={container}>\n        {isNumberVisible ? (\n          <View style={[circle, gems]} testID=\"gem-image\">\n            <Text h={'h4'} title={planNumber.toString()} oneColor={gray} />\n          </View>\n        ) : (\n          <View style={[styles.imgStyle, { zIndex: player?.id }]}>\n            {source && (\n              <Image style={gems} source={source} testID=\"gem-image\" />\n            )}\n          </View>\n        )}\n      </View>\n    </Pressable>\n  )\n}\n\nconst styles = ScaledSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  gems: {\n    width: ms(42, 0.5),\n    height: ms(42, 0.5),\n    borderRadius: ms(42, 0.5) / 2,\n  },\n  circle: {\n    width: ms(44),\n    height: ms(44),\n    borderRadius: ms(44) / 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: 'transparent',\n  },\n  imgStyle: {\n    position: 'absolute',\n  },\n})\n\nexport { Gem }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx"]}],["/Users/playra/LeelaAiWeb3/src/cons/index.ts",{"fileContent":"import { Dimensions, Linking, Platform, NativeModules } from 'react-native'\n\nimport { OPEN_AI_KEY } from '@env'\nimport { createNavigationContainerRef } from '@react-navigation/native'\nimport * as Sentry from '@sentry/react-native'\nimport axios from 'axios'\nimport Rate from 'react-native-rate'\nimport { MessageAIT, HandleCommentAiParamsT } from 'types'\n\nexport const primary = '#50E3C2'\nexport const secondary = '#ff06f4'\nexport const gray = '#808080'\nexport const white = '#ffffff'\nexport const black = '#303030'\nexport const dimGray = '#b4b3b3'\nexport const lightGray = '#F5F7F8'\nexport const classicRose = '#FDBEEA'\nexport const mustard = '#F3DE50'\nexport const fuchsia = '#FF06F4'\nexport const trueBlue = '#007ACD'\nexport const paleBlue = '#BEFCE5'\nexport const brightTurquoise = '#1EE4EC'\nexport const red = '#FC2847'\nexport const orange = '#FFB700'\nexport const blackOpacity = 'rgba(0, 0, 0, 0.8)'\nexport const grayBlackOpacity = 'rgba(139, 139, 139, 0.1)'\n\nexport const navRef = createNavigationContainerRef<any>()\n\nexport const navigate = (name: string, params?: any) => {\n  if (navRef.isReady()) {\n    navRef.navigate(name, params)\n  }\n}\n\nexport const generateComment = async ({\n  message,\n  systemMessage,\n  planText,\n}: MessageAIT): Promise<string> => {\n  try {\n    const response = await axios.post(\n      'https://api.openai.com/v1/chat/completions',\n      {\n        model: 'gpt-4-0314',\n        messages: [\n          {\n            role: 'system',\n            content: systemMessage,\n          },\n          {\n            role: 'user',\n            content: message,\n          },\n          {\n            role: 'assistant',\n            content: planText,\n          },\n        ],\n        max_tokens: 1000,\n        temperature: 0.5,\n      },\n      {\n        headers: {\n          Authorization: `Bearer ${OPEN_AI_KEY}`,\n          'Content-Type': 'application/json',\n        },\n      },\n    )\n\n    return response?.data?.choices[0]?.message?.content ?? ''\n  } catch (error) {\n    captureException(error, 'generateComment')\n    throw error\n  }\n}\n\nexport const onLeaveFeedback = (onAction: (success: any) => void) => {\n  const options = {\n    AppleAppID: '1296604457',\n    GooglePackageName: 'com.leelagame',\n    OtherAndroidURL:\n      'https://play.google.com/store/apps/details?id=com.leelagame',\n    preferInApp: true,\n    openAppStoreIfInAppFails: true,\n  }\n  Rate.rate(options, onAction)\n}\n\nexport const handleCommentAi = async ({\n  curItem,\n  systemMessage,\n  message,\n  planText = ' ',\n}: HandleCommentAiParamsT): Promise<void> => {\n  const aiComment: string = await generateComment({\n    message,\n    systemMessage,\n    planText,\n  })\n\n  if (curItem && aiComment) {\n    // await PostStore.createComment({\n    //   text: aiComment,\n    //   postId: curItem.id,\n    //   postOwner: curItem.ownerId,\n    //   ownerId: LEELA_ID,\n    // })\n  }\n}\n\nexport const captureException = (error: any, target: string) => {\n  if (!error) {\n    console.log(\n      '%c captureException called with messing or incorrect arguments',\n      'background: #555; color: yellow',\n    )\n    return\n  }\n  console.error(`On:${target}/ My Error: ${error} `)\n  if (!__DEV__) {\n    Sentry.captureException(error)\n  }\n}\n\nexport const win = Dimensions.get('window')\nexport const W = win.width\nexport const H = win.height\nexport const imgH = Math.round((W * 9) / 16)\nexport const isIos = Platform.OS === 'ios'\n\nexport const openUrl = async (url: string) => {\n  await Linking.openURL(url)\n}\n\nexport const goBack = () => {\n  if (navRef.isReady()) {\n    navRef.goBack()\n  }\n}\n//@ts-ignore\nexport const goHome = (navigation) => () => navigation.popToTop()()\n\nexport const ENTITLEMENT_ID = 'Pro'\n\nexport const getSystemLanguage = () => {\n  let languageCode = 'en' // Default to English\n\n  if (Platform.OS === 'android') {\n    languageCode = NativeModules.I18nManager.localeIdentifier\n  } else if (Platform.OS === 'ios') {\n    languageCode = NativeModules.SettingsManager.settings.AppleLocale\n  }\n\n  return languageCode.slice(0, 2).toLowerCase()\n}\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx",{"fileContent":"import React, { memo } from 'react'\n\nimport {\n  Platform,\n  Text as RNText,\n  StyleProp,\n  StyleSheet,\n  TextProps,\n  TextStyle,\n  useColorScheme,\n} from 'react-native'\n\nimport { useTheme } from '@react-navigation/native'\nimport { captureException, gray } from 'cons'\nimport { ScaledSheet, ms, s } from 'react-native-size-matters'\n\nexport type hT = 'h0' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5'\n\nexport interface Icolors {\n  dark: string\n  light: string\n}\n\nexport interface TxtT extends TextProps {\n  title: string\n  h?: hT\n  colors?: Icolors\n  oneColor?: string\n  numberOfLines?: number\n  textStyle?: StyleProp<TextStyle>\n}\n\nexport const Text = memo<TxtT>(\n  ({\n    h,\n    colors,\n    title,\n    oneColor = gray,\n    numberOfLines,\n    textStyle,\n    ...textProps\n  }) => {\n    const {\n      colors: { text },\n    } = useTheme()\n    const scheme = useColorScheme()\n    const isDark = scheme === 'dark'\n    const curColor = oneColor\n      ? oneColor\n      : colors\n      ? isDark\n        ? colors.light\n        : colors.dark\n      : text\n\n    let hStyle: TextStyle | undefined\n    try {\n      if (\n        h &&\n        textStyles[h] &&\n        typeof textStyles[h] === 'object' &&\n        textStyles[h] !== null\n      ) {\n        // @ts-ignore\n        hStyle = { ...textStyles[h], color: curColor }\n      }\n    } catch (error) {\n      console.error(' ', error)\n      captureException(error, 'Text. Error spreading textStyles[h]:')\n      hStyle = undefined\n    }\n    const mergedStyles = StyleSheet.flatten([hStyle, textStyle])\n\n    return (\n      <RNText\n        style={mergedStyles}\n        {...textProps}\n        testID=\"text-component\"\n        ellipsizeMode=\"tail\"\n        numberOfLines={numberOfLines}\n      >\n        {title}\n      </RNText>\n    )\n  },\n)\n\nexport const textStyles = ScaledSheet.create({\n  h0: {\n    fontFamily: Platform.OS === 'ios' ? 'Etna' : 'etna-free-font',\n    textShadowOffset: { width: 1, height: 1 },\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(95, 0.5) : ms(95, 0.3),\n  },\n  h1: {\n    fontFamily: 'mont',\n    textShadowOffset: { width: 1, height: 1 },\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(35, 0.3) : ms(35, 0.6),\n    fontWeight: 'bold',\n  },\n  h2: {\n    fontSize: Platform.OS === 'ios' ? s(20) : s(20),\n    fontFamily: 'mont',\n    fontWeight: 'bold',\n  },\n  h3: {\n    fontFamily: 'mont',\n    textShadowOffset: { width: 1, height: 1 },\n    textShadowRadius: 1,\n    fontSize: Platform.OS === 'ios' ? ms(18, 0.6) : ms(18, 0.6),\n  },\n  h4: {\n    fontSize: Platform.OS === 'ios' ? s(15) : s(15),\n    fontFamily: Platform.OS === 'ios' ? 'mont' : 'mont',\n    lineHeight: 18,\n  },\n  h5: {\n    fontFamily: 'mont',\n    fontSize: Platform.OS === 'ios' ? ms(12, 0.8) : s(15),\n  },\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx",{"fileContent":"import React from 'react'\n\nimport { View } from 'react-native'\n\nimport { ButtonVectorIcon, Space } from 'components'\nimport { fuchsia } from 'cons'\nimport { ScaledSheet, ms, s } from 'react-native-size-matters'\n\ninterface ActionButtonsProps {\n  isAdmin: boolean\n  commCount: number\n  likeCount: number\n  isLiked: boolean\n  handleAdminMenu: () => void\n  handleComment: () => void\n  handleLike: () => void\n  handleShareLink: () => void\n}\n\nconst ActionButtons: React.FC<ActionButtonsProps> = ({\n  isAdmin,\n  commCount,\n  likeCount,\n  handleAdminMenu,\n  handleComment,\n  handleLike,\n  // handleShareLink,\n  isLiked,\n}) => {\n  const iconSize = ms(15, 0.8)\n  const heart = isLiked ? 'heart' : 'heart-outline'\n  const heartColor = isLiked ? fuchsia : undefined\n  return (\n    <View style={styles.btnsContainer}>\n      {isAdmin && (\n        <>\n          <ButtonVectorIcon\n            onPress={handleAdminMenu}\n            viewStyle={[styles.smallBtn, styles.nonDetailAdminMenuButton]}\n            ionicons\n            name=\"ellipsis-vertical-circle\"\n            size={iconSize + 3}\n          />\n          <Space height={12} />\n        </>\n      )}\n      <ButtonVectorIcon\n        onPress={handleComment}\n        count={commCount}\n        viewStyle={[styles.smallBtn, styles.nonDetailCommentButton]}\n        ionicons\n        name=\"chatbubble-outline\"\n        size={iconSize}\n      />\n      <ButtonVectorIcon\n        count={likeCount}\n        onPress={handleLike}\n        color={heartColor}\n        ionicons\n        iconSize={iconSize + 1.5}\n        viewStyle={styles.smallBtn}\n        name={heart}\n        size={iconSize}\n      />\n      {/* <ButtonVectorIcon\n        viewStyle={[styles.smallBtn, styles.nonDetailLinkButton]}\n        name=\"link-outline\"\n        ionicons\n        iconSize={iconSize + 4}\n        onPress={handleShareLink}\n      /> */}\n    </View>\n  )\n}\n\nconst styles = ScaledSheet.create({\n  btnsContainer: {\n    justifyContent: 'space-between',\n    top: 5,\n    flexDirection: 'row',\n    padding: s(8),\n  },\n  smallBtn: {\n    flexDirection: 'row',\n  },\n  nonDetailCommentButton: {\n    justifyContent: 'flex-start',\n  },\n  nonDetailLinkButton: {\n    justifyContent: 'flex-end',\n    marginRight: s(5),\n  },\n  nonDetailAdminMenuButton: {\n    alignItems: 'flex-end',\n    marginRight: s(4),\n  },\n})\n\nexport { ActionButtons }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/ShadowView/ShadowView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/Buttons.ts","/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx",{"fileContent":"import React, { memo } from 'react'\n\nimport { View } from 'react-native'\n\nimport { s } from 'react-native-size-matters'\n\ninterface SpaceT {\n  height?: number | string\n  width?: number | string\n}\n\nconst Space = memo<SpaceT>(({ height, width }) => (\n  <View\n    testID=\"space-component\"\n    style={{ height: s(Number(height)) || 0, width: s(Number(width)) || 0 }}\n  />\n))\n\nexport { Space }\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx",{"fileContent":"import React, { useMemo } from 'react'\n\nimport { Image, View, useColorScheme } from 'react-native'\n\nimport { NeomorphFlexView } from 'components'\nimport { H, W } from 'cons'\nimport { ScaledSheet, ms, mvs, s } from 'react-native-size-matters'\nimport { GameBoardProps } from 'types'\n\nimport { GameBoardImage } from './images'\n\nimport { Gem } from '../Gem/Gem'\n\nconst marginTop = H - W > 350 ? 20 : 0\n\nfunction GameBoard({ players }: GameBoardProps) {\n  const scheme = useColorScheme()\n\n  const imgObj = useMemo(() => {\n    const image = GameBoardImage.find((x) => {\n      return x.title === scheme\n    })?.path\n    if (image) {\n      const { width, height } = Image.resolveAssetSource(image)\n      const aspect = width / height\n      return { image, aspect }\n    } else {\n      return { image: '', aspect: 1 }\n    }\n  }, [scheme])\n\n  const getPlayer = (b: number) => {\n    const player = players.find((pl) => pl.plan === b)\n    return player\n      ? {\n          id: player.id,\n          plan: player.plan,\n          avatar: player.avatar,\n        }\n      : undefined\n  }\n\n  return (\n    // @ts-ignore\n    <NeomorphFlexView viewStyle={styles.container}>\n      <View\n        style={[\n          styles.imageContainer,\n          { width: curImageHeight * imgObj.aspect },\n        ]}\n        testID=\"gem-container\"\n      >\n        <Image\n          source={imgObj.image}\n          style={styles.bgImage}\n          resizeMode=\"cover\"\n        />\n        <View style={styles.gameBoardContainer}>\n          <View style={styles.sub}>\n            {rows.map((a, i) => (\n              <View style={styles.row} key={i}>\n                {a.map((b, index) => (\n                  <View key={index} style={styles.box}>\n                    <Gem player={getPlayer(b)} planNumber={b} />\n                  </View>\n                ))}\n              </View>\n            ))}\n          </View>\n        </View>\n      </View>\n    </NeomorphFlexView>\n  )\n}\n\nconst imageHeight = s(248) + s(32)\nconst maxImageHeight = ms(248, 0.5) + s(32)\nconst imageTopMargin = Math.min(ms(27, 0.5), s(27))\nconst curImageHeight = Math.min(maxImageHeight, imageHeight) + imageTopMargin\n\nconst imageWidth = s(279) + s(18)\nconst maxImageWidth = ms(279, 0.5) + s(18)\nconst curImageWidth = imageWidth >= maxImageWidth ? maxImageWidth : imageWidth\n\nconst rows = [\n  [72, 71, 70, 69, 68, 67, 66, 65, 64],\n  [55, 56, 57, 58, 59, 60, 61, 62, 63],\n  [54, 53, 52, 51, 50, 49, 48, 47, 46],\n  [37, 38, 39, 40, 41, 42, 43, 44, 45],\n  [36, 35, 34, 33, 32, 31, 30, 29, 28],\n  [19, 20, 21, 22, 23, 24, 25, 26, 27],\n  [18, 17, 16, 15, 14, 13, 12, 11, 10],\n  [1, 2, 3, 4, 5, 6, 7, 8, 9],\n]\n\nconst styles = ScaledSheet.create({\n  container: {\n    alignItems: 'center',\n    paddingHorizontal: s(20),\n    paddingVertical: s(6),\n    width: '90%',\n  },\n  sub: {\n    marginTop: imageTopMargin,\n  },\n  imageContainer: {\n    height: curImageHeight,\n    alignSelf: 'center',\n    alignItems: 'center',\n    bottom: 30,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  gameBoardContainer: {\n    width: curImageWidth,\n    height: curImageHeight,\n    marginTop,\n  },\n  box: {\n    width: s(31),\n    height: s(31),\n    maxHeight: ms(31, 0.5),\n    maxWidth: ms(31, 0.5),\n    marginVertical: s(2),\n    marginHorizontal: s(1),\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: s(31) / 2,\n  },\n  bgImage: {\n    width: '95%',\n    height: '100%',\n    position: 'absolute',\n    top: mvs(33, 1.6) - imageTopMargin,\n  },\n})\n\nexport { GameBoard }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/index.ts","/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts","/Users/playra/LeelaAiWeb3/src/components/GameBoard/images/index.ts","/Users/playra/LeelaAiWeb3/src/components/Gem/Gem.tsx","/Users/playra/LeelaAiWeb3/src/components/ActionButtons/ActionButtons.tsx","/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx","/Users/playra/LeelaAiWeb3/src/components/GameBoard/GameBoard.tsx","/Users/playra/LeelaAiWeb3/src/components/MarkdownView/MarkdownView.jsx","/Users/playra/LeelaAiWeb3/src/components/ShadowView/ShadowView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphCircle/NeomorphCircle.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphBlurView/NeomorphBlurView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphFlexView/NeomorphFlexView.tsx","/Users/playra/LeelaAiWeb3/src/components/NeomorphView/NeomorphView.tsx","/Users/playra/LeelaAiWeb3/src/components/Avatar/Avatar.tsx","/Users/playra/LeelaAiWeb3/src/components/Buttons/Buttons.ts","/Users/playra/LeelaAiWeb3/src/components/Background/Background.tsx","/Users/playra/LeelaAiWeb3/src/components/CenterView/CenterView.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleLeft/CommentBubbleLeft.tsx","/Users/playra/LeelaAiWeb3/src/components/CommentBubbleRight/CommentBubbleRight.tsx","/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx","/Users/playra/LeelaAiWeb3/src/components/Display/Display.tsx","/Users/playra/LeelaAiWeb3/src/components/ReportCard/ReportCard.tsx","/Users/playra/LeelaAiWeb3/src/components/TextInputField/TextInputField.tsx","/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/GameBoard/images/index.ts",{"fileContent":"export const GameBoardImage = [\n  {\n    path: require('./light.png'),\n    title: 'light',\n  },\n  {\n    path: require('./light.png'),\n    title: 'dark',\n  },\n]\n","resolvedModuleNames":[]}],["/Users/playra/LeelaAiWeb3/src/components/ShadowView/ShadowView.tsx",{"fileContent":"import React from 'react'\n\nimport { View, ViewProps, ViewStyle } from 'react-native'\n\nimport { lightGray, white } from 'cons'\nimport { Shadow } from 'react-native-neomorph-shadows'\nimport { ScaledSheet } from 'react-native-size-matters'\n\ntype FlexStyleProperties =\n  | 'flex'\n  | 'alignSelf'\n  | 'flexGrow'\n  | 'flexShrink'\n  | 'flexBasis'\n\ntype ViewStyleWithoutFlex = Pick<\n  ViewStyle,\n  Exclude<keyof ViewStyle, FlexStyleProperties>\n>\n\ninterface ViewStyleWithShadow extends ViewStyleWithoutFlex {\n  shadowOffset?: {\n    width: number\n    height: number\n  }\n  shadowOpacity?: number\n  shadowColor?: string\n  shadowRadius?: number\n  borderRadius?: number\n  backgroundColor?: string\n  width?: number\n  height?: number\n}\n\ninterface ShadowViewProps {\n  children: React.ReactNode\n  shadowStyle?: ViewStyleWithShadow\n  viewStyle?: ViewProps\n}\n\nconst ShadowView: React.FC<ShadowViewProps> = ({\n  children,\n  viewStyle,\n  shadowStyle,\n}) => {\n  return (\n    <Shadow\n      // @ts-ignore\n\n      draw\n      style={{\n        // @ts-ignore\n        ...styles.shadow,\n        ...shadowStyle,\n      }}\n    >\n      <View style={viewStyle}>{children}</View>\n    </Shadow>\n  )\n}\n\nconst styles = ScaledSheet.create({\n  shadow: {\n    alignSelf: 'center',\n    shadowOffset: { width: 3, height: 3 },\n    shadowRadius: 6,\n    shadowColor: lightGray,\n    shadowOpacity: 1,\n    borderRadius: 25,\n    backgroundColor: white,\n    alignItems: 'center',\n  },\n})\n\nexport { ShadowView }\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/cons/index.ts","/Users/playra/LeelaAiWeb3/src/types/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Text/Text.test.tsx",{"fileContent":"import React from 'react'\n\nimport { render } from '@testing-library/react-native'\n\nimport { Text, hT, textStyles } from './Text' // Replace with your actual file path\n\ndescribe('Text Component', () => {\n  it('renders correctly with default props', () => {\n    const { getByText } = render(<Text title=\"Test Title\" />)\n    expect(getByText('Test Title')).toBeTruthy()\n  })\n  it('applies the correct style based on the \"h\" prop', () => {\n    const styles: hT[] = ['h0', 'h1', 'h2', 'h3', 'h4', 'h5']\n    styles.forEach((style) => {\n      const { getByTestId } = render(<Text title=\"Test Title\" h={style} />)\n      const receivedStyle = getByTestId('text-component').props.style\n      expect(receivedStyle).toEqual(expect.objectContaining(textStyles[style]))\n    })\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Text/Text.tsx","/Users/playra/LeelaAiWeb3/src/cons/index.ts"]}],["/Users/playra/LeelaAiWeb3/src/components/Space/Space.test.tsx",{"fileContent":"// Import libraries\nimport React from 'react'\n\nimport { render } from '@testing-library/react-native'\n\n// Import the component to be tested\nimport { Space } from './Space'\n\ndescribe('Space', () => {\n  it('renders correctly with default props', () => {\n    const { getByTestId } = render(<Space />)\n    const spaceComponent = getByTestId('space-component')\n\n    expect(spaceComponent.props.style).toEqual({ height: 0, width: 0 })\n  })\n\n  it('renders correctly with given height and width', () => {\n    const { getByTestId } = render(<Space height={10} width={20} />)\n    const spaceComponent = getByTestId('space-component')\n\n    expect(spaceComponent.props.style).toEqual({ height: 10, width: 20 })\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Space/Space.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.test.tsx",{"fileContent":"import React from 'react'\n\nimport { render, fireEvent, act } from '@testing-library/react-native'\n\nimport { Dice, DiceProps } from './Dice'\n\njest.mock('react-native/Libraries/Animated/NativeAnimatedHelper')\njest.mock('./Animated', () => {\n  return {\n    ...jest.requireActual('./Animated'),\n    createAnimatedComponent: (component: any) => {\n      return component\n    },\n  }\n})\n\ndescribe('Dice Component', () => {\n  let mockProps: DiceProps\n  beforeEach(() => {\n    mockProps = {\n      lastRoll: 1,\n      disabled: false,\n      rollDice: jest.fn(),\n    }\n    jest.useFakeTimers()\n  })\n\n  afterEach(() => {\n    jest.useRealTimers()\n  })\n\n  it('renders correctly with the provided props', () => {\n    const { getByTestId } = render(<Dice {...mockProps} />)\n    expect(getByTestId('dice-component')).toBeDefined()\n  })\n\n  it('calls the rollDice function on press when not disabled', () => {\n    const { getByTestId } = render(<Dice {...mockProps} />)\n\n    act(() => {\n      fireEvent.press(getByTestId('dice-component'))\n      jest.runAllTimers()\n    })\n\n    expect(mockProps.rollDice).toHaveBeenCalledTimes(1)\n  })\n\n  it('does not call the rollDice function on press when disabled', () => {\n    mockProps.disabled = true\n    const { getByTestId } = render(<Dice {...mockProps} />)\n\n    act(() => {\n      fireEvent.press(getByTestId('dice-component'))\n      jest.runAllTimers()\n    })\n\n    expect(mockProps.rollDice).not.toHaveBeenCalled()\n  })\n\n  it('updates dice image when rollDice function is called', () => {\n    const { getByTestId, rerender } = render(<Dice {...mockProps} />)\n\n    act(() => {\n      fireEvent.press(getByTestId('dice-component'))\n      jest.runAllTimers()\n    })\n\n    // Mock a new dice roll value\n    const newDiceRoll = 2\n    rerender(<Dice {...mockProps} lastRoll={newDiceRoll} />)\n\n    const diceImage = getByTestId('dice-image') // Assuming you have testID on Animated.Image\n    expect(diceImage.props.source).toEqual(\n      require(`./assets/${newDiceRoll}.png`),\n    )\n  })\n})\n","resolvedModuleNames":["/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx"]}],["/Users/playra/LeelaAiWeb3/src/components/Dice/Dice.tsx",{"fileContent":"import React, { useRef } from 'react'\n\nimport { Animated, Easing, Pressable, useColorScheme } from 'react-native'\n\nimport { ScaledSheet, vs } from 'react-native-size-matters'\n\nexport interface DiceProps {\n  disabled?: boolean\n  rollDice: () => void\n  lastRoll: number\n  size?: 'small' | 'medium' | 'large'\n}\n\nconst Dice = ({\n  disabled = false,\n  rollDice,\n  lastRoll,\n  size = 'medium',\n}: DiceProps & { lastRoll: number }) => {\n  const isDarkMode = useColorScheme() === 'dark'\n  const spinValue = useRef(new Animated.Value(0)).current\n\n  const spin = spinValue.interpolate({\n    inputRange: [0, 1],\n    outputRange: ['0deg', '360deg'],\n  })\n\n  const animateDice = (): void => {\n    if (disabled) {\n      return\n    }\n\n    spinValue.setValue(0)\n    Animated.timing(spinValue, {\n      toValue: 10,\n      duration: 500, //2000,\n      easing: Easing.cubic,\n      useNativeDriver: true,\n    }).start(() => {\n      rollDice()\n    })\n  }\n\n  const getSize = () => {\n    switch (size) {\n      case 'small':\n        return vs(50)\n      case 'large':\n        return vs(120)\n      case 'medium':\n      default:\n        return vs(80)\n    }\n  }\n  const getImage = (number: number, isDarkTheme: boolean) => {\n    switch (number) {\n      case 1:\n        return isDarkTheme\n          ? require('./assets_dark/1.png')\n          : require('./assets_light/1.png')\n      case 2:\n        return isDarkTheme\n          ? require('./assets_dark/2.png')\n          : require('./assets_light/2.png')\n      case 3:\n        return isDarkTheme\n          ? require('./assets_dark/3.png')\n          : require('./assets_light/3.png')\n      case 4:\n        return isDarkTheme\n          ? require('./assets_dark/4.png')\n          : require('./assets_light/4.png')\n      case 5:\n        return isDarkTheme\n          ? require('./assets_dark/5.png')\n          : require('./assets_light/5.png')\n      case 6:\n        return isDarkTheme\n          ? require('./assets_dark/6.png')\n          : require('./assets_light/6.png')\n      default:\n        return null\n    }\n  }\n  return (\n    <Pressable\n      onPress={animateDice}\n      style={styles.diceContainer}\n      testID=\"dice-component\"\n    >\n      <Animated.Image\n        style={[\n          styles.image,\n          {\n            transform: [{ rotate: spin }],\n            height: getSize(),\n            width: getSize(),\n          },\n        ]}\n        source={getImage(lastRoll, isDarkMode)}\n        testID=\"dice-image\"\n      />\n    </Pressable>\n  )\n}\n\nconst styles = ScaledSheet.create({\n  diceContainer: {\n    alignItems: 'center',\n    alignSelf: 'center',\n    marginVertical: vs(12),\n  },\n  image: {\n    height: vs(65),\n    width: vs(65),\n  },\n})\n\nexport { Dice }\n","resolvedModuleNames":[]}]]